
New_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000038c  08004888  08004888  00005888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c14  08004c14  000069d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004c14  08004c14  00005c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c1c  08004c1c  000069d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c1c  08004c1c  00005c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004c20  08004c20  00005c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000800  08004c24  00006800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  200009d4  08004df8  000069d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b70  08004df8  00006b70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000069d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f91  00000000  00000000  00006a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e2  00000000  00000000  0000a995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000538  00000000  00000000  0000bd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003a5  00000000  00000000  0000c2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017253  00000000  00000000  0000c655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f7f  00000000  00000000  000238a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087804  00000000  00000000  0002b827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b302b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  000b3070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000b5364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200009d4 	.word	0x200009d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004870 	.word	0x08004870

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200009d8 	.word	0x200009d8
 80001dc:	08004870 	.word	0x08004870

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <ADC1_Init>:
#include "string.h"
#include <stdint.h>
#include <math.h>
#include "ADC_temp.h"

void ADC1_Init(){
 8000c58:	b480      	push	{r7}
 8000c5a:	b083      	sub	sp, #12
 8000c5c:	af00      	add	r7, sp, #0
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b14      	ldr	r3, [pc, #80]	@ (8000cb4 <ADC1_Init+0x5c>)
 8000c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c66:	4a13      	ldr	r2, [pc, #76]	@ (8000cb4 <ADC1_Init+0x5c>)
 8000c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c6e:	4b11      	ldr	r3, [pc, #68]	@ (8000cb4 <ADC1_Init+0x5c>)
 8000c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
	*ADC1_JSQR = (16 << 15);
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <ADC1_Init+0x60>)
 8000c7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000c80:	601a      	str	r2, [r3, #0]
	*ADC1_CCR |= (1 << 23);
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <ADC1_Init+0x64>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a0d      	ldr	r2, [pc, #52]	@ (8000cbc <ADC1_Init+0x64>)
 8000c88:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c8c:	6013      	str	r3, [r2, #0]
	*ADC1_SMPR1 |= (0b111 << 18);
 8000c8e:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc0 <ADC1_Init+0x68>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <ADC1_Init+0x68>)
 8000c94:	f443 13e0 	orr.w	r3, r3, #1835008	@ 0x1c0000
 8000c98:	6013      	str	r3, [r2, #0]
	*ADC1_CR2 |= (1 << 0);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <ADC1_Init+0x6c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a09      	ldr	r2, [pc, #36]	@ (8000cc4 <ADC1_Init+0x6c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6013      	str	r3, [r2, #0]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40012038 	.word	0x40012038
 8000cbc:	40012304 	.word	0x40012304
 8000cc0:	4001200c 	.word	0x4001200c
 8000cc4:	40012008 	.word	0x40012008

08000cc8 <ADC1_temp_meas_sens>:
float ADC1_temp_meas_sens(){
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
	*ADC1_CR2 |= (1 << 22);
 8000cce:	4b34      	ldr	r3, [pc, #208]	@ (8000da0 <ADC1_temp_meas_sens+0xd8>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a33      	ldr	r2, [pc, #204]	@ (8000da0 <ADC1_temp_meas_sens+0xd8>)
 8000cd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cd8:	6013      	str	r3, [r2, #0]
	while(((*ADC1_SR >> 2) &1) == 0);
 8000cda:	bf00      	nop
 8000cdc:	4b31      	ldr	r3, [pc, #196]	@ (8000da4 <ADC1_temp_meas_sens+0xdc>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	089b      	lsrs	r3, r3, #2
 8000ce2:	f003 0301 	and.w	r3, r3, #1
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d0f8      	beq.n	8000cdc <ADC1_temp_meas_sens+0x14>
	*ADC1_SR &= ~(1 << 2);
 8000cea:	4b2e      	ldr	r3, [pc, #184]	@ (8000da4 <ADC1_temp_meas_sens+0xdc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2d      	ldr	r2, [pc, #180]	@ (8000da4 <ADC1_temp_meas_sens+0xdc>)
 8000cf0:	f023 0304 	bic.w	r3, r3, #4
 8000cf4:	6013      	str	r3, [r2, #0]
	uint16_t adc_raw = *ADC1_JDR1;
 8000cf6:	4b2c      	ldr	r3, [pc, #176]	@ (8000da8 <ADC1_temp_meas_sens+0xe0>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	81fb      	strh	r3, [r7, #14]
	float vin = (adc_raw * 3.0)/4095;
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f7ff fc18 	bl	8000534 <__aeabi_i2d>
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <ADC1_temp_meas_sens+0xe4>)
 8000d0a:	f7ff fc7d 	bl	8000608 <__aeabi_dmul>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4610      	mov	r0, r2
 8000d14:	4619      	mov	r1, r3
 8000d16:	a31c      	add	r3, pc, #112	@ (adr r3, 8000d88 <ADC1_temp_meas_sens+0xc0>)
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	f7ff fd9e 	bl	800085c <__aeabi_ddiv>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4610      	mov	r0, r2
 8000d26:	4619      	mov	r1, r3
 8000d28:	f7ff ff46 	bl	8000bb8 <__aeabi_d2f>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	60bb      	str	r3, [r7, #8]
	float temperature = ((vin - 0.76) / 0.0025) + 25;
 8000d30:	68b8      	ldr	r0, [r7, #8]
 8000d32:	f7ff fc11 	bl	8000558 <__aeabi_f2d>
 8000d36:	a316      	add	r3, pc, #88	@ (adr r3, 8000d90 <ADC1_temp_meas_sens+0xc8>)
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f7ff faac 	bl	8000298 <__aeabi_dsub>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	a313      	add	r3, pc, #76	@ (adr r3, 8000d98 <ADC1_temp_meas_sens+0xd0>)
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	f7ff fd85 	bl	800085c <__aeabi_ddiv>
 8000d52:	4602      	mov	r2, r0
 8000d54:	460b      	mov	r3, r1
 8000d56:	4610      	mov	r0, r2
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	4b14      	ldr	r3, [pc, #80]	@ (8000db0 <ADC1_temp_meas_sens+0xe8>)
 8000d60:	f7ff fa9c 	bl	800029c <__adddf3>
 8000d64:	4602      	mov	r2, r0
 8000d66:	460b      	mov	r3, r1
 8000d68:	4610      	mov	r0, r2
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	f7ff ff24 	bl	8000bb8 <__aeabi_d2f>
 8000d70:	4603      	mov	r3, r0
 8000d72:	607b      	str	r3, [r7, #4]
	return temperature;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	ee07 3a90 	vmov	s15, r3
}
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	f3af 8000 	nop.w
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	40affe00 	.word	0x40affe00
 8000d90:	851eb852 	.word	0x851eb852
 8000d94:	3fe851eb 	.word	0x3fe851eb
 8000d98:	47ae147b 	.word	0x47ae147b
 8000d9c:	3f647ae1 	.word	0x3f647ae1
 8000da0:	40012008 	.word	0x40012008
 8000da4:	40012000 	.word	0x40012000
 8000da8:	4001203c 	.word	0x4001203c
 8000dac:	40080000 	.word	0x40080000
 8000db0:	40390000 	.word	0x40390000

08000db4 <buttoninit>:
 */
#include"Button.h"
#include"LED.h"


void buttoninit(){
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <buttoninit+0x3c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8000df0 <buttoninit+0x3c>)
 8000dc4:	f043 0301 	orr.w	r3, r3, #1
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <buttoninit+0x3c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 0);
 8000dd6:	4b07      	ldr	r3, [pc, #28]	@ (8000df4 <buttoninit+0x40>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a06      	ldr	r2, [pc, #24]	@ (8000df4 <buttoninit+0x40>)
 8000ddc:	f023 0303 	bic.w	r3, r3, #3
 8000de0:	6013      	str	r3, [r2, #0]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	40020000 	.word	0x40020000

08000df8 <buttonState>:


/*
 * Make a function can give/return you 1 for button pressed, 0 for button unpresse
 */
char buttonState(){
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
	if(*GPIOA_IDR & (1 << 0) == 1){
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <buttonState+0x20>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <buttonState+0x14>
		return 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	e000      	b.n	8000e0e <buttonState+0x16>
	}
	else {
		return 0;
 8000e0c:	2300      	movs	r3, #0
	}
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	40020010 	.word	0x40020010

08000e1c <EXTI_Init>:
#include <main.h>
#include <base_address.h>
#include "UART.h"


void EXTI_Init(void(*inputFunction(void))){
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000e24:	2300      	movs	r3, #0
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee4 <EXTI_Init+0xc8>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2c:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee4 <EXTI_Init+0xc8>)
 8000e2e:	f043 0308 	orr.w	r3, r3, #8
 8000e32:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e34:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee4 <EXTI_Init+0xc8>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e38:	f003 0308 	and.w	r3, r3, #8
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	68fb      	ldr	r3, [r7, #12]
	//Rising edge
		*EXTI_RTSR &= ~(0b11 << 0);
 8000e40:	4b29      	ldr	r3, [pc, #164]	@ (8000ee8 <EXTI_Init+0xcc>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a28      	ldr	r2, [pc, #160]	@ (8000ee8 <EXTI_Init+0xcc>)
 8000e46:	f023 0303 	bic.w	r3, r3, #3
 8000e4a:	6013      	str	r3, [r2, #0]
		*EXTI_RTSR |=  (0b01 << 0);
 8000e4c:	4b26      	ldr	r3, [pc, #152]	@ (8000ee8 <EXTI_Init+0xcc>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a25      	ldr	r2, [pc, #148]	@ (8000ee8 <EXTI_Init+0xcc>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	6013      	str	r3, [r2, #0]
		//Falling edge
		*EXTI_FTSR &= ~(0b11 << 0);
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <EXTI_Init+0xd0>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <EXTI_Init+0xd0>)
 8000e5e:	f023 0303 	bic.w	r3, r3, #3
 8000e62:	6013      	str	r3, [r2, #0]
		*EXTI_FTSR |=  (0b01 << 0);
 8000e64:	4b21      	ldr	r3, [pc, #132]	@ (8000eec <EXTI_Init+0xd0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a20      	ldr	r2, [pc, #128]	@ (8000eec <EXTI_Init+0xd0>)
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
		//Set mask
		*EXTI_IMR &= ~(0b11 << 0);
 8000e70:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef0 <EXTI_Init+0xd4>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a1e      	ldr	r2, [pc, #120]	@ (8000ef0 <EXTI_Init+0xd4>)
 8000e76:	f023 0303 	bic.w	r3, r3, #3
 8000e7a:	6013      	str	r3, [r2, #0]
		*EXTI_IMR |=  (0b01 << 0);
 8000e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef0 <EXTI_Init+0xd4>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a1b      	ldr	r2, [pc, #108]	@ (8000ef0 <EXTI_Init+0xd4>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6013      	str	r3, [r2, #0]

		*NVIC_ISER0 |= (1<<6);
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <EXTI_Init+0xd8>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a19      	ldr	r2, [pc, #100]	@ (8000ef4 <EXTI_Init+0xd8>)
 8000e8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e92:	6013      	str	r3, [r2, #0]

		//MOVE VECTOR TABLE TO RAM, RAM ADDRESS 0X20000000
		uint32_t* src = 0x00; //address
 8000e94:	2300      	movs	r3, #0
 8000e96:	61bb      	str	r3, [r7, #24]
		uint32_t* distance = (uint32_t*) 0x20000000;
 8000e98:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000e9c:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 0x198; i++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
 8000ea2:	e00c      	b.n	8000ebe <EXTI_Init+0xa2>
			//distance[i] = src[i];
			*(distance + i) = *(src + i);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	441a      	add	r2, r3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	6979      	ldr	r1, [r7, #20]
 8000eb2:	440b      	add	r3, r1
 8000eb4:	6812      	ldr	r2, [r2, #0]
 8000eb6:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 0x198; i++){
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	61fb      	str	r3, [r7, #28]
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f5b3 7fcc 	cmp.w	r3, #408	@ 0x198
 8000ec4:	dbee      	blt.n	8000ea4 <EXTI_Init+0x88>
		}
		//Inform ARM vector table is already offset to RAM
		//uint32_t* VTOR = (uint32_t*)0xE000ED08;
		*my_VTOR = 0x20000000;
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <EXTI_Init+0xdc>)
 8000ec8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000ecc:	601a      	str	r2, [r3, #0]
		//
		int* ptr;
		ptr = (int*) 0x20000058;
 8000ece:	4b0b      	ldr	r3, [pc, #44]	@ (8000efc <EXTI_Init+0xe0>)
 8000ed0:	613b      	str	r3, [r7, #16]
		*ptr = inputFunction;
 8000ed2:	687a      	ldr	r2, [r7, #4]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	601a      	str	r2, [r3, #0]


}
 8000ed8:	bf00      	nop
 8000eda:	3724      	adds	r7, #36	@ 0x24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40013c08 	.word	0x40013c08
 8000eec:	40013c0c 	.word	0x40013c0c
 8000ef0:	40013c00 	.word	0x40013c00
 8000ef4:	e000e100 	.word	0xe000e100
 8000ef8:	e000ed08 	.word	0xe000ed08
 8000efc:	20000058 	.word	0x20000058

08000f00 <LEDinit>:
 *  Created on: Mar 30, 2025
 *      Author: 84903
 */
#include "LED.h"

void LEDinit(){
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b21      	ldr	r3, [pc, #132]	@ (8000f90 <LEDinit+0x90>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0e:	4a20      	ldr	r2, [pc, #128]	@ (8000f90 <LEDinit+0x90>)
 8000f10:	f043 0308 	orr.w	r3, r3, #8
 8000f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f16:	4b1e      	ldr	r3, [pc, #120]	@ (8000f90 <LEDinit+0x90>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	f003 0308 	and.w	r3, r3, #8
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
	//LED14
	*GPIOD_MODER &= ~(0b11 << 24); //RESET PD12
 8000f22:	4b1c      	ldr	r3, [pc, #112]	@ (8000f94 <LEDinit+0x94>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1b      	ldr	r2, [pc, #108]	@ (8000f94 <LEDinit+0x94>)
 8000f28:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000f2c:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 24); //Set PD12 as output
 8000f2e:	4b19      	ldr	r3, [pc, #100]	@ (8000f94 <LEDinit+0x94>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a18      	ldr	r2, [pc, #96]	@ (8000f94 <LEDinit+0x94>)
 8000f34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000f38:	6013      	str	r3, [r2, #0]
	//LED13
	*GPIOD_MODER &= ~(0b11 << 26); //RESET PD13
 8000f3a:	4b16      	ldr	r3, [pc, #88]	@ (8000f94 <LEDinit+0x94>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a15      	ldr	r2, [pc, #84]	@ (8000f94 <LEDinit+0x94>)
 8000f40:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000f44:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 26); //Set PD13 as output
 8000f46:	4b13      	ldr	r3, [pc, #76]	@ (8000f94 <LEDinit+0x94>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a12      	ldr	r2, [pc, #72]	@ (8000f94 <LEDinit+0x94>)
 8000f4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000f50:	6013      	str	r3, [r2, #0]
	//LED15
	*GPIOD_MODER &= ~(0b11 << 28); //RESET PD14
 8000f52:	4b10      	ldr	r3, [pc, #64]	@ (8000f94 <LEDinit+0x94>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a0f      	ldr	r2, [pc, #60]	@ (8000f94 <LEDinit+0x94>)
 8000f58:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000f5c:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 28); //Set PD14 as output
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f94 <LEDinit+0x94>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a0c      	ldr	r2, [pc, #48]	@ (8000f94 <LEDinit+0x94>)
 8000f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	6013      	str	r3, [r2, #0]
	//LED16
	*GPIOD_MODER &= ~(0b11 << 30); //RESET PD15
 8000f6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f94 <LEDinit+0x94>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a09      	ldr	r2, [pc, #36]	@ (8000f94 <LEDinit+0x94>)
 8000f70:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000f74:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 30); //Set PD15 as output
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <LEDinit+0x94>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a06      	ldr	r2, [pc, #24]	@ (8000f94 <LEDinit+0x94>)
 8000f7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f80:	6013      	str	r3, [r2, #0]
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <LEDblink>:


void LEDblink(int on_off, uint8_t inputLEDpin){
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	if (on_off == 1){
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <LEDblink+0x1e>
		*GPIOD_BSRR = (1 << inputLEDpin);
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	2201      	movs	r2, #1
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <LEDblink+0x38>)
 8000fb2:	601a      	str	r2, [r3, #0]
	} else {
		*GPIOD_BSRR = (1 << (inputLEDpin + 16));
	}
}
 8000fb4:	e005      	b.n	8000fc2 <LEDblink+0x2a>
		*GPIOD_BSRR = (1 << (inputLEDpin + 16));
 8000fb6:	78fb      	ldrb	r3, [r7, #3]
 8000fb8:	3310      	adds	r3, #16
 8000fba:	2201      	movs	r2, #1
 8000fbc:	409a      	lsls	r2, r3
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <LEDblink+0x38>)
 8000fc0:	601a      	str	r2, [r3, #0]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40020c18 	.word	0x40020c18

08000fd4 <SPI_Init>:

#include <main.h>
#include "base_address.h"
#include "stm32f4xx_hal.h"

void SPI_Init(){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
		-Gyroscope works as Slave mode

	 */

	//Set GPIO pin for PA5 as SCLK
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b4d      	ldr	r3, [pc, #308]	@ (8001114 <SPI_Init+0x140>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	4a4c      	ldr	r2, [pc, #304]	@ (8001114 <SPI_Init+0x140>)
 8000fe4:	f043 0301 	orr.w	r3, r3, #1
 8000fe8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fea:	4b4a      	ldr	r3, [pc, #296]	@ (8001114 <SPI_Init+0x140>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
	*GPIOA_MODER &=  ~(0b11 << 10);
 8000ff6:	4b48      	ldr	r3, [pc, #288]	@ (8001118 <SPI_Init+0x144>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a47      	ldr	r2, [pc, #284]	@ (8001118 <SPI_Init+0x144>)
 8000ffc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001000:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 10); //alternate func mode
 8001002:	4b45      	ldr	r3, [pc, #276]	@ (8001118 <SPI_Init+0x144>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a44      	ldr	r2, [pc, #272]	@ (8001118 <SPI_Init+0x144>)
 8001008:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800100c:	6013      	str	r3, [r2, #0]
	//Set GPIO pin for PA6 as MISO
	*GPIOA_MODER &=  ~(0b11 << 12);
 800100e:	4b42      	ldr	r3, [pc, #264]	@ (8001118 <SPI_Init+0x144>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a41      	ldr	r2, [pc, #260]	@ (8001118 <SPI_Init+0x144>)
 8001014:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001018:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 12); //alternate func mode
 800101a:	4b3f      	ldr	r3, [pc, #252]	@ (8001118 <SPI_Init+0x144>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a3e      	ldr	r2, [pc, #248]	@ (8001118 <SPI_Init+0x144>)
 8001020:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001024:	6013      	str	r3, [r2, #0]
	//Set GPIO pin for PA7 as MOSI
	*GPIOA_MODER &=  ~(0b11 << 14);
 8001026:	4b3c      	ldr	r3, [pc, #240]	@ (8001118 <SPI_Init+0x144>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a3b      	ldr	r2, [pc, #236]	@ (8001118 <SPI_Init+0x144>)
 800102c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001030:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 14); //alternate func mode
 8001032:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <SPI_Init+0x144>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a38      	ldr	r2, [pc, #224]	@ (8001118 <SPI_Init+0x144>)
 8001038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800103c:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	60bb      	str	r3, [r7, #8]
 8001042:	4b34      	ldr	r3, [pc, #208]	@ (8001114 <SPI_Init+0x140>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001046:	4a33      	ldr	r2, [pc, #204]	@ (8001114 <SPI_Init+0x140>)
 8001048:	f043 0310 	orr.w	r3, r3, #16
 800104c:	6313      	str	r3, [r2, #48]	@ 0x30
 800104e:	4b31      	ldr	r3, [pc, #196]	@ (8001114 <SPI_Init+0x140>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001052:	f003 0310 	and.w	r3, r3, #16
 8001056:	60bb      	str	r3, [r7, #8]
 8001058:	68bb      	ldr	r3, [r7, #8]
	//Set GPIO pin for CS as output for PE3
	*GPIOE_MODER &=  ~(0b11 << 6);
 800105a:	4b30      	ldr	r3, [pc, #192]	@ (800111c <SPI_Init+0x148>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a2f      	ldr	r2, [pc, #188]	@ (800111c <SPI_Init+0x148>)
 8001060:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8001064:	6013      	str	r3, [r2, #0]
	*GPIOE_MODER |=   (0b01 << 6); //alternate func mode
 8001066:	4b2d      	ldr	r3, [pc, #180]	@ (800111c <SPI_Init+0x148>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a2c      	ldr	r2, [pc, #176]	@ (800111c <SPI_Init+0x148>)
 800106c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001070:	6013      	str	r3, [r2, #0]

	//Alternative function for PA5 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 20);
 8001072:	4b2b      	ldr	r3, [pc, #172]	@ (8001120 <SPI_Init+0x14c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <SPI_Init+0x14c>)
 8001078:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800107c:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 20); //AF5: 0101; for PA5 start from bit 20
 800107e:	4b28      	ldr	r3, [pc, #160]	@ (8001120 <SPI_Init+0x14c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a27      	ldr	r2, [pc, #156]	@ (8001120 <SPI_Init+0x14c>)
 8001084:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 8001088:	6013      	str	r3, [r2, #0]
	//Alternative function for PA6 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 24);
 800108a:	4b25      	ldr	r3, [pc, #148]	@ (8001120 <SPI_Init+0x14c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a24      	ldr	r2, [pc, #144]	@ (8001120 <SPI_Init+0x14c>)
 8001090:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 8001094:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 24);
 8001096:	4b22      	ldr	r3, [pc, #136]	@ (8001120 <SPI_Init+0x14c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a21      	ldr	r2, [pc, #132]	@ (8001120 <SPI_Init+0x14c>)
 800109c:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80010a0:	6013      	str	r3, [r2, #0]
	//Alternative function for PA7 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 28);
 80010a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001120 <SPI_Init+0x14c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1e      	ldr	r2, [pc, #120]	@ (8001120 <SPI_Init+0x14c>)
 80010a8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80010ac:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 28);
 80010ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001120 <SPI_Init+0x14c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001120 <SPI_Init+0x14c>)
 80010b4:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80010b8:	6013      	str	r3, [r2, #0]

	//enable SPI
	__HAL_RCC_SPI1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <SPI_Init+0x140>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <SPI_Init+0x140>)
 80010c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ca:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <SPI_Init+0x140>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
	//Master config for STM32
	*SPI1_CR1 |=  (1 << 2);
 80010d6:	4b13      	ldr	r3, [pc, #76]	@ (8001124 <SPI_Init+0x150>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a12      	ldr	r2, [pc, #72]	@ (8001124 <SPI_Init+0x150>)
 80010dc:	f043 0304 	orr.w	r3, r3, #4
 80010e0:	6013      	str	r3, [r2, #0]
	//Software slave management and internal slave selection
	*SPI1_CR1 |=  (1 << 9) | (1 << 8);
 80010e2:	4b10      	ldr	r3, [pc, #64]	@ (8001124 <SPI_Init+0x150>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <SPI_Init+0x150>)
 80010e8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80010ec:	6013      	str	r3, [r2, #0]
	//Config clock for SCLk - baudrate control - bit5:3
	*SPI1_CR1 |=   (0b011 << 3);
 80010ee:	4b0d      	ldr	r3, [pc, #52]	@ (8001124 <SPI_Init+0x150>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <SPI_Init+0x150>)
 80010f4:	f043 0318 	orr.w	r3, r3, #24
 80010f8:	6013      	str	r3, [r2, #0]
	//Enable SPI
	*SPI1_CR1 |= (1 << 6);
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <SPI_Init+0x150>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a09      	ldr	r2, [pc, #36]	@ (8001124 <SPI_Init+0x150>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001104:	6013      	str	r3, [r2, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000
 800111c:	40021000 	.word	0x40021000
 8001120:	40020020 	.word	0x40020020
 8001124:	40013000 	.word	0x40013000

08001128 <Timer_init>:
 */
#include <main.h>
#include "base_address.h"
#include "stm32f4xx_hal.h"

void Timer_init(){
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b15      	ldr	r3, [pc, #84]	@ (8001188 <Timer_init+0x60>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a14      	ldr	r2, [pc, #80]	@ (8001188 <Timer_init+0x60>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b12      	ldr	r3, [pc, #72]	@ (8001188 <Timer_init+0x60>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
	//Timer 1 second so prescaler should be 16.000.000 / 16000 = 1000xung/s
	//Prescaler = 16000 and ARR = 1000
	*TIM1_PSC = 16 - 1; //Avoid to divide to 0, so the producer have set that if prescaler value is 0, the RCC is auto divide to 1. If 1, it divide to 2 and the same for others
 800114a:	4b10      	ldr	r3, [pc, #64]	@ (800118c <Timer_init+0x64>)
 800114c:	220f      	movs	r2, #15
 800114e:	601a      	str	r2, [r3, #0]
	*TIM1_ARR = 1000;
 8001150:	4b0f      	ldr	r3, [pc, #60]	@ (8001190 <Timer_init+0x68>)
 8001152:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001156:	601a      	str	r2, [r3, #0]
	//Enable counter - bit 0 thanh ghi CR1
	*TIM1_CR1 |= (1 << 0);
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <Timer_init+0x6c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <Timer_init+0x6c>)
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	6013      	str	r3, [r2, #0]

	*NVIC_ISER0 |= (1 << 25);
 8001164:	4b0c      	ldr	r3, [pc, #48]	@ (8001198 <Timer_init+0x70>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0b      	ldr	r2, [pc, #44]	@ (8001198 <Timer_init+0x70>)
 800116a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800116e:	6013      	str	r3, [r2, #0]
	*TIM1_CR1 |= (1 << 0); //count enable
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <Timer_init+0x6c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a07      	ldr	r2, [pc, #28]	@ (8001194 <Timer_init+0x6c>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6013      	str	r3, [r2, #0]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	40023800 	.word	0x40023800
 800118c:	40010028 	.word	0x40010028
 8001190:	4001002c 	.word	0x4001002c
 8001194:	40010000 	.word	0x40010000
 8001198:	e000e100 	.word	0xe000e100

0800119c <TIM1_UP_TIM10_IRQHandler>:
	*TIM1_SR &= ~(1 << 0); //CLear bit
}

int time_cnt = 0;

void TIM1_UP_TIM10_IRQHandler(){
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
	time_cnt++;
 80011a0:	4b07      	ldr	r3, [pc, #28]	@ (80011c0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	3301      	adds	r3, #1
 80011a6:	4a06      	ldr	r2, [pc, #24]	@ (80011c0 <TIM1_UP_TIM10_IRQHandler+0x24>)
 80011a8:	6013      	str	r3, [r2, #0]
	*TIM1_SR &= ~(1 << 0);
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <TIM1_UP_TIM10_IRQHandler+0x28>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a05      	ldr	r2, [pc, #20]	@ (80011c4 <TIM1_UP_TIM10_IRQHandler+0x28>)
 80011b0:	f023 0301 	bic.w	r3, r3, #1
 80011b4:	6013      	str	r3, [r2, #0]
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	200009f0 	.word	0x200009f0
 80011c4:	40010010 	.word	0x40010010

080011c8 <UART1_Init>:
#include "string.h"
#include "LED.h"



void UART1_Init(){
 80011c8:	b480      	push	{r7}
 80011ca:	b085      	sub	sp, #20
 80011cc:	af00      	add	r7, sp, #0
	/* Config GPIOB
	-set PB6 as UART1_TX and PB7 as UART1_RX table 9_datasheet_p.49
	-PB6 alternate function AF07
	-PB7 alternate function AF07
	*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b34      	ldr	r3, [pc, #208]	@ (80012a4 <UART1_Init+0xdc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d6:	4a33      	ldr	r2, [pc, #204]	@ (80012a4 <UART1_Init+0xdc>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011de:	4b31      	ldr	r3, [pc, #196]	@ (80012a4 <UART1_Init+0xdc>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
	//PB6 set moder6; PB7 moder7
	//Set alternate function mode (set 10)
	*GPIOB_MODER &= ~ (0b1111 << 12); //Clear bit PB6
 80011ea:	4b2f      	ldr	r3, [pc, #188]	@ (80012a8 <UART1_Init+0xe0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a2e      	ldr	r2, [pc, #184]	@ (80012a8 <UART1_Init+0xe0>)
 80011f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80011f4:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |=   (0b10  << 12) | (0b10 << 14); //Set alter func bit for PB6 and PB7
 80011f6:	4b2c      	ldr	r3, [pc, #176]	@ (80012a8 <UART1_Init+0xe0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a2b      	ldr	r2, [pc, #172]	@ (80012a8 <UART1_Init+0xe0>)
 80011fc:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 8001200:	6013      	str	r3, [r2, #0]

	//Cuz we use pin 6 and 7, so using alternate function low
	*GPIOB_AFRL &= ~(0xFF << 24); //Clear bit AF7 from bit 24 and 28 for port B6 and B7
 8001202:	4b2a      	ldr	r3, [pc, #168]	@ (80012ac <UART1_Init+0xe4>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a29      	ldr	r2, [pc, #164]	@ (80012ac <UART1_Init+0xe4>)
 8001208:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800120c:	6013      	str	r3, [r2, #0]
	*GPIOB_AFRL |=  (0b0111 << 24) | (0b0111 <<28); //Set bit AF7 for pin b6 and b7
 800120e:	4b27      	ldr	r3, [pc, #156]	@ (80012ac <UART1_Init+0xe4>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a26      	ldr	r2, [pc, #152]	@ (80012ac <UART1_Init+0xe4>)
 8001214:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 8001218:	6013      	str	r3, [r2, #0]
		+DIV_Mantissa = 104
		+DIV_Fraction = 0.166666667 * 15 = 2.5 (round to 3)

		*/
	//the note for this part in samsung tablet due to formula reason.
	__HAL_RCC_USART1_CLK_ENABLE();	// the default RCC clock automatically provide 16Mhz
 800121a:	2300      	movs	r3, #0
 800121c:	607b      	str	r3, [r7, #4]
 800121e:	4b21      	ldr	r3, [pc, #132]	@ (80012a4 <UART1_Init+0xdc>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	4a20      	ldr	r2, [pc, #128]	@ (80012a4 <UART1_Init+0xdc>)
 8001224:	f043 0310 	orr.w	r3, r3, #16
 8001228:	6453      	str	r3, [r2, #68]	@ 0x44
 800122a:	4b1e      	ldr	r3, [pc, #120]	@ (80012a4 <UART1_Init+0xdc>)
 800122c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122e:	f003 0310 	and.w	r3, r3, #16
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
	*UART1_BRR = (104 << 4) | (3 << 0); //baudrate register
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <UART1_Init+0xe8>)
 8001238:	f240 6283 	movw	r2, #1667	@ 0x683
 800123c:	601a      	str	r2, [r3, #0]
	//Set data size - word length that is bit 12 CR1
	*UART1_CR1 |= (1 << 12); //need parity so choose "1", data bits + parity = 9 data bits
 800123e:	4b1d      	ldr	r3, [pc, #116]	@ (80012b4 <UART1_Init+0xec>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a1c      	ldr	r2, [pc, #112]	@ (80012b4 <UART1_Init+0xec>)
 8001244:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001248:	6013      	str	r3, [r2, #0]
	//Set Parity bit 10 (PCE - parity control enable) of CR1
	*UART1_CR1 |= (1 << 10);
 800124a:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <UART1_Init+0xec>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a19      	ldr	r2, [pc, #100]	@ (80012b4 <UART1_Init+0xec>)
 8001250:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001254:	6013      	str	r3, [r2, #0]
	//Enable transmitter
	*UART1_CR1 |= (1 << 3);
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <UART1_Init+0xec>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a16      	ldr	r2, [pc, #88]	@ (80012b4 <UART1_Init+0xec>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6013      	str	r3, [r2, #0]
	//Enable receiver - CR1 bit 3 TE(Trans enable), bit 2 RE (Receiver enable)
	*UART1_CR1 |= (1 << 2);
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <UART1_Init+0xec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a13      	ldr	r2, [pc, #76]	@ (80012b4 <UART1_Init+0xec>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6013      	str	r3, [r2, #0]
	//Enable UART - CR1 bit 13 UE (USART enable)
	*UART1_CR1 |= (1 << 13);
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <UART1_Init+0xec>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a10      	ldr	r2, [pc, #64]	@ (80012b4 <UART1_Init+0xec>)
 8001274:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001278:	6013      	str	r3, [r2, #0]

#if 1
	//Enable RXNE interrupt (enable su kien ngat), when RXNE is set, UART1 generate interrupt event send to nvic
	*UART1_CR1 |= (1 << 5);
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <UART1_Init+0xec>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a0d      	ldr	r2, [pc, #52]	@ (80012b4 <UART1_Init+0xec>)
 8001280:	f043 0320 	orr.w	r3, r3, #32
 8001284:	6013      	str	r3, [r2, #0]
	//NVIC approve interrupt event, which is send from UART1
	//in vector table, USART1 at position number 37
	uint32_t* NVIC_ISER1 = (uint32_t*)(0xE000E104); //Because the address of ISER0  is 0xE000E100 so ISER1 + theem 4 bit
 8001286:	4b0c      	ldr	r3, [pc, #48]	@ (80012b8 <UART1_Init+0xf0>)
 8001288:	60fb      	str	r3, [r7, #12]
	*NVIC_ISER1 |= 1 << (37 - 32);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f043 0220 	orr.w	r2, r3, #32
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]
#else
	//when RXNE is set, send signal to DMA2, DMA2 move data to RAM
	*UART1_CR3 |= (1 << 6);
	//dma2_UART1_rx_Init();
#endif
}
 8001296:	bf00      	nop
 8001298:	3714      	adds	r7, #20
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800
 80012a8:	40020400 	.word	0x40020400
 80012ac:	40020420 	.word	0x40020420
 80012b0:	40011008 	.word	0x40011008
 80012b4:	4001100c 	.word	0x4001100c
 80012b8:	e000e104 	.word	0xe000e104

080012bc <UART1_Transmit_1byte>:

//(send 1 byte only)
void UART1_Transmit_1byte(uint8_t data){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	while(((*UART1_SR >> 7) & 1) == 0); //wait DR empty
 80012c6:	bf00      	nop
 80012c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <UART1_Transmit_1byte+0x48>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	09db      	lsrs	r3, r3, #7
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f8      	beq.n	80012c8 <UART1_Transmit_1byte+0xc>
	*UART1_DR = data;
 80012d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001308 <UART1_Transmit_1byte+0x4c>)
 80012d8:	79fb      	ldrb	r3, [r7, #7]
 80012da:	6013      	str	r3, [r2, #0]
	while(((*UART1_SR >> 6) & 1) == 0); //wait transmitter of UART1 complete transfer
 80012dc:	bf00      	nop
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <UART1_Transmit_1byte+0x48>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	099b      	lsrs	r3, r3, #6
 80012e4:	f003 0301 	and.w	r3, r3, #1
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f8      	beq.n	80012de <UART1_Transmit_1byte+0x22>
	*UART1_SR &= ~(1 << 6);
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <UART1_Transmit_1byte+0x48>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <UART1_Transmit_1byte+0x48>)
 80012f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012f6:	6013      	str	r3, [r2, #0]

}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40011000 	.word	0x40011000
 8001308:	40011004 	.word	0x40011004

0800130c <UART1_Trans_String>:

//Send string
void UART1_Trans_String(char* msg){
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	int msg_len = strlen(msg);
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7fe ffb3 	bl	8000280 <strlen>
 800131a:	4603      	mov	r3, r0
 800131c:	60bb      	str	r3, [r7, #8]
	for(int i = 0; i < msg_len; i++)
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	e009      	b.n	8001338 <UART1_Trans_String+0x2c>
	{
		UART1_Transmit_1byte(msg[i]);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ffc5 	bl	80012bc <UART1_Transmit_1byte>
	for(int i = 0; i < msg_len; i++)
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	3301      	adds	r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fa      	ldr	r2, [r7, #12]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf1      	blt.n	8001324 <UART1_Trans_String+0x18>
	}
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <UART_trans_float>:
//Trans float to byte
void UART_trans_float(float val){
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af02      	add	r7, sp, #8
 8001352:	ed87 0a01 	vstr	s0, [r7, #4]
	char buf[12];
	char fmt[] = "%.2f";
 8001356:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <UART_trans_float+0x44>)
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	2300      	movs	r3, #0
 800135c:	743b      	strb	r3, [r7, #16]
	snprintf(buf, 12, fmt, val);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f8fa 	bl	8000558 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	f107 010c 	add.w	r1, r7, #12
 800136c:	f107 0014 	add.w	r0, r7, #20
 8001370:	e9cd 2300 	strd	r2, r3, [sp]
 8001374:	460a      	mov	r2, r1
 8001376:	210c      	movs	r1, #12
 8001378:	f001 f91e 	bl	80025b8 <sniprintf>
	UART1_Trans_String(buf);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff ffc3 	bl	800130c <UART1_Trans_String>
}
 8001386:	bf00      	nop
 8001388:	3720      	adds	r7, #32
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	66322e25 	.word	0x66322e25

08001394 <USART1_IRQHandler>:
}

//Library of ST
char recei_data[32];
int rx_index = 0;
void USART1_IRQHandler(){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	recei_data[rx_index++] = *UART1_DR; //Khi DR doc du lieu, no se tu clear interrupt flag, no need code for clear flag
 8001398:	4b19      	ldr	r3, [pc, #100]	@ (8001400 <USART1_IRQHandler+0x6c>)
 800139a:	6818      	ldr	r0, [r3, #0]
 800139c:	4b19      	ldr	r3, [pc, #100]	@ (8001404 <USART1_IRQHandler+0x70>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	1c5a      	adds	r2, r3, #1
 80013a2:	4918      	ldr	r1, [pc, #96]	@ (8001404 <USART1_IRQHandler+0x70>)
 80013a4:	600a      	str	r2, [r1, #0]
 80013a6:	b2c1      	uxtb	r1, r0
 80013a8:	4a17      	ldr	r2, [pc, #92]	@ (8001408 <USART1_IRQHandler+0x74>)
 80013aa:	54d1      	strb	r1, [r2, r3]
	if(strstr(recei_data, "LED ON") != NULL){
 80013ac:	4917      	ldr	r1, [pc, #92]	@ (800140c <USART1_IRQHandler+0x78>)
 80013ae:	4816      	ldr	r0, [pc, #88]	@ (8001408 <USART1_IRQHandler+0x74>)
 80013b0:	f001 f983 	bl	80026ba <strstr>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00c      	beq.n	80013d4 <USART1_IRQHandler+0x40>
		LEDblink(1, LED5_pin);
 80013ba:	210e      	movs	r1, #14
 80013bc:	2001      	movs	r0, #1
 80013be:	f7ff fdeb 	bl	8000f98 <LEDblink>
		//UART1_Trans_String("LED turned ON\r\n");
		rx_index = 0;
 80013c2:	4b10      	ldr	r3, [pc, #64]	@ (8001404 <USART1_IRQHandler+0x70>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
		memset(recei_data, 0, sizeof(recei_data));
 80013c8:	2220      	movs	r2, #32
 80013ca:	2100      	movs	r1, #0
 80013cc:	480e      	ldr	r0, [pc, #56]	@ (8001408 <USART1_IRQHandler+0x74>)
 80013ce:	f001 f96c 	bl	80026aa <memset>
		//UART1_Trans_String("LED turned OFF\r\n");
		rx_index = 0;
		memset(recei_data, 0, sizeof(recei_data));
	}

}
 80013d2:	e012      	b.n	80013fa <USART1_IRQHandler+0x66>
	else if(strstr(recei_data, "LED OFF") != NULL){
 80013d4:	490e      	ldr	r1, [pc, #56]	@ (8001410 <USART1_IRQHandler+0x7c>)
 80013d6:	480c      	ldr	r0, [pc, #48]	@ (8001408 <USART1_IRQHandler+0x74>)
 80013d8:	f001 f96f 	bl	80026ba <strstr>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00b      	beq.n	80013fa <USART1_IRQHandler+0x66>
		LEDblink(0, LED5_pin);
 80013e2:	210e      	movs	r1, #14
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fdd7 	bl	8000f98 <LEDblink>
		rx_index = 0;
 80013ea:	4b06      	ldr	r3, [pc, #24]	@ (8001404 <USART1_IRQHandler+0x70>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		memset(recei_data, 0, sizeof(recei_data));
 80013f0:	2220      	movs	r2, #32
 80013f2:	2100      	movs	r1, #0
 80013f4:	4804      	ldr	r0, [pc, #16]	@ (8001408 <USART1_IRQHandler+0x74>)
 80013f6:	f001 f958 	bl	80026aa <memset>
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40011004 	.word	0x40011004
 8001404:	20000a14 	.word	0x20000a14
 8001408:	200009f4 	.word	0x200009f4
 800140c:	08004888 	.word	0x08004888
 8001410:	08004890 	.word	0x08004890

08001414 <dma2_UART1_rx_Init>:

char rx_buf[7];
#define DMA2_ADDR 0x40026400
void dma2_UART1_rx_Init(){
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <dma2_UART1_rx_Init+0x8c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a1f      	ldr	r2, [pc, #124]	@ (80014a0 <dma2_UART1_rx_Init+0x8c>)
 8001424:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b1d      	ldr	r3, [pc, #116]	@ (80014a0 <dma2_UART1_rx_Init+0x8c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
	//dia chi nguoi nhan
	uint32_t* DMA_S2M0AR = (uint32_t*)(DMA2_ADDR + 0x1C + 0x18 *2);
 8001436:	4b1b      	ldr	r3, [pc, #108]	@ (80014a4 <dma2_UART1_rx_Init+0x90>)
 8001438:	617b      	str	r3, [r7, #20]
	*DMA_S2M0AR = recei_data;
 800143a:	4a1b      	ldr	r2, [pc, #108]	@ (80014a8 <dma2_UART1_rx_Init+0x94>)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	601a      	str	r2, [r3, #0]

	//dia chi nguoi gui
	uint32_t* DMA_S2PAR = (uint32_t*)(DMA2_ADDR + 0x18 + 0x18 *2);
 8001440:	4b1a      	ldr	r3, [pc, #104]	@ (80014ac <dma2_UART1_rx_Init+0x98>)
 8001442:	613b      	str	r3, [r7, #16]
	*DMA_S2PAR = 0x40011004;
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <dma2_UART1_rx_Init+0x9c>)
 8001448:	601a      	str	r2, [r3, #0]

	//kich thuoc goi hang
	uint32_t* DMA_S2NDTR = (uint32_t*)(DMA2_ADDR + 0x14 + 0x18 *2);
 800144a:	4b1a      	ldr	r3, [pc, #104]	@ (80014b4 <dma2_UART1_rx_Init+0xa0>)
 800144c:	60fb      	str	r3, [r7, #12]
	*DMA_S2NDTR = 7;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]

	//enable DMA2, stream 2, channel 4
	uint32_t* DMA_S2CR = (uint32_t*)(DMA2_ADDR + 0x10 + 0x18 *2);
 8001454:	4b18      	ldr	r3, [pc, #96]	@ (80014b8 <dma2_UART1_rx_Init+0xa4>)
 8001456:	60bb      	str	r3, [r7, #8]
	*DMA_S2CR &= ~(0b111 << 25);
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (0b100 << 25);  //select channel 4 for stream 2
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 10);		//MEMORY increment mode
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 8);
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 0); //enable stream 2
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f043 0201 	orr.w	r2, r3, #1
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	601a      	str	r2, [r3, #0]


}
 8001494:	bf00      	nop
 8001496:	371c      	adds	r7, #28
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40023800 	.word	0x40023800
 80014a4:	4002644c 	.word	0x4002644c
 80014a8:	200009f4 	.word	0x200009f4
 80014ac:	40026448 	.word	0x40026448
 80014b0:	40011004 	.word	0x40011004
 80014b4:	40026444 	.word	0x40026444
 80014b8:	40026440 	.word	0x40026440

080014bc <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(){
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
	__asm("NOP");
 80014c2:	bf00      	nop
	//clear the interrupt flag -> transfer complete interrupt (different to USART1, need to clear flag)
	uint32_t* DMA_HIFCR = (uint32_t*)(DMA2_ADDR + 0x0C);
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <DMA2_Stream2_IRQHandler+0x64>)
 80014c6:	607b      	str	r3, [r7, #4]
	*DMA_HIFCR |= (1 << 11); //bit 11
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	601a      	str	r2, [r3, #0]
	if(strstr(recei_data, "LED ON ") != NULL)
 80014d4:	4913      	ldr	r1, [pc, #76]	@ (8001524 <DMA2_Stream2_IRQHandler+0x68>)
 80014d6:	4814      	ldr	r0, [pc, #80]	@ (8001528 <DMA2_Stream2_IRQHandler+0x6c>)
 80014d8:	f001 f8ef 	bl	80026ba <strstr>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d009      	beq.n	80014f6 <DMA2_Stream2_IRQHandler+0x3a>
	{
		LEDblink(1, LED3_pin);
 80014e2:	210d      	movs	r1, #13
 80014e4:	2001      	movs	r0, #1
 80014e6:	f7ff fd57 	bl	8000f98 <LEDblink>
		memset(recei_data, 0, 7);
 80014ea:	2207      	movs	r2, #7
 80014ec:	2100      	movs	r1, #0
 80014ee:	480e      	ldr	r0, [pc, #56]	@ (8001528 <DMA2_Stream2_IRQHandler+0x6c>)
 80014f0:	f001 f8db 	bl	80026aa <memset>
		LEDblink(0, LED3_pin);
		memset(recei_data, 0, 7);
	}


}
 80014f4:	e00f      	b.n	8001516 <DMA2_Stream2_IRQHandler+0x5a>
	else if(strstr(recei_data, "LED OFF") != NULL)
 80014f6:	490d      	ldr	r1, [pc, #52]	@ (800152c <DMA2_Stream2_IRQHandler+0x70>)
 80014f8:	480b      	ldr	r0, [pc, #44]	@ (8001528 <DMA2_Stream2_IRQHandler+0x6c>)
 80014fa:	f001 f8de 	bl	80026ba <strstr>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <DMA2_Stream2_IRQHandler+0x5a>
		LEDblink(0, LED3_pin);
 8001504:	210d      	movs	r1, #13
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fd46 	bl	8000f98 <LEDblink>
		memset(recei_data, 0, 7);
 800150c:	2207      	movs	r2, #7
 800150e:	2100      	movs	r1, #0
 8001510:	4805      	ldr	r0, [pc, #20]	@ (8001528 <DMA2_Stream2_IRQHandler+0x6c>)
 8001512:	f001 f8ca 	bl	80026aa <memset>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	4002640c 	.word	0x4002640c
 8001524:	08004898 	.word	0x08004898
 8001528:	200009f4 	.word	0x200009f4
 800152c:	08004890 	.word	0x08004890

08001530 <function>:
//		LEDblink(0, LED5_pin);
//	}
//	*EXTI_PR |= (1<<0);
//}

void function(){
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	if(buttonState() == 1){
 8001534:	f7ff fc60 	bl	8000df8 <buttonState>
 8001538:	4603      	mov	r3, r0
 800153a:	2b01      	cmp	r3, #1
 800153c:	d104      	bne.n	8001548 <function+0x18>
			LEDblink(1, LED6_pin);
 800153e:	210f      	movs	r1, #15
 8001540:	2001      	movs	r0, #1
 8001542:	f7ff fd29 	bl	8000f98 <LEDblink>
 8001546:	e003      	b.n	8001550 <function+0x20>
		} else{
			LEDblink(0, LED6_pin);
 8001548:	210f      	movs	r1, #15
 800154a:	2000      	movs	r0, #0
 800154c:	f7ff fd24 	bl	8000f98 <LEDblink>
		}
	*EXTI_PR |= (1<<0);
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <function+0x30>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a02      	ldr	r2, [pc, #8]	@ (8001560 <function+0x30>)
 8001556:	f043 0301 	orr.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40013c14 	.word	0x40013c14

08001564 <main>:
//	idx = 0;
//}

//ADC_temp
float temp;
int main(){
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
	LEDinit();
 8001568:	f7ff fcca 	bl	8000f00 <LEDinit>
	HAL_Init();
 800156c:	f000 f992 	bl	8001894 <HAL_Init>
	buttoninit();
 8001570:	f7ff fc20 	bl	8000db4 <buttoninit>
	EXTI_Init(function);
 8001574:	4817      	ldr	r0, [pc, #92]	@ (80015d4 <main+0x70>)
 8001576:	f7ff fc51 	bl	8000e1c <EXTI_Init>
	UART1_Init();
 800157a:	f7ff fe25 	bl	80011c8 <UART1_Init>
	SPI_Init();
 800157e:	f7ff fd29 	bl	8000fd4 <SPI_Init>
	Timer_init();
 8001582:	f7ff fdd1 	bl	8001128 <Timer_init>
	dma2_UART1_rx_Init();
 8001586:	f7ff ff45 	bl	8001414 <dma2_UART1_rx_Init>
	ADC1_Init();
 800158a:	f7ff fb65 	bl	8000c58 <ADC1_Init>

	//ADC1_temp
	while(1){
		LEDblink(1, LED4_pin);
 800158e:	210c      	movs	r1, #12
 8001590:	2001      	movs	r0, #1
 8001592:	f7ff fd01 	bl	8000f98 <LEDblink>
		HAL_Delay(500);
 8001596:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800159a:	f000 f9ed 	bl	8001978 <HAL_Delay>
		LEDblink(0, LED4_pin);
 800159e:	210c      	movs	r1, #12
 80015a0:	2000      	movs	r0, #0
 80015a2:	f7ff fcf9 	bl	8000f98 <LEDblink>
		HAL_Delay(500);
 80015a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80015aa:	f000 f9e5 	bl	8001978 <HAL_Delay>
		temp = ADC1_temp_meas_sens();
 80015ae:	f7ff fb8b 	bl	8000cc8 <ADC1_temp_meas_sens>
 80015b2:	eef0 7a40 	vmov.f32	s15, s0
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <main+0x74>)
 80015b8:	edc3 7a00 	vstr	s15, [r3]
		UART_trans_float(temp);
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <main+0x74>)
 80015be:	edd3 7a00 	vldr	s15, [r3]
 80015c2:	eeb0 0a67 	vmov.f32	s0, s15
 80015c6:	f7ff fec1 	bl	800134c <UART_trans_float>
		UART1_Trans_String("\r\n");
 80015ca:	4804      	ldr	r0, [pc, #16]	@ (80015dc <main+0x78>)
 80015cc:	f7ff fe9e 	bl	800130c <UART1_Trans_String>
		LEDblink(1, LED4_pin);
 80015d0:	bf00      	nop
 80015d2:	e7dc      	b.n	800158e <main+0x2a>
 80015d4:	08001531 	.word	0x08001531
 80015d8:	20000a18 	.word	0x20000a18
 80015dc:	080048a0 	.word	0x080048a0

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	4b10      	ldr	r3, [pc, #64]	@ (800162c <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	4a0f      	ldr	r2, [pc, #60]	@ (800162c <HAL_MspInit+0x4c>)
 80015f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015f6:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <HAL_MspInit+0x4c>)
 80015f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015fe:	607b      	str	r3, [r7, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	603b      	str	r3, [r7, #0]
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_MspInit+0x4c>)
 800160c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001610:	6413      	str	r3, [r2, #64]	@ 0x40
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_MspInit+0x4c>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161a:	603b      	str	r3, [r7, #0]
 800161c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40023800 	.word	0x40023800

08001630 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <NMI_Handler+0x4>

08001638 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <HardFault_Handler+0x4>

08001640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <MemManage_Handler+0x4>

08001648 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <UsageFault_Handler+0x4>

08001658 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800166a:	bf00      	nop
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001686:	f000 f957 	bl	8001938 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}

0800168e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <_kill>:

int _kill(int pid, int sig)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016a8:	f001 f868 	bl	800277c <__errno>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2216      	movs	r2, #22
 80016b0:	601a      	str	r2, [r3, #0]
  return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <_exit>:

void _exit (int status)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016c6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f7ff ffe7 	bl	800169e <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <_exit+0x12>

080016d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	60f8      	str	r0, [r7, #12]
 80016dc:	60b9      	str	r1, [r7, #8]
 80016de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e00a      	b.n	80016fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016e6:	f3af 8000 	nop.w
 80016ea:	4601      	mov	r1, r0
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	60ba      	str	r2, [r7, #8]
 80016f2:	b2ca      	uxtb	r2, r1
 80016f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	3301      	adds	r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	429a      	cmp	r2, r3
 8001702:	dbf0      	blt.n	80016e6 <_read+0x12>
  }

  return len;
 8001704:	687b      	ldr	r3, [r7, #4]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b086      	sub	sp, #24
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	2300      	movs	r3, #0
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	e009      	b.n	8001734 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf1      	blt.n	8001720 <_write+0x12>
  }
  return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800176e:	605a      	str	r2, [r3, #4]
  return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b8:	4a14      	ldr	r2, [pc, #80]	@ (800180c <_sbrk+0x5c>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <_sbrk+0x60>)
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d102      	bne.n	80017d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017cc:	4b11      	ldr	r3, [pc, #68]	@ (8001814 <_sbrk+0x64>)
 80017ce:	4a12      	ldr	r2, [pc, #72]	@ (8001818 <_sbrk+0x68>)
 80017d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017d2:	4b10      	ldr	r3, [pc, #64]	@ (8001814 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	429a      	cmp	r2, r3
 80017de:	d207      	bcs.n	80017f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017e0:	f000 ffcc 	bl	800277c <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	220c      	movs	r2, #12
 80017e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295
 80017ee:	e009      	b.n	8001804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017f0:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <_sbrk+0x64>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	4a05      	ldr	r2, [pc, #20]	@ (8001814 <_sbrk+0x64>)
 8001800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001802:	68fb      	ldr	r3, [r7, #12]
}
 8001804:	4618      	mov	r0, r3
 8001806:	3718      	adds	r7, #24
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20020000 	.word	0x20020000
 8001810:	00000400 	.word	0x00000400
 8001814:	20000a1c 	.word	0x20000a1c
 8001818:	20000b70 	.word	0x20000b70

0800181c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001820:	4b06      	ldr	r3, [pc, #24]	@ (800183c <SystemInit+0x20>)
 8001822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <SystemInit+0x20>)
 8001828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800182c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001840:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001878 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001844:	f7ff ffea 	bl	800181c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001848:	480c      	ldr	r0, [pc, #48]	@ (800187c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800184a:	490d      	ldr	r1, [pc, #52]	@ (8001880 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800184c:	4a0d      	ldr	r2, [pc, #52]	@ (8001884 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001850:	e002      	b.n	8001858 <LoopCopyDataInit>

08001852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001856:	3304      	adds	r3, #4

08001858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800185a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800185c:	d3f9      	bcc.n	8001852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185e:	4a0a      	ldr	r2, [pc, #40]	@ (8001888 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001860:	4c0a      	ldr	r4, [pc, #40]	@ (800188c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001864:	e001      	b.n	800186a <LoopFillZerobss>

08001866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001868:	3204      	adds	r2, #4

0800186a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800186a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800186c:	d3fb      	bcc.n	8001866 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186e:	f000 ff8b 	bl	8002788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001872:	f7ff fe77 	bl	8001564 <main>
  bx  lr    
 8001876:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001878:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800187c:	20000800 	.word	0x20000800
  ldr r1, =_edata
 8001880:	200009d4 	.word	0x200009d4
  ldr r2, =_sidata
 8001884:	08004c24 	.word	0x08004c24
  ldr r2, =_sbss
 8001888:	200009d4 	.word	0x200009d4
  ldr r4, =_ebss
 800188c:	20000b70 	.word	0x20000b70

08001890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001890:	e7fe      	b.n	8001890 <ADC_IRQHandler>
	...

08001894 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001898:	4b0e      	ldr	r3, [pc, #56]	@ (80018d4 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0d      	ldr	r2, [pc, #52]	@ (80018d4 <HAL_Init+0x40>)
 800189e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0a      	ldr	r2, [pc, #40]	@ (80018d4 <HAL_Init+0x40>)
 80018aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018b0:	4b08      	ldr	r3, [pc, #32]	@ (80018d4 <HAL_Init+0x40>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a07      	ldr	r2, [pc, #28]	@ (80018d4 <HAL_Init+0x40>)
 80018b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018bc:	2003      	movs	r0, #3
 80018be:	f000 f931 	bl	8001b24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018c2:	200f      	movs	r0, #15
 80018c4:	f000 f808 	bl	80018d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c8:	f7ff fe8a 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40023c00 	.word	0x40023c00

080018d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018e0:	4b12      	ldr	r3, [pc, #72]	@ (800192c <HAL_InitTick+0x54>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_InitTick+0x58>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	4619      	mov	r1, r3
 80018ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80018f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f6:	4618      	mov	r0, r3
 80018f8:	f000 f93b 	bl	8001b72 <HAL_SYSTICK_Config>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e00e      	b.n	8001924 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2b0f      	cmp	r3, #15
 800190a:	d80a      	bhi.n	8001922 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800190c:	2200      	movs	r2, #0
 800190e:	6879      	ldr	r1, [r7, #4]
 8001910:	f04f 30ff 	mov.w	r0, #4294967295
 8001914:	f000 f911 	bl	8001b3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001918:	4a06      	ldr	r2, [pc, #24]	@ (8001934 <HAL_InitTick+0x5c>)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800191e:	2300      	movs	r3, #0
 8001920:	e000      	b.n	8001924 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20000800 	.word	0x20000800
 8001930:	20000808 	.word	0x20000808
 8001934:	20000804 	.word	0x20000804

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000808 	.word	0x20000808
 800195c:	20000a20 	.word	0x20000a20

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	20000a20 	.word	0x20000a20

08001978 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff ffee 	bl	8001960 <HAL_GetTick>
 8001984:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001990:	d005      	beq.n	800199e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001992:	4b0a      	ldr	r3, [pc, #40]	@ (80019bc <HAL_Delay+0x44>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4413      	add	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800199e:	bf00      	nop
 80019a0:	f7ff ffde 	bl	8001960 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d8f7      	bhi.n	80019a0 <HAL_Delay+0x28>
  {
  }
}
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000808 	.word	0x20000808

080019c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019dc:	4013      	ands	r3, r2
 80019de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019f2:	4a04      	ldr	r2, [pc, #16]	@ (8001a04 <__NVIC_SetPriorityGrouping+0x44>)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	3714      	adds	r7, #20
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a0c:	4b04      	ldr	r3, [pc, #16]	@ (8001a20 <__NVIC_GetPriorityGrouping+0x18>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	0a1b      	lsrs	r3, r3, #8
 8001a12:	f003 0307 	and.w	r3, r3, #7
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000ed00 	.word	0xe000ed00

08001a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	6039      	str	r1, [r7, #0]
 8001a2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	db0a      	blt.n	8001a4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	490c      	ldr	r1, [pc, #48]	@ (8001a70 <__NVIC_SetPriority+0x4c>)
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	0112      	lsls	r2, r2, #4
 8001a44:	b2d2      	uxtb	r2, r2
 8001a46:	440b      	add	r3, r1
 8001a48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a4c:	e00a      	b.n	8001a64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4908      	ldr	r1, [pc, #32]	@ (8001a74 <__NVIC_SetPriority+0x50>)
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	3b04      	subs	r3, #4
 8001a5c:	0112      	lsls	r2, r2, #4
 8001a5e:	b2d2      	uxtb	r2, r2
 8001a60:	440b      	add	r3, r1
 8001a62:	761a      	strb	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000e100 	.word	0xe000e100
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b089      	sub	sp, #36	@ 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	60f8      	str	r0, [r7, #12]
 8001a80:	60b9      	str	r1, [r7, #8]
 8001a82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 0307 	and.w	r3, r3, #7
 8001a8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f1c3 0307 	rsb	r3, r3, #7
 8001a92:	2b04      	cmp	r3, #4
 8001a94:	bf28      	it	cs
 8001a96:	2304      	movcs	r3, #4
 8001a98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	2b06      	cmp	r3, #6
 8001aa0:	d902      	bls.n	8001aa8 <NVIC_EncodePriority+0x30>
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	3b03      	subs	r3, #3
 8001aa6:	e000      	b.n	8001aaa <NVIC_EncodePriority+0x32>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	401a      	ands	r2, r3
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aca:	43d9      	mvns	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	4313      	orrs	r3, r2
         );
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3724      	adds	r7, #36	@ 0x24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af0:	d301      	bcc.n	8001af6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00f      	b.n	8001b16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b20 <SysTick_Config+0x40>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afe:	210f      	movs	r1, #15
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f7ff ff8e 	bl	8001a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <SysTick_Config+0x40>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	@ (8001b20 <SysTick_Config+0x40>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff47 	bl	80019c0 <__NVIC_SetPriorityGrouping>
}
 8001b32:	bf00      	nop
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b086      	sub	sp, #24
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	4603      	mov	r3, r0
 8001b42:	60b9      	str	r1, [r7, #8]
 8001b44:	607a      	str	r2, [r7, #4]
 8001b46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4c:	f7ff ff5c 	bl	8001a08 <__NVIC_GetPriorityGrouping>
 8001b50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	68b9      	ldr	r1, [r7, #8]
 8001b56:	6978      	ldr	r0, [r7, #20]
 8001b58:	f7ff ff8e 	bl	8001a78 <NVIC_EncodePriority>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b62:	4611      	mov	r1, r2
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff ff5d 	bl	8001a24 <__NVIC_SetPriority>
}
 8001b6a:	bf00      	nop
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ffb0 	bl	8001ae0 <SysTick_Config>
 8001b80:	4603      	mov	r3, r0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <__cvt>:
 8001b8a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001b8e:	ec57 6b10 	vmov	r6, r7, d0
 8001b92:	2f00      	cmp	r7, #0
 8001b94:	460c      	mov	r4, r1
 8001b96:	4619      	mov	r1, r3
 8001b98:	463b      	mov	r3, r7
 8001b9a:	bfbb      	ittet	lt
 8001b9c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8001ba0:	461f      	movlt	r7, r3
 8001ba2:	2300      	movge	r3, #0
 8001ba4:	232d      	movlt	r3, #45	@ 0x2d
 8001ba6:	700b      	strb	r3, [r1, #0]
 8001ba8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001baa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8001bae:	4691      	mov	r9, r2
 8001bb0:	f023 0820 	bic.w	r8, r3, #32
 8001bb4:	bfbc      	itt	lt
 8001bb6:	4632      	movlt	r2, r6
 8001bb8:	4616      	movlt	r6, r2
 8001bba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001bbe:	d005      	beq.n	8001bcc <__cvt+0x42>
 8001bc0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8001bc4:	d100      	bne.n	8001bc8 <__cvt+0x3e>
 8001bc6:	3401      	adds	r4, #1
 8001bc8:	2102      	movs	r1, #2
 8001bca:	e000      	b.n	8001bce <__cvt+0x44>
 8001bcc:	2103      	movs	r1, #3
 8001bce:	ab03      	add	r3, sp, #12
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	ab02      	add	r3, sp, #8
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	ec47 6b10 	vmov	d0, r6, r7
 8001bda:	4653      	mov	r3, sl
 8001bdc:	4622      	mov	r2, r4
 8001bde:	f000 fe83 	bl	80028e8 <_dtoa_r>
 8001be2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8001be6:	4605      	mov	r5, r0
 8001be8:	d119      	bne.n	8001c1e <__cvt+0x94>
 8001bea:	f019 0f01 	tst.w	r9, #1
 8001bee:	d00e      	beq.n	8001c0e <__cvt+0x84>
 8001bf0:	eb00 0904 	add.w	r9, r0, r4
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4630      	mov	r0, r6
 8001bfa:	4639      	mov	r1, r7
 8001bfc:	f7fe ff6c 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c00:	b108      	cbz	r0, 8001c06 <__cvt+0x7c>
 8001c02:	f8cd 900c 	str.w	r9, [sp, #12]
 8001c06:	2230      	movs	r2, #48	@ 0x30
 8001c08:	9b03      	ldr	r3, [sp, #12]
 8001c0a:	454b      	cmp	r3, r9
 8001c0c:	d31e      	bcc.n	8001c4c <__cvt+0xc2>
 8001c0e:	9b03      	ldr	r3, [sp, #12]
 8001c10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001c12:	1b5b      	subs	r3, r3, r5
 8001c14:	4628      	mov	r0, r5
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	b004      	add	sp, #16
 8001c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c1e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8001c22:	eb00 0904 	add.w	r9, r0, r4
 8001c26:	d1e5      	bne.n	8001bf4 <__cvt+0x6a>
 8001c28:	7803      	ldrb	r3, [r0, #0]
 8001c2a:	2b30      	cmp	r3, #48	@ 0x30
 8001c2c:	d10a      	bne.n	8001c44 <__cvt+0xba>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2300      	movs	r3, #0
 8001c32:	4630      	mov	r0, r6
 8001c34:	4639      	mov	r1, r7
 8001c36:	f7fe ff4f 	bl	8000ad8 <__aeabi_dcmpeq>
 8001c3a:	b918      	cbnz	r0, 8001c44 <__cvt+0xba>
 8001c3c:	f1c4 0401 	rsb	r4, r4, #1
 8001c40:	f8ca 4000 	str.w	r4, [sl]
 8001c44:	f8da 3000 	ldr.w	r3, [sl]
 8001c48:	4499      	add	r9, r3
 8001c4a:	e7d3      	b.n	8001bf4 <__cvt+0x6a>
 8001c4c:	1c59      	adds	r1, r3, #1
 8001c4e:	9103      	str	r1, [sp, #12]
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e7d9      	b.n	8001c08 <__cvt+0x7e>

08001c54 <__exponent>:
 8001c54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c56:	2900      	cmp	r1, #0
 8001c58:	bfba      	itte	lt
 8001c5a:	4249      	neglt	r1, r1
 8001c5c:	232d      	movlt	r3, #45	@ 0x2d
 8001c5e:	232b      	movge	r3, #43	@ 0x2b
 8001c60:	2909      	cmp	r1, #9
 8001c62:	7002      	strb	r2, [r0, #0]
 8001c64:	7043      	strb	r3, [r0, #1]
 8001c66:	dd29      	ble.n	8001cbc <__exponent+0x68>
 8001c68:	f10d 0307 	add.w	r3, sp, #7
 8001c6c:	461d      	mov	r5, r3
 8001c6e:	270a      	movs	r7, #10
 8001c70:	461a      	mov	r2, r3
 8001c72:	fbb1 f6f7 	udiv	r6, r1, r7
 8001c76:	fb07 1416 	mls	r4, r7, r6, r1
 8001c7a:	3430      	adds	r4, #48	@ 0x30
 8001c7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8001c80:	460c      	mov	r4, r1
 8001c82:	2c63      	cmp	r4, #99	@ 0x63
 8001c84:	f103 33ff 	add.w	r3, r3, #4294967295
 8001c88:	4631      	mov	r1, r6
 8001c8a:	dcf1      	bgt.n	8001c70 <__exponent+0x1c>
 8001c8c:	3130      	adds	r1, #48	@ 0x30
 8001c8e:	1e94      	subs	r4, r2, #2
 8001c90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8001c94:	1c41      	adds	r1, r0, #1
 8001c96:	4623      	mov	r3, r4
 8001c98:	42ab      	cmp	r3, r5
 8001c9a:	d30a      	bcc.n	8001cb2 <__exponent+0x5e>
 8001c9c:	f10d 0309 	add.w	r3, sp, #9
 8001ca0:	1a9b      	subs	r3, r3, r2
 8001ca2:	42ac      	cmp	r4, r5
 8001ca4:	bf88      	it	hi
 8001ca6:	2300      	movhi	r3, #0
 8001ca8:	3302      	adds	r3, #2
 8001caa:	4403      	add	r3, r0
 8001cac:	1a18      	subs	r0, r3, r0
 8001cae:	b003      	add	sp, #12
 8001cb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cb2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8001cb6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8001cba:	e7ed      	b.n	8001c98 <__exponent+0x44>
 8001cbc:	2330      	movs	r3, #48	@ 0x30
 8001cbe:	3130      	adds	r1, #48	@ 0x30
 8001cc0:	7083      	strb	r3, [r0, #2]
 8001cc2:	70c1      	strb	r1, [r0, #3]
 8001cc4:	1d03      	adds	r3, r0, #4
 8001cc6:	e7f1      	b.n	8001cac <__exponent+0x58>

08001cc8 <_printf_float>:
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	b08d      	sub	sp, #52	@ 0x34
 8001cce:	460c      	mov	r4, r1
 8001cd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8001cd4:	4616      	mov	r6, r2
 8001cd6:	461f      	mov	r7, r3
 8001cd8:	4605      	mov	r5, r0
 8001cda:	f000 fd05 	bl	80026e8 <_localeconv_r>
 8001cde:	6803      	ldr	r3, [r0, #0]
 8001ce0:	9304      	str	r3, [sp, #16]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7fe facc 	bl	8000280 <strlen>
 8001ce8:	2300      	movs	r3, #0
 8001cea:	930a      	str	r3, [sp, #40]	@ 0x28
 8001cec:	f8d8 3000 	ldr.w	r3, [r8]
 8001cf0:	9005      	str	r0, [sp, #20]
 8001cf2:	3307      	adds	r3, #7
 8001cf4:	f023 0307 	bic.w	r3, r3, #7
 8001cf8:	f103 0208 	add.w	r2, r3, #8
 8001cfc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001d00:	f8d4 b000 	ldr.w	fp, [r4]
 8001d04:	f8c8 2000 	str.w	r2, [r8]
 8001d08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001d0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8001d10:	9307      	str	r3, [sp, #28]
 8001d12:	f8cd 8018 	str.w	r8, [sp, #24]
 8001d16:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8001d1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8001f90 <_printf_float+0x2c8>)
 8001d20:	f04f 32ff 	mov.w	r2, #4294967295
 8001d24:	f7fe ff0a 	bl	8000b3c <__aeabi_dcmpun>
 8001d28:	bb70      	cbnz	r0, 8001d88 <_printf_float+0xc0>
 8001d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8001d2e:	4b98      	ldr	r3, [pc, #608]	@ (8001f90 <_printf_float+0x2c8>)
 8001d30:	f04f 32ff 	mov.w	r2, #4294967295
 8001d34:	f7fe fee4 	bl	8000b00 <__aeabi_dcmple>
 8001d38:	bb30      	cbnz	r0, 8001d88 <_printf_float+0xc0>
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	4640      	mov	r0, r8
 8001d40:	4649      	mov	r1, r9
 8001d42:	f7fe fed3 	bl	8000aec <__aeabi_dcmplt>
 8001d46:	b110      	cbz	r0, 8001d4e <_printf_float+0x86>
 8001d48:	232d      	movs	r3, #45	@ 0x2d
 8001d4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d4e:	4a91      	ldr	r2, [pc, #580]	@ (8001f94 <_printf_float+0x2cc>)
 8001d50:	4b91      	ldr	r3, [pc, #580]	@ (8001f98 <_printf_float+0x2d0>)
 8001d52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8001d56:	bf8c      	ite	hi
 8001d58:	4690      	movhi	r8, r2
 8001d5a:	4698      	movls	r8, r3
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	6123      	str	r3, [r4, #16]
 8001d60:	f02b 0304 	bic.w	r3, fp, #4
 8001d64:	6023      	str	r3, [r4, #0]
 8001d66:	f04f 0900 	mov.w	r9, #0
 8001d6a:	9700      	str	r7, [sp, #0]
 8001d6c:	4633      	mov	r3, r6
 8001d6e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8001d70:	4621      	mov	r1, r4
 8001d72:	4628      	mov	r0, r5
 8001d74:	f000 f9d2 	bl	800211c <_printf_common>
 8001d78:	3001      	adds	r0, #1
 8001d7a:	f040 808d 	bne.w	8001e98 <_printf_float+0x1d0>
 8001d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8001d82:	b00d      	add	sp, #52	@ 0x34
 8001d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d88:	4642      	mov	r2, r8
 8001d8a:	464b      	mov	r3, r9
 8001d8c:	4640      	mov	r0, r8
 8001d8e:	4649      	mov	r1, r9
 8001d90:	f7fe fed4 	bl	8000b3c <__aeabi_dcmpun>
 8001d94:	b140      	cbz	r0, 8001da8 <_printf_float+0xe0>
 8001d96:	464b      	mov	r3, r9
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bfbc      	itt	lt
 8001d9c:	232d      	movlt	r3, #45	@ 0x2d
 8001d9e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8001da2:	4a7e      	ldr	r2, [pc, #504]	@ (8001f9c <_printf_float+0x2d4>)
 8001da4:	4b7e      	ldr	r3, [pc, #504]	@ (8001fa0 <_printf_float+0x2d8>)
 8001da6:	e7d4      	b.n	8001d52 <_printf_float+0x8a>
 8001da8:	6863      	ldr	r3, [r4, #4]
 8001daa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8001dae:	9206      	str	r2, [sp, #24]
 8001db0:	1c5a      	adds	r2, r3, #1
 8001db2:	d13b      	bne.n	8001e2c <_printf_float+0x164>
 8001db4:	2306      	movs	r3, #6
 8001db6:	6063      	str	r3, [r4, #4]
 8001db8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	6022      	str	r2, [r4, #0]
 8001dc0:	9303      	str	r3, [sp, #12]
 8001dc2:	ab0a      	add	r3, sp, #40	@ 0x28
 8001dc4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8001dc8:	ab09      	add	r3, sp, #36	@ 0x24
 8001dca:	9300      	str	r3, [sp, #0]
 8001dcc:	6861      	ldr	r1, [r4, #4]
 8001dce:	ec49 8b10 	vmov	d0, r8, r9
 8001dd2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f7ff fed7 	bl	8001b8a <__cvt>
 8001ddc:	9b06      	ldr	r3, [sp, #24]
 8001dde:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001de0:	2b47      	cmp	r3, #71	@ 0x47
 8001de2:	4680      	mov	r8, r0
 8001de4:	d129      	bne.n	8001e3a <_printf_float+0x172>
 8001de6:	1cc8      	adds	r0, r1, #3
 8001de8:	db02      	blt.n	8001df0 <_printf_float+0x128>
 8001dea:	6863      	ldr	r3, [r4, #4]
 8001dec:	4299      	cmp	r1, r3
 8001dee:	dd41      	ble.n	8001e74 <_printf_float+0x1ac>
 8001df0:	f1aa 0a02 	sub.w	sl, sl, #2
 8001df4:	fa5f fa8a 	uxtb.w	sl, sl
 8001df8:	3901      	subs	r1, #1
 8001dfa:	4652      	mov	r2, sl
 8001dfc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8001e00:	9109      	str	r1, [sp, #36]	@ 0x24
 8001e02:	f7ff ff27 	bl	8001c54 <__exponent>
 8001e06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001e08:	1813      	adds	r3, r2, r0
 8001e0a:	2a01      	cmp	r2, #1
 8001e0c:	4681      	mov	r9, r0
 8001e0e:	6123      	str	r3, [r4, #16]
 8001e10:	dc02      	bgt.n	8001e18 <_printf_float+0x150>
 8001e12:	6822      	ldr	r2, [r4, #0]
 8001e14:	07d2      	lsls	r2, r2, #31
 8001e16:	d501      	bpl.n	8001e1c <_printf_float+0x154>
 8001e18:	3301      	adds	r3, #1
 8001e1a:	6123      	str	r3, [r4, #16]
 8001e1c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0a2      	beq.n	8001d6a <_printf_float+0xa2>
 8001e24:	232d      	movs	r3, #45	@ 0x2d
 8001e26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e2a:	e79e      	b.n	8001d6a <_printf_float+0xa2>
 8001e2c:	9a06      	ldr	r2, [sp, #24]
 8001e2e:	2a47      	cmp	r2, #71	@ 0x47
 8001e30:	d1c2      	bne.n	8001db8 <_printf_float+0xf0>
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1c0      	bne.n	8001db8 <_printf_float+0xf0>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e7bd      	b.n	8001db6 <_printf_float+0xee>
 8001e3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001e3e:	d9db      	bls.n	8001df8 <_printf_float+0x130>
 8001e40:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8001e44:	d118      	bne.n	8001e78 <_printf_float+0x1b0>
 8001e46:	2900      	cmp	r1, #0
 8001e48:	6863      	ldr	r3, [r4, #4]
 8001e4a:	dd0b      	ble.n	8001e64 <_printf_float+0x19c>
 8001e4c:	6121      	str	r1, [r4, #16]
 8001e4e:	b913      	cbnz	r3, 8001e56 <_printf_float+0x18e>
 8001e50:	6822      	ldr	r2, [r4, #0]
 8001e52:	07d0      	lsls	r0, r2, #31
 8001e54:	d502      	bpl.n	8001e5c <_printf_float+0x194>
 8001e56:	3301      	adds	r3, #1
 8001e58:	440b      	add	r3, r1
 8001e5a:	6123      	str	r3, [r4, #16]
 8001e5c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8001e5e:	f04f 0900 	mov.w	r9, #0
 8001e62:	e7db      	b.n	8001e1c <_printf_float+0x154>
 8001e64:	b913      	cbnz	r3, 8001e6c <_printf_float+0x1a4>
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	07d2      	lsls	r2, r2, #31
 8001e6a:	d501      	bpl.n	8001e70 <_printf_float+0x1a8>
 8001e6c:	3302      	adds	r3, #2
 8001e6e:	e7f4      	b.n	8001e5a <_printf_float+0x192>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e7f2      	b.n	8001e5a <_printf_float+0x192>
 8001e74:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8001e78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001e7a:	4299      	cmp	r1, r3
 8001e7c:	db05      	blt.n	8001e8a <_printf_float+0x1c2>
 8001e7e:	6823      	ldr	r3, [r4, #0]
 8001e80:	6121      	str	r1, [r4, #16]
 8001e82:	07d8      	lsls	r0, r3, #31
 8001e84:	d5ea      	bpl.n	8001e5c <_printf_float+0x194>
 8001e86:	1c4b      	adds	r3, r1, #1
 8001e88:	e7e7      	b.n	8001e5a <_printf_float+0x192>
 8001e8a:	2900      	cmp	r1, #0
 8001e8c:	bfd4      	ite	le
 8001e8e:	f1c1 0202 	rsble	r2, r1, #2
 8001e92:	2201      	movgt	r2, #1
 8001e94:	4413      	add	r3, r2
 8001e96:	e7e0      	b.n	8001e5a <_printf_float+0x192>
 8001e98:	6823      	ldr	r3, [r4, #0]
 8001e9a:	055a      	lsls	r2, r3, #21
 8001e9c:	d407      	bmi.n	8001eae <_printf_float+0x1e6>
 8001e9e:	6923      	ldr	r3, [r4, #16]
 8001ea0:	4642      	mov	r2, r8
 8001ea2:	4631      	mov	r1, r6
 8001ea4:	4628      	mov	r0, r5
 8001ea6:	47b8      	blx	r7
 8001ea8:	3001      	adds	r0, #1
 8001eaa:	d12b      	bne.n	8001f04 <_printf_float+0x23c>
 8001eac:	e767      	b.n	8001d7e <_printf_float+0xb6>
 8001eae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8001eb2:	f240 80dd 	bls.w	8002070 <_printf_float+0x3a8>
 8001eb6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f7fe fe0b 	bl	8000ad8 <__aeabi_dcmpeq>
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d033      	beq.n	8001f2e <_printf_float+0x266>
 8001ec6:	4a37      	ldr	r2, [pc, #220]	@ (8001fa4 <_printf_float+0x2dc>)
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4631      	mov	r1, r6
 8001ecc:	4628      	mov	r0, r5
 8001ece:	47b8      	blx	r7
 8001ed0:	3001      	adds	r0, #1
 8001ed2:	f43f af54 	beq.w	8001d7e <_printf_float+0xb6>
 8001ed6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8001eda:	4543      	cmp	r3, r8
 8001edc:	db02      	blt.n	8001ee4 <_printf_float+0x21c>
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	07d8      	lsls	r0, r3, #31
 8001ee2:	d50f      	bpl.n	8001f04 <_printf_float+0x23c>
 8001ee4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001ee8:	4631      	mov	r1, r6
 8001eea:	4628      	mov	r0, r5
 8001eec:	47b8      	blx	r7
 8001eee:	3001      	adds	r0, #1
 8001ef0:	f43f af45 	beq.w	8001d7e <_printf_float+0xb6>
 8001ef4:	f04f 0900 	mov.w	r9, #0
 8001ef8:	f108 38ff 	add.w	r8, r8, #4294967295
 8001efc:	f104 0a1a 	add.w	sl, r4, #26
 8001f00:	45c8      	cmp	r8, r9
 8001f02:	dc09      	bgt.n	8001f18 <_printf_float+0x250>
 8001f04:	6823      	ldr	r3, [r4, #0]
 8001f06:	079b      	lsls	r3, r3, #30
 8001f08:	f100 8103 	bmi.w	8002112 <_printf_float+0x44a>
 8001f0c:	68e0      	ldr	r0, [r4, #12]
 8001f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001f10:	4298      	cmp	r0, r3
 8001f12:	bfb8      	it	lt
 8001f14:	4618      	movlt	r0, r3
 8001f16:	e734      	b.n	8001d82 <_printf_float+0xba>
 8001f18:	2301      	movs	r3, #1
 8001f1a:	4652      	mov	r2, sl
 8001f1c:	4631      	mov	r1, r6
 8001f1e:	4628      	mov	r0, r5
 8001f20:	47b8      	blx	r7
 8001f22:	3001      	adds	r0, #1
 8001f24:	f43f af2b 	beq.w	8001d7e <_printf_float+0xb6>
 8001f28:	f109 0901 	add.w	r9, r9, #1
 8001f2c:	e7e8      	b.n	8001f00 <_printf_float+0x238>
 8001f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	dc39      	bgt.n	8001fa8 <_printf_float+0x2e0>
 8001f34:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa4 <_printf_float+0x2dc>)
 8001f36:	2301      	movs	r3, #1
 8001f38:	4631      	mov	r1, r6
 8001f3a:	4628      	mov	r0, r5
 8001f3c:	47b8      	blx	r7
 8001f3e:	3001      	adds	r0, #1
 8001f40:	f43f af1d 	beq.w	8001d7e <_printf_float+0xb6>
 8001f44:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8001f48:	ea59 0303 	orrs.w	r3, r9, r3
 8001f4c:	d102      	bne.n	8001f54 <_printf_float+0x28c>
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	07d9      	lsls	r1, r3, #31
 8001f52:	d5d7      	bpl.n	8001f04 <_printf_float+0x23c>
 8001f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001f58:	4631      	mov	r1, r6
 8001f5a:	4628      	mov	r0, r5
 8001f5c:	47b8      	blx	r7
 8001f5e:	3001      	adds	r0, #1
 8001f60:	f43f af0d 	beq.w	8001d7e <_printf_float+0xb6>
 8001f64:	f04f 0a00 	mov.w	sl, #0
 8001f68:	f104 0b1a 	add.w	fp, r4, #26
 8001f6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001f6e:	425b      	negs	r3, r3
 8001f70:	4553      	cmp	r3, sl
 8001f72:	dc01      	bgt.n	8001f78 <_printf_float+0x2b0>
 8001f74:	464b      	mov	r3, r9
 8001f76:	e793      	b.n	8001ea0 <_printf_float+0x1d8>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	465a      	mov	r2, fp
 8001f7c:	4631      	mov	r1, r6
 8001f7e:	4628      	mov	r0, r5
 8001f80:	47b8      	blx	r7
 8001f82:	3001      	adds	r0, #1
 8001f84:	f43f aefb 	beq.w	8001d7e <_printf_float+0xb6>
 8001f88:	f10a 0a01 	add.w	sl, sl, #1
 8001f8c:	e7ee      	b.n	8001f6c <_printf_float+0x2a4>
 8001f8e:	bf00      	nop
 8001f90:	7fefffff 	.word	0x7fefffff
 8001f94:	080048a7 	.word	0x080048a7
 8001f98:	080048a3 	.word	0x080048a3
 8001f9c:	080048af 	.word	0x080048af
 8001fa0:	080048ab 	.word	0x080048ab
 8001fa4:	080048b3 	.word	0x080048b3
 8001fa8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001faa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8001fae:	4553      	cmp	r3, sl
 8001fb0:	bfa8      	it	ge
 8001fb2:	4653      	movge	r3, sl
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	4699      	mov	r9, r3
 8001fb8:	dc36      	bgt.n	8002028 <_printf_float+0x360>
 8001fba:	f04f 0b00 	mov.w	fp, #0
 8001fbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001fc2:	f104 021a 	add.w	r2, r4, #26
 8001fc6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001fc8:	9306      	str	r3, [sp, #24]
 8001fca:	eba3 0309 	sub.w	r3, r3, r9
 8001fce:	455b      	cmp	r3, fp
 8001fd0:	dc31      	bgt.n	8002036 <_printf_float+0x36e>
 8001fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fd4:	459a      	cmp	sl, r3
 8001fd6:	dc3a      	bgt.n	800204e <_printf_float+0x386>
 8001fd8:	6823      	ldr	r3, [r4, #0]
 8001fda:	07da      	lsls	r2, r3, #31
 8001fdc:	d437      	bmi.n	800204e <_printf_float+0x386>
 8001fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001fe0:	ebaa 0903 	sub.w	r9, sl, r3
 8001fe4:	9b06      	ldr	r3, [sp, #24]
 8001fe6:	ebaa 0303 	sub.w	r3, sl, r3
 8001fea:	4599      	cmp	r9, r3
 8001fec:	bfa8      	it	ge
 8001fee:	4699      	movge	r9, r3
 8001ff0:	f1b9 0f00 	cmp.w	r9, #0
 8001ff4:	dc33      	bgt.n	800205e <_printf_float+0x396>
 8001ff6:	f04f 0800 	mov.w	r8, #0
 8001ffa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001ffe:	f104 0b1a 	add.w	fp, r4, #26
 8002002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002004:	ebaa 0303 	sub.w	r3, sl, r3
 8002008:	eba3 0309 	sub.w	r3, r3, r9
 800200c:	4543      	cmp	r3, r8
 800200e:	f77f af79 	ble.w	8001f04 <_printf_float+0x23c>
 8002012:	2301      	movs	r3, #1
 8002014:	465a      	mov	r2, fp
 8002016:	4631      	mov	r1, r6
 8002018:	4628      	mov	r0, r5
 800201a:	47b8      	blx	r7
 800201c:	3001      	adds	r0, #1
 800201e:	f43f aeae 	beq.w	8001d7e <_printf_float+0xb6>
 8002022:	f108 0801 	add.w	r8, r8, #1
 8002026:	e7ec      	b.n	8002002 <_printf_float+0x33a>
 8002028:	4642      	mov	r2, r8
 800202a:	4631      	mov	r1, r6
 800202c:	4628      	mov	r0, r5
 800202e:	47b8      	blx	r7
 8002030:	3001      	adds	r0, #1
 8002032:	d1c2      	bne.n	8001fba <_printf_float+0x2f2>
 8002034:	e6a3      	b.n	8001d7e <_printf_float+0xb6>
 8002036:	2301      	movs	r3, #1
 8002038:	4631      	mov	r1, r6
 800203a:	4628      	mov	r0, r5
 800203c:	9206      	str	r2, [sp, #24]
 800203e:	47b8      	blx	r7
 8002040:	3001      	adds	r0, #1
 8002042:	f43f ae9c 	beq.w	8001d7e <_printf_float+0xb6>
 8002046:	9a06      	ldr	r2, [sp, #24]
 8002048:	f10b 0b01 	add.w	fp, fp, #1
 800204c:	e7bb      	b.n	8001fc6 <_printf_float+0x2fe>
 800204e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002052:	4631      	mov	r1, r6
 8002054:	4628      	mov	r0, r5
 8002056:	47b8      	blx	r7
 8002058:	3001      	adds	r0, #1
 800205a:	d1c0      	bne.n	8001fde <_printf_float+0x316>
 800205c:	e68f      	b.n	8001d7e <_printf_float+0xb6>
 800205e:	9a06      	ldr	r2, [sp, #24]
 8002060:	464b      	mov	r3, r9
 8002062:	4442      	add	r2, r8
 8002064:	4631      	mov	r1, r6
 8002066:	4628      	mov	r0, r5
 8002068:	47b8      	blx	r7
 800206a:	3001      	adds	r0, #1
 800206c:	d1c3      	bne.n	8001ff6 <_printf_float+0x32e>
 800206e:	e686      	b.n	8001d7e <_printf_float+0xb6>
 8002070:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8002074:	f1ba 0f01 	cmp.w	sl, #1
 8002078:	dc01      	bgt.n	800207e <_printf_float+0x3b6>
 800207a:	07db      	lsls	r3, r3, #31
 800207c:	d536      	bpl.n	80020ec <_printf_float+0x424>
 800207e:	2301      	movs	r3, #1
 8002080:	4642      	mov	r2, r8
 8002082:	4631      	mov	r1, r6
 8002084:	4628      	mov	r0, r5
 8002086:	47b8      	blx	r7
 8002088:	3001      	adds	r0, #1
 800208a:	f43f ae78 	beq.w	8001d7e <_printf_float+0xb6>
 800208e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002092:	4631      	mov	r1, r6
 8002094:	4628      	mov	r0, r5
 8002096:	47b8      	blx	r7
 8002098:	3001      	adds	r0, #1
 800209a:	f43f ae70 	beq.w	8001d7e <_printf_float+0xb6>
 800209e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80020a2:	2200      	movs	r2, #0
 80020a4:	2300      	movs	r3, #0
 80020a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80020aa:	f7fe fd15 	bl	8000ad8 <__aeabi_dcmpeq>
 80020ae:	b9c0      	cbnz	r0, 80020e2 <_printf_float+0x41a>
 80020b0:	4653      	mov	r3, sl
 80020b2:	f108 0201 	add.w	r2, r8, #1
 80020b6:	4631      	mov	r1, r6
 80020b8:	4628      	mov	r0, r5
 80020ba:	47b8      	blx	r7
 80020bc:	3001      	adds	r0, #1
 80020be:	d10c      	bne.n	80020da <_printf_float+0x412>
 80020c0:	e65d      	b.n	8001d7e <_printf_float+0xb6>
 80020c2:	2301      	movs	r3, #1
 80020c4:	465a      	mov	r2, fp
 80020c6:	4631      	mov	r1, r6
 80020c8:	4628      	mov	r0, r5
 80020ca:	47b8      	blx	r7
 80020cc:	3001      	adds	r0, #1
 80020ce:	f43f ae56 	beq.w	8001d7e <_printf_float+0xb6>
 80020d2:	f108 0801 	add.w	r8, r8, #1
 80020d6:	45d0      	cmp	r8, sl
 80020d8:	dbf3      	blt.n	80020c2 <_printf_float+0x3fa>
 80020da:	464b      	mov	r3, r9
 80020dc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80020e0:	e6df      	b.n	8001ea2 <_printf_float+0x1da>
 80020e2:	f04f 0800 	mov.w	r8, #0
 80020e6:	f104 0b1a 	add.w	fp, r4, #26
 80020ea:	e7f4      	b.n	80020d6 <_printf_float+0x40e>
 80020ec:	2301      	movs	r3, #1
 80020ee:	4642      	mov	r2, r8
 80020f0:	e7e1      	b.n	80020b6 <_printf_float+0x3ee>
 80020f2:	2301      	movs	r3, #1
 80020f4:	464a      	mov	r2, r9
 80020f6:	4631      	mov	r1, r6
 80020f8:	4628      	mov	r0, r5
 80020fa:	47b8      	blx	r7
 80020fc:	3001      	adds	r0, #1
 80020fe:	f43f ae3e 	beq.w	8001d7e <_printf_float+0xb6>
 8002102:	f108 0801 	add.w	r8, r8, #1
 8002106:	68e3      	ldr	r3, [r4, #12]
 8002108:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800210a:	1a5b      	subs	r3, r3, r1
 800210c:	4543      	cmp	r3, r8
 800210e:	dcf0      	bgt.n	80020f2 <_printf_float+0x42a>
 8002110:	e6fc      	b.n	8001f0c <_printf_float+0x244>
 8002112:	f04f 0800 	mov.w	r8, #0
 8002116:	f104 0919 	add.w	r9, r4, #25
 800211a:	e7f4      	b.n	8002106 <_printf_float+0x43e>

0800211c <_printf_common>:
 800211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002120:	4616      	mov	r6, r2
 8002122:	4698      	mov	r8, r3
 8002124:	688a      	ldr	r2, [r1, #8]
 8002126:	690b      	ldr	r3, [r1, #16]
 8002128:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800212c:	4293      	cmp	r3, r2
 800212e:	bfb8      	it	lt
 8002130:	4613      	movlt	r3, r2
 8002132:	6033      	str	r3, [r6, #0]
 8002134:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002138:	4607      	mov	r7, r0
 800213a:	460c      	mov	r4, r1
 800213c:	b10a      	cbz	r2, 8002142 <_printf_common+0x26>
 800213e:	3301      	adds	r3, #1
 8002140:	6033      	str	r3, [r6, #0]
 8002142:	6823      	ldr	r3, [r4, #0]
 8002144:	0699      	lsls	r1, r3, #26
 8002146:	bf42      	ittt	mi
 8002148:	6833      	ldrmi	r3, [r6, #0]
 800214a:	3302      	addmi	r3, #2
 800214c:	6033      	strmi	r3, [r6, #0]
 800214e:	6825      	ldr	r5, [r4, #0]
 8002150:	f015 0506 	ands.w	r5, r5, #6
 8002154:	d106      	bne.n	8002164 <_printf_common+0x48>
 8002156:	f104 0a19 	add.w	sl, r4, #25
 800215a:	68e3      	ldr	r3, [r4, #12]
 800215c:	6832      	ldr	r2, [r6, #0]
 800215e:	1a9b      	subs	r3, r3, r2
 8002160:	42ab      	cmp	r3, r5
 8002162:	dc26      	bgt.n	80021b2 <_printf_common+0x96>
 8002164:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002168:	6822      	ldr	r2, [r4, #0]
 800216a:	3b00      	subs	r3, #0
 800216c:	bf18      	it	ne
 800216e:	2301      	movne	r3, #1
 8002170:	0692      	lsls	r2, r2, #26
 8002172:	d42b      	bmi.n	80021cc <_printf_common+0xb0>
 8002174:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002178:	4641      	mov	r1, r8
 800217a:	4638      	mov	r0, r7
 800217c:	47c8      	blx	r9
 800217e:	3001      	adds	r0, #1
 8002180:	d01e      	beq.n	80021c0 <_printf_common+0xa4>
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	6922      	ldr	r2, [r4, #16]
 8002186:	f003 0306 	and.w	r3, r3, #6
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf02      	ittt	eq
 800218e:	68e5      	ldreq	r5, [r4, #12]
 8002190:	6833      	ldreq	r3, [r6, #0]
 8002192:	1aed      	subeq	r5, r5, r3
 8002194:	68a3      	ldr	r3, [r4, #8]
 8002196:	bf0c      	ite	eq
 8002198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800219c:	2500      	movne	r5, #0
 800219e:	4293      	cmp	r3, r2
 80021a0:	bfc4      	itt	gt
 80021a2:	1a9b      	subgt	r3, r3, r2
 80021a4:	18ed      	addgt	r5, r5, r3
 80021a6:	2600      	movs	r6, #0
 80021a8:	341a      	adds	r4, #26
 80021aa:	42b5      	cmp	r5, r6
 80021ac:	d11a      	bne.n	80021e4 <_printf_common+0xc8>
 80021ae:	2000      	movs	r0, #0
 80021b0:	e008      	b.n	80021c4 <_printf_common+0xa8>
 80021b2:	2301      	movs	r3, #1
 80021b4:	4652      	mov	r2, sl
 80021b6:	4641      	mov	r1, r8
 80021b8:	4638      	mov	r0, r7
 80021ba:	47c8      	blx	r9
 80021bc:	3001      	adds	r0, #1
 80021be:	d103      	bne.n	80021c8 <_printf_common+0xac>
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295
 80021c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021c8:	3501      	adds	r5, #1
 80021ca:	e7c6      	b.n	800215a <_printf_common+0x3e>
 80021cc:	18e1      	adds	r1, r4, r3
 80021ce:	1c5a      	adds	r2, r3, #1
 80021d0:	2030      	movs	r0, #48	@ 0x30
 80021d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021d6:	4422      	add	r2, r4
 80021d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021e0:	3302      	adds	r3, #2
 80021e2:	e7c7      	b.n	8002174 <_printf_common+0x58>
 80021e4:	2301      	movs	r3, #1
 80021e6:	4622      	mov	r2, r4
 80021e8:	4641      	mov	r1, r8
 80021ea:	4638      	mov	r0, r7
 80021ec:	47c8      	blx	r9
 80021ee:	3001      	adds	r0, #1
 80021f0:	d0e6      	beq.n	80021c0 <_printf_common+0xa4>
 80021f2:	3601      	adds	r6, #1
 80021f4:	e7d9      	b.n	80021aa <_printf_common+0x8e>
	...

080021f8 <_printf_i>:
 80021f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021fc:	7e0f      	ldrb	r7, [r1, #24]
 80021fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002200:	2f78      	cmp	r7, #120	@ 0x78
 8002202:	4691      	mov	r9, r2
 8002204:	4680      	mov	r8, r0
 8002206:	460c      	mov	r4, r1
 8002208:	469a      	mov	sl, r3
 800220a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800220e:	d807      	bhi.n	8002220 <_printf_i+0x28>
 8002210:	2f62      	cmp	r7, #98	@ 0x62
 8002212:	d80a      	bhi.n	800222a <_printf_i+0x32>
 8002214:	2f00      	cmp	r7, #0
 8002216:	f000 80d1 	beq.w	80023bc <_printf_i+0x1c4>
 800221a:	2f58      	cmp	r7, #88	@ 0x58
 800221c:	f000 80b8 	beq.w	8002390 <_printf_i+0x198>
 8002220:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002224:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002228:	e03a      	b.n	80022a0 <_printf_i+0xa8>
 800222a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800222e:	2b15      	cmp	r3, #21
 8002230:	d8f6      	bhi.n	8002220 <_printf_i+0x28>
 8002232:	a101      	add	r1, pc, #4	@ (adr r1, 8002238 <_printf_i+0x40>)
 8002234:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002238:	08002291 	.word	0x08002291
 800223c:	080022a5 	.word	0x080022a5
 8002240:	08002221 	.word	0x08002221
 8002244:	08002221 	.word	0x08002221
 8002248:	08002221 	.word	0x08002221
 800224c:	08002221 	.word	0x08002221
 8002250:	080022a5 	.word	0x080022a5
 8002254:	08002221 	.word	0x08002221
 8002258:	08002221 	.word	0x08002221
 800225c:	08002221 	.word	0x08002221
 8002260:	08002221 	.word	0x08002221
 8002264:	080023a3 	.word	0x080023a3
 8002268:	080022cf 	.word	0x080022cf
 800226c:	0800235d 	.word	0x0800235d
 8002270:	08002221 	.word	0x08002221
 8002274:	08002221 	.word	0x08002221
 8002278:	080023c5 	.word	0x080023c5
 800227c:	08002221 	.word	0x08002221
 8002280:	080022cf 	.word	0x080022cf
 8002284:	08002221 	.word	0x08002221
 8002288:	08002221 	.word	0x08002221
 800228c:	08002365 	.word	0x08002365
 8002290:	6833      	ldr	r3, [r6, #0]
 8002292:	1d1a      	adds	r2, r3, #4
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6032      	str	r2, [r6, #0]
 8002298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800229c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80022a0:	2301      	movs	r3, #1
 80022a2:	e09c      	b.n	80023de <_printf_i+0x1e6>
 80022a4:	6833      	ldr	r3, [r6, #0]
 80022a6:	6820      	ldr	r0, [r4, #0]
 80022a8:	1d19      	adds	r1, r3, #4
 80022aa:	6031      	str	r1, [r6, #0]
 80022ac:	0606      	lsls	r6, r0, #24
 80022ae:	d501      	bpl.n	80022b4 <_printf_i+0xbc>
 80022b0:	681d      	ldr	r5, [r3, #0]
 80022b2:	e003      	b.n	80022bc <_printf_i+0xc4>
 80022b4:	0645      	lsls	r5, r0, #25
 80022b6:	d5fb      	bpl.n	80022b0 <_printf_i+0xb8>
 80022b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022bc:	2d00      	cmp	r5, #0
 80022be:	da03      	bge.n	80022c8 <_printf_i+0xd0>
 80022c0:	232d      	movs	r3, #45	@ 0x2d
 80022c2:	426d      	negs	r5, r5
 80022c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80022c8:	4858      	ldr	r0, [pc, #352]	@ (800242c <_printf_i+0x234>)
 80022ca:	230a      	movs	r3, #10
 80022cc:	e011      	b.n	80022f2 <_printf_i+0xfa>
 80022ce:	6821      	ldr	r1, [r4, #0]
 80022d0:	6833      	ldr	r3, [r6, #0]
 80022d2:	0608      	lsls	r0, r1, #24
 80022d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80022d8:	d402      	bmi.n	80022e0 <_printf_i+0xe8>
 80022da:	0649      	lsls	r1, r1, #25
 80022dc:	bf48      	it	mi
 80022de:	b2ad      	uxthmi	r5, r5
 80022e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80022e2:	4852      	ldr	r0, [pc, #328]	@ (800242c <_printf_i+0x234>)
 80022e4:	6033      	str	r3, [r6, #0]
 80022e6:	bf14      	ite	ne
 80022e8:	230a      	movne	r3, #10
 80022ea:	2308      	moveq	r3, #8
 80022ec:	2100      	movs	r1, #0
 80022ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022f2:	6866      	ldr	r6, [r4, #4]
 80022f4:	60a6      	str	r6, [r4, #8]
 80022f6:	2e00      	cmp	r6, #0
 80022f8:	db05      	blt.n	8002306 <_printf_i+0x10e>
 80022fa:	6821      	ldr	r1, [r4, #0]
 80022fc:	432e      	orrs	r6, r5
 80022fe:	f021 0104 	bic.w	r1, r1, #4
 8002302:	6021      	str	r1, [r4, #0]
 8002304:	d04b      	beq.n	800239e <_printf_i+0x1a6>
 8002306:	4616      	mov	r6, r2
 8002308:	fbb5 f1f3 	udiv	r1, r5, r3
 800230c:	fb03 5711 	mls	r7, r3, r1, r5
 8002310:	5dc7      	ldrb	r7, [r0, r7]
 8002312:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002316:	462f      	mov	r7, r5
 8002318:	42bb      	cmp	r3, r7
 800231a:	460d      	mov	r5, r1
 800231c:	d9f4      	bls.n	8002308 <_printf_i+0x110>
 800231e:	2b08      	cmp	r3, #8
 8002320:	d10b      	bne.n	800233a <_printf_i+0x142>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	07df      	lsls	r7, r3, #31
 8002326:	d508      	bpl.n	800233a <_printf_i+0x142>
 8002328:	6923      	ldr	r3, [r4, #16]
 800232a:	6861      	ldr	r1, [r4, #4]
 800232c:	4299      	cmp	r1, r3
 800232e:	bfde      	ittt	le
 8002330:	2330      	movle	r3, #48	@ 0x30
 8002332:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002336:	f106 36ff 	addle.w	r6, r6, #4294967295
 800233a:	1b92      	subs	r2, r2, r6
 800233c:	6122      	str	r2, [r4, #16]
 800233e:	f8cd a000 	str.w	sl, [sp]
 8002342:	464b      	mov	r3, r9
 8002344:	aa03      	add	r2, sp, #12
 8002346:	4621      	mov	r1, r4
 8002348:	4640      	mov	r0, r8
 800234a:	f7ff fee7 	bl	800211c <_printf_common>
 800234e:	3001      	adds	r0, #1
 8002350:	d14a      	bne.n	80023e8 <_printf_i+0x1f0>
 8002352:	f04f 30ff 	mov.w	r0, #4294967295
 8002356:	b004      	add	sp, #16
 8002358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800235c:	6823      	ldr	r3, [r4, #0]
 800235e:	f043 0320 	orr.w	r3, r3, #32
 8002362:	6023      	str	r3, [r4, #0]
 8002364:	4832      	ldr	r0, [pc, #200]	@ (8002430 <_printf_i+0x238>)
 8002366:	2778      	movs	r7, #120	@ 0x78
 8002368:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800236c:	6823      	ldr	r3, [r4, #0]
 800236e:	6831      	ldr	r1, [r6, #0]
 8002370:	061f      	lsls	r7, r3, #24
 8002372:	f851 5b04 	ldr.w	r5, [r1], #4
 8002376:	d402      	bmi.n	800237e <_printf_i+0x186>
 8002378:	065f      	lsls	r7, r3, #25
 800237a:	bf48      	it	mi
 800237c:	b2ad      	uxthmi	r5, r5
 800237e:	6031      	str	r1, [r6, #0]
 8002380:	07d9      	lsls	r1, r3, #31
 8002382:	bf44      	itt	mi
 8002384:	f043 0320 	orrmi.w	r3, r3, #32
 8002388:	6023      	strmi	r3, [r4, #0]
 800238a:	b11d      	cbz	r5, 8002394 <_printf_i+0x19c>
 800238c:	2310      	movs	r3, #16
 800238e:	e7ad      	b.n	80022ec <_printf_i+0xf4>
 8002390:	4826      	ldr	r0, [pc, #152]	@ (800242c <_printf_i+0x234>)
 8002392:	e7e9      	b.n	8002368 <_printf_i+0x170>
 8002394:	6823      	ldr	r3, [r4, #0]
 8002396:	f023 0320 	bic.w	r3, r3, #32
 800239a:	6023      	str	r3, [r4, #0]
 800239c:	e7f6      	b.n	800238c <_printf_i+0x194>
 800239e:	4616      	mov	r6, r2
 80023a0:	e7bd      	b.n	800231e <_printf_i+0x126>
 80023a2:	6833      	ldr	r3, [r6, #0]
 80023a4:	6825      	ldr	r5, [r4, #0]
 80023a6:	6961      	ldr	r1, [r4, #20]
 80023a8:	1d18      	adds	r0, r3, #4
 80023aa:	6030      	str	r0, [r6, #0]
 80023ac:	062e      	lsls	r6, r5, #24
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	d501      	bpl.n	80023b6 <_printf_i+0x1be>
 80023b2:	6019      	str	r1, [r3, #0]
 80023b4:	e002      	b.n	80023bc <_printf_i+0x1c4>
 80023b6:	0668      	lsls	r0, r5, #25
 80023b8:	d5fb      	bpl.n	80023b2 <_printf_i+0x1ba>
 80023ba:	8019      	strh	r1, [r3, #0]
 80023bc:	2300      	movs	r3, #0
 80023be:	6123      	str	r3, [r4, #16]
 80023c0:	4616      	mov	r6, r2
 80023c2:	e7bc      	b.n	800233e <_printf_i+0x146>
 80023c4:	6833      	ldr	r3, [r6, #0]
 80023c6:	1d1a      	adds	r2, r3, #4
 80023c8:	6032      	str	r2, [r6, #0]
 80023ca:	681e      	ldr	r6, [r3, #0]
 80023cc:	6862      	ldr	r2, [r4, #4]
 80023ce:	2100      	movs	r1, #0
 80023d0:	4630      	mov	r0, r6
 80023d2:	f7fd ff05 	bl	80001e0 <memchr>
 80023d6:	b108      	cbz	r0, 80023dc <_printf_i+0x1e4>
 80023d8:	1b80      	subs	r0, r0, r6
 80023da:	6060      	str	r0, [r4, #4]
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	6123      	str	r3, [r4, #16]
 80023e0:	2300      	movs	r3, #0
 80023e2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023e6:	e7aa      	b.n	800233e <_printf_i+0x146>
 80023e8:	6923      	ldr	r3, [r4, #16]
 80023ea:	4632      	mov	r2, r6
 80023ec:	4649      	mov	r1, r9
 80023ee:	4640      	mov	r0, r8
 80023f0:	47d0      	blx	sl
 80023f2:	3001      	adds	r0, #1
 80023f4:	d0ad      	beq.n	8002352 <_printf_i+0x15a>
 80023f6:	6823      	ldr	r3, [r4, #0]
 80023f8:	079b      	lsls	r3, r3, #30
 80023fa:	d413      	bmi.n	8002424 <_printf_i+0x22c>
 80023fc:	68e0      	ldr	r0, [r4, #12]
 80023fe:	9b03      	ldr	r3, [sp, #12]
 8002400:	4298      	cmp	r0, r3
 8002402:	bfb8      	it	lt
 8002404:	4618      	movlt	r0, r3
 8002406:	e7a6      	b.n	8002356 <_printf_i+0x15e>
 8002408:	2301      	movs	r3, #1
 800240a:	4632      	mov	r2, r6
 800240c:	4649      	mov	r1, r9
 800240e:	4640      	mov	r0, r8
 8002410:	47d0      	blx	sl
 8002412:	3001      	adds	r0, #1
 8002414:	d09d      	beq.n	8002352 <_printf_i+0x15a>
 8002416:	3501      	adds	r5, #1
 8002418:	68e3      	ldr	r3, [r4, #12]
 800241a:	9903      	ldr	r1, [sp, #12]
 800241c:	1a5b      	subs	r3, r3, r1
 800241e:	42ab      	cmp	r3, r5
 8002420:	dcf2      	bgt.n	8002408 <_printf_i+0x210>
 8002422:	e7eb      	b.n	80023fc <_printf_i+0x204>
 8002424:	2500      	movs	r5, #0
 8002426:	f104 0619 	add.w	r6, r4, #25
 800242a:	e7f5      	b.n	8002418 <_printf_i+0x220>
 800242c:	080048b5 	.word	0x080048b5
 8002430:	080048c6 	.word	0x080048c6

08002434 <std>:
 8002434:	2300      	movs	r3, #0
 8002436:	b510      	push	{r4, lr}
 8002438:	4604      	mov	r4, r0
 800243a:	e9c0 3300 	strd	r3, r3, [r0]
 800243e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002442:	6083      	str	r3, [r0, #8]
 8002444:	8181      	strh	r1, [r0, #12]
 8002446:	6643      	str	r3, [r0, #100]	@ 0x64
 8002448:	81c2      	strh	r2, [r0, #14]
 800244a:	6183      	str	r3, [r0, #24]
 800244c:	4619      	mov	r1, r3
 800244e:	2208      	movs	r2, #8
 8002450:	305c      	adds	r0, #92	@ 0x5c
 8002452:	f000 f92a 	bl	80026aa <memset>
 8002456:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <std+0x58>)
 8002458:	6263      	str	r3, [r4, #36]	@ 0x24
 800245a:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <std+0x5c>)
 800245c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800245e:	4b0d      	ldr	r3, [pc, #52]	@ (8002494 <std+0x60>)
 8002460:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <std+0x64>)
 8002464:	6323      	str	r3, [r4, #48]	@ 0x30
 8002466:	4b0d      	ldr	r3, [pc, #52]	@ (800249c <std+0x68>)
 8002468:	6224      	str	r4, [r4, #32]
 800246a:	429c      	cmp	r4, r3
 800246c:	d006      	beq.n	800247c <std+0x48>
 800246e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002472:	4294      	cmp	r4, r2
 8002474:	d002      	beq.n	800247c <std+0x48>
 8002476:	33d0      	adds	r3, #208	@ 0xd0
 8002478:	429c      	cmp	r4, r3
 800247a:	d105      	bne.n	8002488 <std+0x54>
 800247c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002480:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002484:	f000 b9a4 	b.w	80027d0 <__retarget_lock_init_recursive>
 8002488:	bd10      	pop	{r4, pc}
 800248a:	bf00      	nop
 800248c:	08002625 	.word	0x08002625
 8002490:	08002647 	.word	0x08002647
 8002494:	0800267f 	.word	0x0800267f
 8002498:	080026a3 	.word	0x080026a3
 800249c:	20000a24 	.word	0x20000a24

080024a0 <stdio_exit_handler>:
 80024a0:	4a02      	ldr	r2, [pc, #8]	@ (80024ac <stdio_exit_handler+0xc>)
 80024a2:	4903      	ldr	r1, [pc, #12]	@ (80024b0 <stdio_exit_handler+0x10>)
 80024a4:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <stdio_exit_handler+0x14>)
 80024a6:	f000 b869 	b.w	800257c <_fwalk_sglue>
 80024aa:	bf00      	nop
 80024ac:	2000080c 	.word	0x2000080c
 80024b0:	08004135 	.word	0x08004135
 80024b4:	2000081c 	.word	0x2000081c

080024b8 <cleanup_stdio>:
 80024b8:	6841      	ldr	r1, [r0, #4]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	@ (80024ec <cleanup_stdio+0x34>)
 80024bc:	4299      	cmp	r1, r3
 80024be:	b510      	push	{r4, lr}
 80024c0:	4604      	mov	r4, r0
 80024c2:	d001      	beq.n	80024c8 <cleanup_stdio+0x10>
 80024c4:	f001 fe36 	bl	8004134 <_fflush_r>
 80024c8:	68a1      	ldr	r1, [r4, #8]
 80024ca:	4b09      	ldr	r3, [pc, #36]	@ (80024f0 <cleanup_stdio+0x38>)
 80024cc:	4299      	cmp	r1, r3
 80024ce:	d002      	beq.n	80024d6 <cleanup_stdio+0x1e>
 80024d0:	4620      	mov	r0, r4
 80024d2:	f001 fe2f 	bl	8004134 <_fflush_r>
 80024d6:	68e1      	ldr	r1, [r4, #12]
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <cleanup_stdio+0x3c>)
 80024da:	4299      	cmp	r1, r3
 80024dc:	d004      	beq.n	80024e8 <cleanup_stdio+0x30>
 80024de:	4620      	mov	r0, r4
 80024e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e4:	f001 be26 	b.w	8004134 <_fflush_r>
 80024e8:	bd10      	pop	{r4, pc}
 80024ea:	bf00      	nop
 80024ec:	20000a24 	.word	0x20000a24
 80024f0:	20000a8c 	.word	0x20000a8c
 80024f4:	20000af4 	.word	0x20000af4

080024f8 <global_stdio_init.part.0>:
 80024f8:	b510      	push	{r4, lr}
 80024fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002528 <global_stdio_init.part.0+0x30>)
 80024fc:	4c0b      	ldr	r4, [pc, #44]	@ (800252c <global_stdio_init.part.0+0x34>)
 80024fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002530 <global_stdio_init.part.0+0x38>)
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	4620      	mov	r0, r4
 8002504:	2200      	movs	r2, #0
 8002506:	2104      	movs	r1, #4
 8002508:	f7ff ff94 	bl	8002434 <std>
 800250c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002510:	2201      	movs	r2, #1
 8002512:	2109      	movs	r1, #9
 8002514:	f7ff ff8e 	bl	8002434 <std>
 8002518:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800251c:	2202      	movs	r2, #2
 800251e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002522:	2112      	movs	r1, #18
 8002524:	f7ff bf86 	b.w	8002434 <std>
 8002528:	20000b5c 	.word	0x20000b5c
 800252c:	20000a24 	.word	0x20000a24
 8002530:	080024a1 	.word	0x080024a1

08002534 <__sfp_lock_acquire>:
 8002534:	4801      	ldr	r0, [pc, #4]	@ (800253c <__sfp_lock_acquire+0x8>)
 8002536:	f000 b94c 	b.w	80027d2 <__retarget_lock_acquire_recursive>
 800253a:	bf00      	nop
 800253c:	20000b65 	.word	0x20000b65

08002540 <__sfp_lock_release>:
 8002540:	4801      	ldr	r0, [pc, #4]	@ (8002548 <__sfp_lock_release+0x8>)
 8002542:	f000 b947 	b.w	80027d4 <__retarget_lock_release_recursive>
 8002546:	bf00      	nop
 8002548:	20000b65 	.word	0x20000b65

0800254c <__sinit>:
 800254c:	b510      	push	{r4, lr}
 800254e:	4604      	mov	r4, r0
 8002550:	f7ff fff0 	bl	8002534 <__sfp_lock_acquire>
 8002554:	6a23      	ldr	r3, [r4, #32]
 8002556:	b11b      	cbz	r3, 8002560 <__sinit+0x14>
 8002558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800255c:	f7ff bff0 	b.w	8002540 <__sfp_lock_release>
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__sinit+0x28>)
 8002562:	6223      	str	r3, [r4, #32]
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <__sinit+0x2c>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d1f5      	bne.n	8002558 <__sinit+0xc>
 800256c:	f7ff ffc4 	bl	80024f8 <global_stdio_init.part.0>
 8002570:	e7f2      	b.n	8002558 <__sinit+0xc>
 8002572:	bf00      	nop
 8002574:	080024b9 	.word	0x080024b9
 8002578:	20000b5c 	.word	0x20000b5c

0800257c <_fwalk_sglue>:
 800257c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002580:	4607      	mov	r7, r0
 8002582:	4688      	mov	r8, r1
 8002584:	4614      	mov	r4, r2
 8002586:	2600      	movs	r6, #0
 8002588:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800258c:	f1b9 0901 	subs.w	r9, r9, #1
 8002590:	d505      	bpl.n	800259e <_fwalk_sglue+0x22>
 8002592:	6824      	ldr	r4, [r4, #0]
 8002594:	2c00      	cmp	r4, #0
 8002596:	d1f7      	bne.n	8002588 <_fwalk_sglue+0xc>
 8002598:	4630      	mov	r0, r6
 800259a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800259e:	89ab      	ldrh	r3, [r5, #12]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d907      	bls.n	80025b4 <_fwalk_sglue+0x38>
 80025a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025a8:	3301      	adds	r3, #1
 80025aa:	d003      	beq.n	80025b4 <_fwalk_sglue+0x38>
 80025ac:	4629      	mov	r1, r5
 80025ae:	4638      	mov	r0, r7
 80025b0:	47c0      	blx	r8
 80025b2:	4306      	orrs	r6, r0
 80025b4:	3568      	adds	r5, #104	@ 0x68
 80025b6:	e7e9      	b.n	800258c <_fwalk_sglue+0x10>

080025b8 <sniprintf>:
 80025b8:	b40c      	push	{r2, r3}
 80025ba:	b530      	push	{r4, r5, lr}
 80025bc:	4b18      	ldr	r3, [pc, #96]	@ (8002620 <sniprintf+0x68>)
 80025be:	1e0c      	subs	r4, r1, #0
 80025c0:	681d      	ldr	r5, [r3, #0]
 80025c2:	b09d      	sub	sp, #116	@ 0x74
 80025c4:	da08      	bge.n	80025d8 <sniprintf+0x20>
 80025c6:	238b      	movs	r3, #139	@ 0x8b
 80025c8:	602b      	str	r3, [r5, #0]
 80025ca:	f04f 30ff 	mov.w	r0, #4294967295
 80025ce:	b01d      	add	sp, #116	@ 0x74
 80025d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80025d4:	b002      	add	sp, #8
 80025d6:	4770      	bx	lr
 80025d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80025dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80025e6:	bf14      	ite	ne
 80025e8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80025ec:	4623      	moveq	r3, r4
 80025ee:	9304      	str	r3, [sp, #16]
 80025f0:	9307      	str	r3, [sp, #28]
 80025f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025f6:	9002      	str	r0, [sp, #8]
 80025f8:	9006      	str	r0, [sp, #24]
 80025fa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80025fe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8002600:	ab21      	add	r3, sp, #132	@ 0x84
 8002602:	a902      	add	r1, sp, #8
 8002604:	4628      	mov	r0, r5
 8002606:	9301      	str	r3, [sp, #4]
 8002608:	f001 fc14 	bl	8003e34 <_svfiprintf_r>
 800260c:	1c43      	adds	r3, r0, #1
 800260e:	bfbc      	itt	lt
 8002610:	238b      	movlt	r3, #139	@ 0x8b
 8002612:	602b      	strlt	r3, [r5, #0]
 8002614:	2c00      	cmp	r4, #0
 8002616:	d0da      	beq.n	80025ce <sniprintf+0x16>
 8002618:	9b02      	ldr	r3, [sp, #8]
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e7d6      	b.n	80025ce <sniprintf+0x16>
 8002620:	20000818 	.word	0x20000818

08002624 <__sread>:
 8002624:	b510      	push	{r4, lr}
 8002626:	460c      	mov	r4, r1
 8002628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262c:	f000 f882 	bl	8002734 <_read_r>
 8002630:	2800      	cmp	r0, #0
 8002632:	bfab      	itete	ge
 8002634:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002636:	89a3      	ldrhlt	r3, [r4, #12]
 8002638:	181b      	addge	r3, r3, r0
 800263a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800263e:	bfac      	ite	ge
 8002640:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002642:	81a3      	strhlt	r3, [r4, #12]
 8002644:	bd10      	pop	{r4, pc}

08002646 <__swrite>:
 8002646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	461f      	mov	r7, r3
 800264c:	898b      	ldrh	r3, [r1, #12]
 800264e:	05db      	lsls	r3, r3, #23
 8002650:	4605      	mov	r5, r0
 8002652:	460c      	mov	r4, r1
 8002654:	4616      	mov	r6, r2
 8002656:	d505      	bpl.n	8002664 <__swrite+0x1e>
 8002658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800265c:	2302      	movs	r3, #2
 800265e:	2200      	movs	r2, #0
 8002660:	f000 f856 	bl	8002710 <_lseek_r>
 8002664:	89a3      	ldrh	r3, [r4, #12]
 8002666:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800266a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800266e:	81a3      	strh	r3, [r4, #12]
 8002670:	4632      	mov	r2, r6
 8002672:	463b      	mov	r3, r7
 8002674:	4628      	mov	r0, r5
 8002676:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800267a:	f000 b86d 	b.w	8002758 <_write_r>

0800267e <__sseek>:
 800267e:	b510      	push	{r4, lr}
 8002680:	460c      	mov	r4, r1
 8002682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002686:	f000 f843 	bl	8002710 <_lseek_r>
 800268a:	1c43      	adds	r3, r0, #1
 800268c:	89a3      	ldrh	r3, [r4, #12]
 800268e:	bf15      	itete	ne
 8002690:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002692:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002696:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800269a:	81a3      	strheq	r3, [r4, #12]
 800269c:	bf18      	it	ne
 800269e:	81a3      	strhne	r3, [r4, #12]
 80026a0:	bd10      	pop	{r4, pc}

080026a2 <__sclose>:
 80026a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026a6:	f000 b823 	b.w	80026f0 <_close_r>

080026aa <memset>:
 80026aa:	4402      	add	r2, r0
 80026ac:	4603      	mov	r3, r0
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d100      	bne.n	80026b4 <memset+0xa>
 80026b2:	4770      	bx	lr
 80026b4:	f803 1b01 	strb.w	r1, [r3], #1
 80026b8:	e7f9      	b.n	80026ae <memset+0x4>

080026ba <strstr>:
 80026ba:	780a      	ldrb	r2, [r1, #0]
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	b96a      	cbnz	r2, 80026dc <strstr+0x22>
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d109      	bne.n	80026da <strstr+0x20>
 80026c6:	460c      	mov	r4, r1
 80026c8:	4605      	mov	r5, r0
 80026ca:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f6      	beq.n	80026c0 <strstr+0x6>
 80026d2:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80026d6:	429e      	cmp	r6, r3
 80026d8:	d0f7      	beq.n	80026ca <strstr+0x10>
 80026da:	3001      	adds	r0, #1
 80026dc:	7803      	ldrb	r3, [r0, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ef      	bne.n	80026c2 <strstr+0x8>
 80026e2:	4618      	mov	r0, r3
 80026e4:	e7ec      	b.n	80026c0 <strstr+0x6>
	...

080026e8 <_localeconv_r>:
 80026e8:	4800      	ldr	r0, [pc, #0]	@ (80026ec <_localeconv_r+0x4>)
 80026ea:	4770      	bx	lr
 80026ec:	20000958 	.word	0x20000958

080026f0 <_close_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4d06      	ldr	r5, [pc, #24]	@ (800270c <_close_r+0x1c>)
 80026f4:	2300      	movs	r3, #0
 80026f6:	4604      	mov	r4, r0
 80026f8:	4608      	mov	r0, r1
 80026fa:	602b      	str	r3, [r5, #0]
 80026fc:	f7ff f823 	bl	8001746 <_close>
 8002700:	1c43      	adds	r3, r0, #1
 8002702:	d102      	bne.n	800270a <_close_r+0x1a>
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	b103      	cbz	r3, 800270a <_close_r+0x1a>
 8002708:	6023      	str	r3, [r4, #0]
 800270a:	bd38      	pop	{r3, r4, r5, pc}
 800270c:	20000b60 	.word	0x20000b60

08002710 <_lseek_r>:
 8002710:	b538      	push	{r3, r4, r5, lr}
 8002712:	4d07      	ldr	r5, [pc, #28]	@ (8002730 <_lseek_r+0x20>)
 8002714:	4604      	mov	r4, r0
 8002716:	4608      	mov	r0, r1
 8002718:	4611      	mov	r1, r2
 800271a:	2200      	movs	r2, #0
 800271c:	602a      	str	r2, [r5, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	f7ff f838 	bl	8001794 <_lseek>
 8002724:	1c43      	adds	r3, r0, #1
 8002726:	d102      	bne.n	800272e <_lseek_r+0x1e>
 8002728:	682b      	ldr	r3, [r5, #0]
 800272a:	b103      	cbz	r3, 800272e <_lseek_r+0x1e>
 800272c:	6023      	str	r3, [r4, #0]
 800272e:	bd38      	pop	{r3, r4, r5, pc}
 8002730:	20000b60 	.word	0x20000b60

08002734 <_read_r>:
 8002734:	b538      	push	{r3, r4, r5, lr}
 8002736:	4d07      	ldr	r5, [pc, #28]	@ (8002754 <_read_r+0x20>)
 8002738:	4604      	mov	r4, r0
 800273a:	4608      	mov	r0, r1
 800273c:	4611      	mov	r1, r2
 800273e:	2200      	movs	r2, #0
 8002740:	602a      	str	r2, [r5, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	f7fe ffc6 	bl	80016d4 <_read>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d102      	bne.n	8002752 <_read_r+0x1e>
 800274c:	682b      	ldr	r3, [r5, #0]
 800274e:	b103      	cbz	r3, 8002752 <_read_r+0x1e>
 8002750:	6023      	str	r3, [r4, #0]
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	20000b60 	.word	0x20000b60

08002758 <_write_r>:
 8002758:	b538      	push	{r3, r4, r5, lr}
 800275a:	4d07      	ldr	r5, [pc, #28]	@ (8002778 <_write_r+0x20>)
 800275c:	4604      	mov	r4, r0
 800275e:	4608      	mov	r0, r1
 8002760:	4611      	mov	r1, r2
 8002762:	2200      	movs	r2, #0
 8002764:	602a      	str	r2, [r5, #0]
 8002766:	461a      	mov	r2, r3
 8002768:	f7fe ffd1 	bl	800170e <_write>
 800276c:	1c43      	adds	r3, r0, #1
 800276e:	d102      	bne.n	8002776 <_write_r+0x1e>
 8002770:	682b      	ldr	r3, [r5, #0]
 8002772:	b103      	cbz	r3, 8002776 <_write_r+0x1e>
 8002774:	6023      	str	r3, [r4, #0]
 8002776:	bd38      	pop	{r3, r4, r5, pc}
 8002778:	20000b60 	.word	0x20000b60

0800277c <__errno>:
 800277c:	4b01      	ldr	r3, [pc, #4]	@ (8002784 <__errno+0x8>)
 800277e:	6818      	ldr	r0, [r3, #0]
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	20000818 	.word	0x20000818

08002788 <__libc_init_array>:
 8002788:	b570      	push	{r4, r5, r6, lr}
 800278a:	4d0d      	ldr	r5, [pc, #52]	@ (80027c0 <__libc_init_array+0x38>)
 800278c:	4c0d      	ldr	r4, [pc, #52]	@ (80027c4 <__libc_init_array+0x3c>)
 800278e:	1b64      	subs	r4, r4, r5
 8002790:	10a4      	asrs	r4, r4, #2
 8002792:	2600      	movs	r6, #0
 8002794:	42a6      	cmp	r6, r4
 8002796:	d109      	bne.n	80027ac <__libc_init_array+0x24>
 8002798:	4d0b      	ldr	r5, [pc, #44]	@ (80027c8 <__libc_init_array+0x40>)
 800279a:	4c0c      	ldr	r4, [pc, #48]	@ (80027cc <__libc_init_array+0x44>)
 800279c:	f002 f868 	bl	8004870 <_init>
 80027a0:	1b64      	subs	r4, r4, r5
 80027a2:	10a4      	asrs	r4, r4, #2
 80027a4:	2600      	movs	r6, #0
 80027a6:	42a6      	cmp	r6, r4
 80027a8:	d105      	bne.n	80027b6 <__libc_init_array+0x2e>
 80027aa:	bd70      	pop	{r4, r5, r6, pc}
 80027ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80027b0:	4798      	blx	r3
 80027b2:	3601      	adds	r6, #1
 80027b4:	e7ee      	b.n	8002794 <__libc_init_array+0xc>
 80027b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ba:	4798      	blx	r3
 80027bc:	3601      	adds	r6, #1
 80027be:	e7f2      	b.n	80027a6 <__libc_init_array+0x1e>
 80027c0:	08004c1c 	.word	0x08004c1c
 80027c4:	08004c1c 	.word	0x08004c1c
 80027c8:	08004c1c 	.word	0x08004c1c
 80027cc:	08004c20 	.word	0x08004c20

080027d0 <__retarget_lock_init_recursive>:
 80027d0:	4770      	bx	lr

080027d2 <__retarget_lock_acquire_recursive>:
 80027d2:	4770      	bx	lr

080027d4 <__retarget_lock_release_recursive>:
 80027d4:	4770      	bx	lr

080027d6 <quorem>:
 80027d6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027da:	6903      	ldr	r3, [r0, #16]
 80027dc:	690c      	ldr	r4, [r1, #16]
 80027de:	42a3      	cmp	r3, r4
 80027e0:	4607      	mov	r7, r0
 80027e2:	db7e      	blt.n	80028e2 <quorem+0x10c>
 80027e4:	3c01      	subs	r4, #1
 80027e6:	f101 0814 	add.w	r8, r1, #20
 80027ea:	00a3      	lsls	r3, r4, #2
 80027ec:	f100 0514 	add.w	r5, r0, #20
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80027fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8002800:	3301      	adds	r3, #1
 8002802:	429a      	cmp	r2, r3
 8002804:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8002808:	fbb2 f6f3 	udiv	r6, r2, r3
 800280c:	d32e      	bcc.n	800286c <quorem+0x96>
 800280e:	f04f 0a00 	mov.w	sl, #0
 8002812:	46c4      	mov	ip, r8
 8002814:	46ae      	mov	lr, r5
 8002816:	46d3      	mov	fp, sl
 8002818:	f85c 3b04 	ldr.w	r3, [ip], #4
 800281c:	b298      	uxth	r0, r3
 800281e:	fb06 a000 	mla	r0, r6, r0, sl
 8002822:	0c02      	lsrs	r2, r0, #16
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	fb06 2303 	mla	r3, r6, r3, r2
 800282a:	f8de 2000 	ldr.w	r2, [lr]
 800282e:	b280      	uxth	r0, r0
 8002830:	b292      	uxth	r2, r2
 8002832:	1a12      	subs	r2, r2, r0
 8002834:	445a      	add	r2, fp
 8002836:	f8de 0000 	ldr.w	r0, [lr]
 800283a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800283e:	b29b      	uxth	r3, r3
 8002840:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8002844:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8002848:	b292      	uxth	r2, r2
 800284a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800284e:	45e1      	cmp	r9, ip
 8002850:	f84e 2b04 	str.w	r2, [lr], #4
 8002854:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8002858:	d2de      	bcs.n	8002818 <quorem+0x42>
 800285a:	9b00      	ldr	r3, [sp, #0]
 800285c:	58eb      	ldr	r3, [r5, r3]
 800285e:	b92b      	cbnz	r3, 800286c <quorem+0x96>
 8002860:	9b01      	ldr	r3, [sp, #4]
 8002862:	3b04      	subs	r3, #4
 8002864:	429d      	cmp	r5, r3
 8002866:	461a      	mov	r2, r3
 8002868:	d32f      	bcc.n	80028ca <quorem+0xf4>
 800286a:	613c      	str	r4, [r7, #16]
 800286c:	4638      	mov	r0, r7
 800286e:	f001 f97d 	bl	8003b6c <__mcmp>
 8002872:	2800      	cmp	r0, #0
 8002874:	db25      	blt.n	80028c2 <quorem+0xec>
 8002876:	4629      	mov	r1, r5
 8002878:	2000      	movs	r0, #0
 800287a:	f858 2b04 	ldr.w	r2, [r8], #4
 800287e:	f8d1 c000 	ldr.w	ip, [r1]
 8002882:	fa1f fe82 	uxth.w	lr, r2
 8002886:	fa1f f38c 	uxth.w	r3, ip
 800288a:	eba3 030e 	sub.w	r3, r3, lr
 800288e:	4403      	add	r3, r0
 8002890:	0c12      	lsrs	r2, r2, #16
 8002892:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8002896:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800289a:	b29b      	uxth	r3, r3
 800289c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80028a0:	45c1      	cmp	r9, r8
 80028a2:	f841 3b04 	str.w	r3, [r1], #4
 80028a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80028aa:	d2e6      	bcs.n	800287a <quorem+0xa4>
 80028ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80028b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80028b4:	b922      	cbnz	r2, 80028c0 <quorem+0xea>
 80028b6:	3b04      	subs	r3, #4
 80028b8:	429d      	cmp	r5, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	d30b      	bcc.n	80028d6 <quorem+0x100>
 80028be:	613c      	str	r4, [r7, #16]
 80028c0:	3601      	adds	r6, #1
 80028c2:	4630      	mov	r0, r6
 80028c4:	b003      	add	sp, #12
 80028c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	3b04      	subs	r3, #4
 80028ce:	2a00      	cmp	r2, #0
 80028d0:	d1cb      	bne.n	800286a <quorem+0x94>
 80028d2:	3c01      	subs	r4, #1
 80028d4:	e7c6      	b.n	8002864 <quorem+0x8e>
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	3b04      	subs	r3, #4
 80028da:	2a00      	cmp	r2, #0
 80028dc:	d1ef      	bne.n	80028be <quorem+0xe8>
 80028de:	3c01      	subs	r4, #1
 80028e0:	e7ea      	b.n	80028b8 <quorem+0xe2>
 80028e2:	2000      	movs	r0, #0
 80028e4:	e7ee      	b.n	80028c4 <quorem+0xee>
	...

080028e8 <_dtoa_r>:
 80028e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028ec:	69c7      	ldr	r7, [r0, #28]
 80028ee:	b097      	sub	sp, #92	@ 0x5c
 80028f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80028f4:	ec55 4b10 	vmov	r4, r5, d0
 80028f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80028fa:	9107      	str	r1, [sp, #28]
 80028fc:	4681      	mov	r9, r0
 80028fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8002900:	9311      	str	r3, [sp, #68]	@ 0x44
 8002902:	b97f      	cbnz	r7, 8002924 <_dtoa_r+0x3c>
 8002904:	2010      	movs	r0, #16
 8002906:	f000 fe09 	bl	800351c <malloc>
 800290a:	4602      	mov	r2, r0
 800290c:	f8c9 001c 	str.w	r0, [r9, #28]
 8002910:	b920      	cbnz	r0, 800291c <_dtoa_r+0x34>
 8002912:	4ba9      	ldr	r3, [pc, #676]	@ (8002bb8 <_dtoa_r+0x2d0>)
 8002914:	21ef      	movs	r1, #239	@ 0xef
 8002916:	48a9      	ldr	r0, [pc, #676]	@ (8002bbc <_dtoa_r+0x2d4>)
 8002918:	f001 fc6c 	bl	80041f4 <__assert_func>
 800291c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8002920:	6007      	str	r7, [r0, #0]
 8002922:	60c7      	str	r7, [r0, #12]
 8002924:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002928:	6819      	ldr	r1, [r3, #0]
 800292a:	b159      	cbz	r1, 8002944 <_dtoa_r+0x5c>
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	604a      	str	r2, [r1, #4]
 8002930:	2301      	movs	r3, #1
 8002932:	4093      	lsls	r3, r2
 8002934:	608b      	str	r3, [r1, #8]
 8002936:	4648      	mov	r0, r9
 8002938:	f000 fee6 	bl	8003708 <_Bfree>
 800293c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002940:	2200      	movs	r2, #0
 8002942:	601a      	str	r2, [r3, #0]
 8002944:	1e2b      	subs	r3, r5, #0
 8002946:	bfb9      	ittee	lt
 8002948:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800294c:	9305      	strlt	r3, [sp, #20]
 800294e:	2300      	movge	r3, #0
 8002950:	6033      	strge	r3, [r6, #0]
 8002952:	9f05      	ldr	r7, [sp, #20]
 8002954:	4b9a      	ldr	r3, [pc, #616]	@ (8002bc0 <_dtoa_r+0x2d8>)
 8002956:	bfbc      	itt	lt
 8002958:	2201      	movlt	r2, #1
 800295a:	6032      	strlt	r2, [r6, #0]
 800295c:	43bb      	bics	r3, r7
 800295e:	d112      	bne.n	8002986 <_dtoa_r+0x9e>
 8002960:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8002962:	f242 730f 	movw	r3, #9999	@ 0x270f
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800296c:	4323      	orrs	r3, r4
 800296e:	f000 855a 	beq.w	8003426 <_dtoa_r+0xb3e>
 8002972:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002974:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8002bd4 <_dtoa_r+0x2ec>
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 855c 	beq.w	8003436 <_dtoa_r+0xb4e>
 800297e:	f10a 0303 	add.w	r3, sl, #3
 8002982:	f000 bd56 	b.w	8003432 <_dtoa_r+0xb4a>
 8002986:	ed9d 7b04 	vldr	d7, [sp, #16]
 800298a:	2200      	movs	r2, #0
 800298c:	ec51 0b17 	vmov	r0, r1, d7
 8002990:	2300      	movs	r3, #0
 8002992:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8002996:	f7fe f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800299a:	4680      	mov	r8, r0
 800299c:	b158      	cbz	r0, 80029b6 <_dtoa_r+0xce>
 800299e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80029a0:	2301      	movs	r3, #1
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80029a6:	b113      	cbz	r3, 80029ae <_dtoa_r+0xc6>
 80029a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80029aa:	4b86      	ldr	r3, [pc, #536]	@ (8002bc4 <_dtoa_r+0x2dc>)
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8002bd8 <_dtoa_r+0x2f0>
 80029b2:	f000 bd40 	b.w	8003436 <_dtoa_r+0xb4e>
 80029b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80029ba:	aa14      	add	r2, sp, #80	@ 0x50
 80029bc:	a915      	add	r1, sp, #84	@ 0x54
 80029be:	4648      	mov	r0, r9
 80029c0:	f001 f984 	bl	8003ccc <__d2b>
 80029c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80029c8:	9002      	str	r0, [sp, #8]
 80029ca:	2e00      	cmp	r6, #0
 80029cc:	d078      	beq.n	8002ac0 <_dtoa_r+0x1d8>
 80029ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80029d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80029d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80029dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80029e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80029e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80029e8:	4619      	mov	r1, r3
 80029ea:	2200      	movs	r2, #0
 80029ec:	4b76      	ldr	r3, [pc, #472]	@ (8002bc8 <_dtoa_r+0x2e0>)
 80029ee:	f7fd fc53 	bl	8000298 <__aeabi_dsub>
 80029f2:	a36b      	add	r3, pc, #428	@ (adr r3, 8002ba0 <_dtoa_r+0x2b8>)
 80029f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f8:	f7fd fe06 	bl	8000608 <__aeabi_dmul>
 80029fc:	a36a      	add	r3, pc, #424	@ (adr r3, 8002ba8 <_dtoa_r+0x2c0>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fd fc4b 	bl	800029c <__adddf3>
 8002a06:	4604      	mov	r4, r0
 8002a08:	4630      	mov	r0, r6
 8002a0a:	460d      	mov	r5, r1
 8002a0c:	f7fd fd92 	bl	8000534 <__aeabi_i2d>
 8002a10:	a367      	add	r3, pc, #412	@ (adr r3, 8002bb0 <_dtoa_r+0x2c8>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	f7fd fdf7 	bl	8000608 <__aeabi_dmul>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4620      	mov	r0, r4
 8002a20:	4629      	mov	r1, r5
 8002a22:	f7fd fc3b 	bl	800029c <__adddf3>
 8002a26:	4604      	mov	r4, r0
 8002a28:	460d      	mov	r5, r1
 8002a2a:	f7fe f89d 	bl	8000b68 <__aeabi_d2iz>
 8002a2e:	2200      	movs	r2, #0
 8002a30:	4607      	mov	r7, r0
 8002a32:	2300      	movs	r3, #0
 8002a34:	4620      	mov	r0, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	f7fe f858 	bl	8000aec <__aeabi_dcmplt>
 8002a3c:	b140      	cbz	r0, 8002a50 <_dtoa_r+0x168>
 8002a3e:	4638      	mov	r0, r7
 8002a40:	f7fd fd78 	bl	8000534 <__aeabi_i2d>
 8002a44:	4622      	mov	r2, r4
 8002a46:	462b      	mov	r3, r5
 8002a48:	f7fe f846 	bl	8000ad8 <__aeabi_dcmpeq>
 8002a4c:	b900      	cbnz	r0, 8002a50 <_dtoa_r+0x168>
 8002a4e:	3f01      	subs	r7, #1
 8002a50:	2f16      	cmp	r7, #22
 8002a52:	d852      	bhi.n	8002afa <_dtoa_r+0x212>
 8002a54:	4b5d      	ldr	r3, [pc, #372]	@ (8002bcc <_dtoa_r+0x2e4>)
 8002a56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002a62:	f7fe f843 	bl	8000aec <__aeabi_dcmplt>
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d049      	beq.n	8002afe <_dtoa_r+0x216>
 8002a6a:	3f01      	subs	r7, #1
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	9310      	str	r3, [sp, #64]	@ 0x40
 8002a70:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002a72:	1b9b      	subs	r3, r3, r6
 8002a74:	1e5a      	subs	r2, r3, #1
 8002a76:	bf45      	ittet	mi
 8002a78:	f1c3 0301 	rsbmi	r3, r3, #1
 8002a7c:	9300      	strmi	r3, [sp, #0]
 8002a7e:	2300      	movpl	r3, #0
 8002a80:	2300      	movmi	r3, #0
 8002a82:	9206      	str	r2, [sp, #24]
 8002a84:	bf54      	ite	pl
 8002a86:	9300      	strpl	r3, [sp, #0]
 8002a88:	9306      	strmi	r3, [sp, #24]
 8002a8a:	2f00      	cmp	r7, #0
 8002a8c:	db39      	blt.n	8002b02 <_dtoa_r+0x21a>
 8002a8e:	9b06      	ldr	r3, [sp, #24]
 8002a90:	970d      	str	r7, [sp, #52]	@ 0x34
 8002a92:	443b      	add	r3, r7
 8002a94:	9306      	str	r3, [sp, #24]
 8002a96:	2300      	movs	r3, #0
 8002a98:	9308      	str	r3, [sp, #32]
 8002a9a:	9b07      	ldr	r3, [sp, #28]
 8002a9c:	2b09      	cmp	r3, #9
 8002a9e:	d863      	bhi.n	8002b68 <_dtoa_r+0x280>
 8002aa0:	2b05      	cmp	r3, #5
 8002aa2:	bfc4      	itt	gt
 8002aa4:	3b04      	subgt	r3, #4
 8002aa6:	9307      	strgt	r3, [sp, #28]
 8002aa8:	9b07      	ldr	r3, [sp, #28]
 8002aaa:	f1a3 0302 	sub.w	r3, r3, #2
 8002aae:	bfcc      	ite	gt
 8002ab0:	2400      	movgt	r4, #0
 8002ab2:	2401      	movle	r4, #1
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d863      	bhi.n	8002b80 <_dtoa_r+0x298>
 8002ab8:	e8df f003 	tbb	[pc, r3]
 8002abc:	2b375452 	.word	0x2b375452
 8002ac0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8002ac4:	441e      	add	r6, r3
 8002ac6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	bfc1      	itttt	gt
 8002ace:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8002ad2:	409f      	lslgt	r7, r3
 8002ad4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8002ad8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8002adc:	bfd6      	itet	le
 8002ade:	f1c3 0320 	rsble	r3, r3, #32
 8002ae2:	ea47 0003 	orrgt.w	r0, r7, r3
 8002ae6:	fa04 f003 	lslle.w	r0, r4, r3
 8002aea:	f7fd fd13 	bl	8000514 <__aeabi_ui2d>
 8002aee:	2201      	movs	r2, #1
 8002af0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8002af4:	3e01      	subs	r6, #1
 8002af6:	9212      	str	r2, [sp, #72]	@ 0x48
 8002af8:	e776      	b.n	80029e8 <_dtoa_r+0x100>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e7b7      	b.n	8002a6e <_dtoa_r+0x186>
 8002afe:	9010      	str	r0, [sp, #64]	@ 0x40
 8002b00:	e7b6      	b.n	8002a70 <_dtoa_r+0x188>
 8002b02:	9b00      	ldr	r3, [sp, #0]
 8002b04:	1bdb      	subs	r3, r3, r7
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	427b      	negs	r3, r7
 8002b0a:	9308      	str	r3, [sp, #32]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	930d      	str	r3, [sp, #52]	@ 0x34
 8002b10:	e7c3      	b.n	8002a9a <_dtoa_r+0x1b2>
 8002b12:	2301      	movs	r3, #1
 8002b14:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002b18:	eb07 0b03 	add.w	fp, r7, r3
 8002b1c:	f10b 0301 	add.w	r3, fp, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	9303      	str	r3, [sp, #12]
 8002b24:	bfb8      	it	lt
 8002b26:	2301      	movlt	r3, #1
 8002b28:	e006      	b.n	8002b38 <_dtoa_r+0x250>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	dd28      	ble.n	8002b86 <_dtoa_r+0x29e>
 8002b34:	469b      	mov	fp, r3
 8002b36:	9303      	str	r3, [sp, #12]
 8002b38:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	2204      	movs	r2, #4
 8002b40:	f102 0514 	add.w	r5, r2, #20
 8002b44:	429d      	cmp	r5, r3
 8002b46:	d926      	bls.n	8002b96 <_dtoa_r+0x2ae>
 8002b48:	6041      	str	r1, [r0, #4]
 8002b4a:	4648      	mov	r0, r9
 8002b4c:	f000 fd9c 	bl	8003688 <_Balloc>
 8002b50:	4682      	mov	sl, r0
 8002b52:	2800      	cmp	r0, #0
 8002b54:	d142      	bne.n	8002bdc <_dtoa_r+0x2f4>
 8002b56:	4b1e      	ldr	r3, [pc, #120]	@ (8002bd0 <_dtoa_r+0x2e8>)
 8002b58:	4602      	mov	r2, r0
 8002b5a:	f240 11af 	movw	r1, #431	@ 0x1af
 8002b5e:	e6da      	b.n	8002916 <_dtoa_r+0x2e>
 8002b60:	2300      	movs	r3, #0
 8002b62:	e7e3      	b.n	8002b2c <_dtoa_r+0x244>
 8002b64:	2300      	movs	r3, #0
 8002b66:	e7d5      	b.n	8002b14 <_dtoa_r+0x22c>
 8002b68:	2401      	movs	r4, #1
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	9307      	str	r3, [sp, #28]
 8002b6e:	9409      	str	r4, [sp, #36]	@ 0x24
 8002b70:	f04f 3bff 	mov.w	fp, #4294967295
 8002b74:	2200      	movs	r2, #0
 8002b76:	f8cd b00c 	str.w	fp, [sp, #12]
 8002b7a:	2312      	movs	r3, #18
 8002b7c:	920c      	str	r2, [sp, #48]	@ 0x30
 8002b7e:	e7db      	b.n	8002b38 <_dtoa_r+0x250>
 8002b80:	2301      	movs	r3, #1
 8002b82:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b84:	e7f4      	b.n	8002b70 <_dtoa_r+0x288>
 8002b86:	f04f 0b01 	mov.w	fp, #1
 8002b8a:	f8cd b00c 	str.w	fp, [sp, #12]
 8002b8e:	465b      	mov	r3, fp
 8002b90:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8002b94:	e7d0      	b.n	8002b38 <_dtoa_r+0x250>
 8002b96:	3101      	adds	r1, #1
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	e7d1      	b.n	8002b40 <_dtoa_r+0x258>
 8002b9c:	f3af 8000 	nop.w
 8002ba0:	636f4361 	.word	0x636f4361
 8002ba4:	3fd287a7 	.word	0x3fd287a7
 8002ba8:	8b60c8b3 	.word	0x8b60c8b3
 8002bac:	3fc68a28 	.word	0x3fc68a28
 8002bb0:	509f79fb 	.word	0x509f79fb
 8002bb4:	3fd34413 	.word	0x3fd34413
 8002bb8:	080048e4 	.word	0x080048e4
 8002bbc:	080048fb 	.word	0x080048fb
 8002bc0:	7ff00000 	.word	0x7ff00000
 8002bc4:	080048b4 	.word	0x080048b4
 8002bc8:	3ff80000 	.word	0x3ff80000
 8002bcc:	08004a48 	.word	0x08004a48
 8002bd0:	08004953 	.word	0x08004953
 8002bd4:	080048e0 	.word	0x080048e0
 8002bd8:	080048b3 	.word	0x080048b3
 8002bdc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8002be0:	6018      	str	r0, [r3, #0]
 8002be2:	9b03      	ldr	r3, [sp, #12]
 8002be4:	2b0e      	cmp	r3, #14
 8002be6:	f200 80a1 	bhi.w	8002d2c <_dtoa_r+0x444>
 8002bea:	2c00      	cmp	r4, #0
 8002bec:	f000 809e 	beq.w	8002d2c <_dtoa_r+0x444>
 8002bf0:	2f00      	cmp	r7, #0
 8002bf2:	dd33      	ble.n	8002c5c <_dtoa_r+0x374>
 8002bf4:	4b9c      	ldr	r3, [pc, #624]	@ (8002e68 <_dtoa_r+0x580>)
 8002bf6:	f007 020f 	and.w	r2, r7, #15
 8002bfa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002bfe:	ed93 7b00 	vldr	d7, [r3]
 8002c02:	05f8      	lsls	r0, r7, #23
 8002c04:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8002c08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8002c0c:	d516      	bpl.n	8002c3c <_dtoa_r+0x354>
 8002c0e:	4b97      	ldr	r3, [pc, #604]	@ (8002e6c <_dtoa_r+0x584>)
 8002c10:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002c18:	f7fd fe20 	bl	800085c <__aeabi_ddiv>
 8002c1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c20:	f004 040f 	and.w	r4, r4, #15
 8002c24:	2603      	movs	r6, #3
 8002c26:	4d91      	ldr	r5, [pc, #580]	@ (8002e6c <_dtoa_r+0x584>)
 8002c28:	b954      	cbnz	r4, 8002c40 <_dtoa_r+0x358>
 8002c2a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8002c2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002c32:	f7fd fe13 	bl	800085c <__aeabi_ddiv>
 8002c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c3a:	e028      	b.n	8002c8e <_dtoa_r+0x3a6>
 8002c3c:	2602      	movs	r6, #2
 8002c3e:	e7f2      	b.n	8002c26 <_dtoa_r+0x33e>
 8002c40:	07e1      	lsls	r1, r4, #31
 8002c42:	d508      	bpl.n	8002c56 <_dtoa_r+0x36e>
 8002c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8002c48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002c4c:	f7fd fcdc 	bl	8000608 <__aeabi_dmul>
 8002c50:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002c54:	3601      	adds	r6, #1
 8002c56:	1064      	asrs	r4, r4, #1
 8002c58:	3508      	adds	r5, #8
 8002c5a:	e7e5      	b.n	8002c28 <_dtoa_r+0x340>
 8002c5c:	f000 80af 	beq.w	8002dbe <_dtoa_r+0x4d6>
 8002c60:	427c      	negs	r4, r7
 8002c62:	4b81      	ldr	r3, [pc, #516]	@ (8002e68 <_dtoa_r+0x580>)
 8002c64:	4d81      	ldr	r5, [pc, #516]	@ (8002e6c <_dtoa_r+0x584>)
 8002c66:	f004 020f 	and.w	r2, r4, #15
 8002c6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8002c76:	f7fd fcc7 	bl	8000608 <__aeabi_dmul>
 8002c7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c7e:	1124      	asrs	r4, r4, #4
 8002c80:	2300      	movs	r3, #0
 8002c82:	2602      	movs	r6, #2
 8002c84:	2c00      	cmp	r4, #0
 8002c86:	f040 808f 	bne.w	8002da8 <_dtoa_r+0x4c0>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1d3      	bne.n	8002c36 <_dtoa_r+0x34e>
 8002c8e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8002c90:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8094 	beq.w	8002dc2 <_dtoa_r+0x4da>
 8002c9a:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <_dtoa_r+0x588>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	4620      	mov	r0, r4
 8002ca0:	4629      	mov	r1, r5
 8002ca2:	f7fd ff23 	bl	8000aec <__aeabi_dcmplt>
 8002ca6:	2800      	cmp	r0, #0
 8002ca8:	f000 808b 	beq.w	8002dc2 <_dtoa_r+0x4da>
 8002cac:	9b03      	ldr	r3, [sp, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	f000 8087 	beq.w	8002dc2 <_dtoa_r+0x4da>
 8002cb4:	f1bb 0f00 	cmp.w	fp, #0
 8002cb8:	dd34      	ble.n	8002d24 <_dtoa_r+0x43c>
 8002cba:	4620      	mov	r0, r4
 8002cbc:	4b6d      	ldr	r3, [pc, #436]	@ (8002e74 <_dtoa_r+0x58c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	f7fd fca1 	bl	8000608 <__aeabi_dmul>
 8002cc6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002cca:	f107 38ff 	add.w	r8, r7, #4294967295
 8002cce:	3601      	adds	r6, #1
 8002cd0:	465c      	mov	r4, fp
 8002cd2:	4630      	mov	r0, r6
 8002cd4:	f7fd fc2e 	bl	8000534 <__aeabi_i2d>
 8002cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002cdc:	f7fd fc94 	bl	8000608 <__aeabi_dmul>
 8002ce0:	4b65      	ldr	r3, [pc, #404]	@ (8002e78 <_dtoa_r+0x590>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f7fd fada 	bl	800029c <__adddf3>
 8002ce8:	4605      	mov	r5, r0
 8002cea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8002cee:	2c00      	cmp	r4, #0
 8002cf0:	d16a      	bne.n	8002dc8 <_dtoa_r+0x4e0>
 8002cf2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cf6:	4b61      	ldr	r3, [pc, #388]	@ (8002e7c <_dtoa_r+0x594>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f7fd facd 	bl	8000298 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002d06:	462a      	mov	r2, r5
 8002d08:	4633      	mov	r3, r6
 8002d0a:	f7fd ff0d 	bl	8000b28 <__aeabi_dcmpgt>
 8002d0e:	2800      	cmp	r0, #0
 8002d10:	f040 8298 	bne.w	8003244 <_dtoa_r+0x95c>
 8002d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002d18:	462a      	mov	r2, r5
 8002d1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8002d1e:	f7fd fee5 	bl	8000aec <__aeabi_dcmplt>
 8002d22:	bb38      	cbnz	r0, 8002d74 <_dtoa_r+0x48c>
 8002d24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8002d28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002d2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	f2c0 8157 	blt.w	8002fe2 <_dtoa_r+0x6fa>
 8002d34:	2f0e      	cmp	r7, #14
 8002d36:	f300 8154 	bgt.w	8002fe2 <_dtoa_r+0x6fa>
 8002d3a:	4b4b      	ldr	r3, [pc, #300]	@ (8002e68 <_dtoa_r+0x580>)
 8002d3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002d40:	ed93 7b00 	vldr	d7, [r3]
 8002d44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	ed8d 7b00 	vstr	d7, [sp]
 8002d4c:	f280 80e5 	bge.w	8002f1a <_dtoa_r+0x632>
 8002d50:	9b03      	ldr	r3, [sp, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	f300 80e1 	bgt.w	8002f1a <_dtoa_r+0x632>
 8002d58:	d10c      	bne.n	8002d74 <_dtoa_r+0x48c>
 8002d5a:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <_dtoa_r+0x594>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	ec51 0b17 	vmov	r0, r1, d7
 8002d62:	f7fd fc51 	bl	8000608 <__aeabi_dmul>
 8002d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002d6a:	f7fd fed3 	bl	8000b14 <__aeabi_dcmpge>
 8002d6e:	2800      	cmp	r0, #0
 8002d70:	f000 8266 	beq.w	8003240 <_dtoa_r+0x958>
 8002d74:	2400      	movs	r4, #0
 8002d76:	4625      	mov	r5, r4
 8002d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002d7a:	4656      	mov	r6, sl
 8002d7c:	ea6f 0803 	mvn.w	r8, r3
 8002d80:	2700      	movs	r7, #0
 8002d82:	4621      	mov	r1, r4
 8002d84:	4648      	mov	r0, r9
 8002d86:	f000 fcbf 	bl	8003708 <_Bfree>
 8002d8a:	2d00      	cmp	r5, #0
 8002d8c:	f000 80bd 	beq.w	8002f0a <_dtoa_r+0x622>
 8002d90:	b12f      	cbz	r7, 8002d9e <_dtoa_r+0x4b6>
 8002d92:	42af      	cmp	r7, r5
 8002d94:	d003      	beq.n	8002d9e <_dtoa_r+0x4b6>
 8002d96:	4639      	mov	r1, r7
 8002d98:	4648      	mov	r0, r9
 8002d9a:	f000 fcb5 	bl	8003708 <_Bfree>
 8002d9e:	4629      	mov	r1, r5
 8002da0:	4648      	mov	r0, r9
 8002da2:	f000 fcb1 	bl	8003708 <_Bfree>
 8002da6:	e0b0      	b.n	8002f0a <_dtoa_r+0x622>
 8002da8:	07e2      	lsls	r2, r4, #31
 8002daa:	d505      	bpl.n	8002db8 <_dtoa_r+0x4d0>
 8002dac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002db0:	f7fd fc2a 	bl	8000608 <__aeabi_dmul>
 8002db4:	3601      	adds	r6, #1
 8002db6:	2301      	movs	r3, #1
 8002db8:	1064      	asrs	r4, r4, #1
 8002dba:	3508      	adds	r5, #8
 8002dbc:	e762      	b.n	8002c84 <_dtoa_r+0x39c>
 8002dbe:	2602      	movs	r6, #2
 8002dc0:	e765      	b.n	8002c8e <_dtoa_r+0x3a6>
 8002dc2:	9c03      	ldr	r4, [sp, #12]
 8002dc4:	46b8      	mov	r8, r7
 8002dc6:	e784      	b.n	8002cd2 <_dtoa_r+0x3ea>
 8002dc8:	4b27      	ldr	r3, [pc, #156]	@ (8002e68 <_dtoa_r+0x580>)
 8002dca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002dcc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002dd0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8002dd4:	4454      	add	r4, sl
 8002dd6:	2900      	cmp	r1, #0
 8002dd8:	d054      	beq.n	8002e84 <_dtoa_r+0x59c>
 8002dda:	4929      	ldr	r1, [pc, #164]	@ (8002e80 <_dtoa_r+0x598>)
 8002ddc:	2000      	movs	r0, #0
 8002dde:	f7fd fd3d 	bl	800085c <__aeabi_ddiv>
 8002de2:	4633      	mov	r3, r6
 8002de4:	462a      	mov	r2, r5
 8002de6:	f7fd fa57 	bl	8000298 <__aeabi_dsub>
 8002dea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002dee:	4656      	mov	r6, sl
 8002df0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002df4:	f7fd feb8 	bl	8000b68 <__aeabi_d2iz>
 8002df8:	4605      	mov	r5, r0
 8002dfa:	f7fd fb9b 	bl	8000534 <__aeabi_i2d>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	460b      	mov	r3, r1
 8002e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e06:	f7fd fa47 	bl	8000298 <__aeabi_dsub>
 8002e0a:	3530      	adds	r5, #48	@ 0x30
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e14:	f806 5b01 	strb.w	r5, [r6], #1
 8002e18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8002e1c:	f7fd fe66 	bl	8000aec <__aeabi_dcmplt>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d172      	bne.n	8002f0a <_dtoa_r+0x622>
 8002e24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002e28:	4911      	ldr	r1, [pc, #68]	@ (8002e70 <_dtoa_r+0x588>)
 8002e2a:	2000      	movs	r0, #0
 8002e2c:	f7fd fa34 	bl	8000298 <__aeabi_dsub>
 8002e30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8002e34:	f7fd fe5a 	bl	8000aec <__aeabi_dcmplt>
 8002e38:	2800      	cmp	r0, #0
 8002e3a:	f040 80b4 	bne.w	8002fa6 <_dtoa_r+0x6be>
 8002e3e:	42a6      	cmp	r6, r4
 8002e40:	f43f af70 	beq.w	8002d24 <_dtoa_r+0x43c>
 8002e44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <_dtoa_r+0x58c>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f7fd fbdc 	bl	8000608 <__aeabi_dmul>
 8002e50:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <_dtoa_r+0x58c>)
 8002e52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002e56:	2200      	movs	r2, #0
 8002e58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e5c:	f7fd fbd4 	bl	8000608 <__aeabi_dmul>
 8002e60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002e64:	e7c4      	b.n	8002df0 <_dtoa_r+0x508>
 8002e66:	bf00      	nop
 8002e68:	08004a48 	.word	0x08004a48
 8002e6c:	08004a20 	.word	0x08004a20
 8002e70:	3ff00000 	.word	0x3ff00000
 8002e74:	40240000 	.word	0x40240000
 8002e78:	401c0000 	.word	0x401c0000
 8002e7c:	40140000 	.word	0x40140000
 8002e80:	3fe00000 	.word	0x3fe00000
 8002e84:	4631      	mov	r1, r6
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd fbbe 	bl	8000608 <__aeabi_dmul>
 8002e8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8002e90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8002e92:	4656      	mov	r6, sl
 8002e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002e98:	f7fd fe66 	bl	8000b68 <__aeabi_d2iz>
 8002e9c:	4605      	mov	r5, r0
 8002e9e:	f7fd fb49 	bl	8000534 <__aeabi_i2d>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002eaa:	f7fd f9f5 	bl	8000298 <__aeabi_dsub>
 8002eae:	3530      	adds	r5, #48	@ 0x30
 8002eb0:	f806 5b01 	strb.w	r5, [r6], #1
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	42a6      	cmp	r6, r4
 8002eba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	d124      	bne.n	8002f0e <_dtoa_r+0x626>
 8002ec4:	4baf      	ldr	r3, [pc, #700]	@ (8003184 <_dtoa_r+0x89c>)
 8002ec6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8002eca:	f7fd f9e7 	bl	800029c <__adddf3>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ed6:	f7fd fe27 	bl	8000b28 <__aeabi_dcmpgt>
 8002eda:	2800      	cmp	r0, #0
 8002edc:	d163      	bne.n	8002fa6 <_dtoa_r+0x6be>
 8002ede:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8002ee2:	49a8      	ldr	r1, [pc, #672]	@ (8003184 <_dtoa_r+0x89c>)
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	f7fd f9d7 	bl	8000298 <__aeabi_dsub>
 8002eea:	4602      	mov	r2, r0
 8002eec:	460b      	mov	r3, r1
 8002eee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ef2:	f7fd fdfb 	bl	8000aec <__aeabi_dcmplt>
 8002ef6:	2800      	cmp	r0, #0
 8002ef8:	f43f af14 	beq.w	8002d24 <_dtoa_r+0x43c>
 8002efc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8002efe:	1e73      	subs	r3, r6, #1
 8002f00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8002f02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8002f06:	2b30      	cmp	r3, #48	@ 0x30
 8002f08:	d0f8      	beq.n	8002efc <_dtoa_r+0x614>
 8002f0a:	4647      	mov	r7, r8
 8002f0c:	e03b      	b.n	8002f86 <_dtoa_r+0x69e>
 8002f0e:	4b9e      	ldr	r3, [pc, #632]	@ (8003188 <_dtoa_r+0x8a0>)
 8002f10:	f7fd fb7a 	bl	8000608 <__aeabi_dmul>
 8002f14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002f18:	e7bc      	b.n	8002e94 <_dtoa_r+0x5ac>
 8002f1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8002f1e:	4656      	mov	r6, sl
 8002f20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7fd fc98 	bl	800085c <__aeabi_ddiv>
 8002f2c:	f7fd fe1c 	bl	8000b68 <__aeabi_d2iz>
 8002f30:	4680      	mov	r8, r0
 8002f32:	f7fd faff 	bl	8000534 <__aeabi_i2d>
 8002f36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f3a:	f7fd fb65 	bl	8000608 <__aeabi_dmul>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8002f4a:	f7fd f9a5 	bl	8000298 <__aeabi_dsub>
 8002f4e:	f806 4b01 	strb.w	r4, [r6], #1
 8002f52:	9d03      	ldr	r5, [sp, #12]
 8002f54:	eba6 040a 	sub.w	r4, r6, sl
 8002f58:	42a5      	cmp	r5, r4
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	d133      	bne.n	8002fc8 <_dtoa_r+0x6e0>
 8002f60:	f7fd f99c 	bl	800029c <__adddf3>
 8002f64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f68:	4604      	mov	r4, r0
 8002f6a:	460d      	mov	r5, r1
 8002f6c:	f7fd fddc 	bl	8000b28 <__aeabi_dcmpgt>
 8002f70:	b9c0      	cbnz	r0, 8002fa4 <_dtoa_r+0x6bc>
 8002f72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002f76:	4620      	mov	r0, r4
 8002f78:	4629      	mov	r1, r5
 8002f7a:	f7fd fdad 	bl	8000ad8 <__aeabi_dcmpeq>
 8002f7e:	b110      	cbz	r0, 8002f86 <_dtoa_r+0x69e>
 8002f80:	f018 0f01 	tst.w	r8, #1
 8002f84:	d10e      	bne.n	8002fa4 <_dtoa_r+0x6bc>
 8002f86:	9902      	ldr	r1, [sp, #8]
 8002f88:	4648      	mov	r0, r9
 8002f8a:	f000 fbbd 	bl	8003708 <_Bfree>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	7033      	strb	r3, [r6, #0]
 8002f92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8002f94:	3701      	adds	r7, #1
 8002f96:	601f      	str	r7, [r3, #0]
 8002f98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	f000 824b 	beq.w	8003436 <_dtoa_r+0xb4e>
 8002fa0:	601e      	str	r6, [r3, #0]
 8002fa2:	e248      	b.n	8003436 <_dtoa_r+0xb4e>
 8002fa4:	46b8      	mov	r8, r7
 8002fa6:	4633      	mov	r3, r6
 8002fa8:	461e      	mov	r6, r3
 8002faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8002fae:	2a39      	cmp	r2, #57	@ 0x39
 8002fb0:	d106      	bne.n	8002fc0 <_dtoa_r+0x6d8>
 8002fb2:	459a      	cmp	sl, r3
 8002fb4:	d1f8      	bne.n	8002fa8 <_dtoa_r+0x6c0>
 8002fb6:	2230      	movs	r2, #48	@ 0x30
 8002fb8:	f108 0801 	add.w	r8, r8, #1
 8002fbc:	f88a 2000 	strb.w	r2, [sl]
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	3201      	adds	r2, #1
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	e7a0      	b.n	8002f0a <_dtoa_r+0x622>
 8002fc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003188 <_dtoa_r+0x8a0>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f7fd fb1c 	bl	8000608 <__aeabi_dmul>
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	4604      	mov	r4, r0
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	f7fd fd7e 	bl	8000ad8 <__aeabi_dcmpeq>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d09f      	beq.n	8002f20 <_dtoa_r+0x638>
 8002fe0:	e7d1      	b.n	8002f86 <_dtoa_r+0x69e>
 8002fe2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002fe4:	2a00      	cmp	r2, #0
 8002fe6:	f000 80ea 	beq.w	80031be <_dtoa_r+0x8d6>
 8002fea:	9a07      	ldr	r2, [sp, #28]
 8002fec:	2a01      	cmp	r2, #1
 8002fee:	f300 80cd 	bgt.w	800318c <_dtoa_r+0x8a4>
 8002ff2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8002ff4:	2a00      	cmp	r2, #0
 8002ff6:	f000 80c1 	beq.w	800317c <_dtoa_r+0x894>
 8002ffa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8002ffe:	9c08      	ldr	r4, [sp, #32]
 8003000:	9e00      	ldr	r6, [sp, #0]
 8003002:	9a00      	ldr	r2, [sp, #0]
 8003004:	441a      	add	r2, r3
 8003006:	9200      	str	r2, [sp, #0]
 8003008:	9a06      	ldr	r2, [sp, #24]
 800300a:	2101      	movs	r1, #1
 800300c:	441a      	add	r2, r3
 800300e:	4648      	mov	r0, r9
 8003010:	9206      	str	r2, [sp, #24]
 8003012:	f000 fc2d 	bl	8003870 <__i2b>
 8003016:	4605      	mov	r5, r0
 8003018:	b166      	cbz	r6, 8003034 <_dtoa_r+0x74c>
 800301a:	9b06      	ldr	r3, [sp, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	dd09      	ble.n	8003034 <_dtoa_r+0x74c>
 8003020:	42b3      	cmp	r3, r6
 8003022:	9a00      	ldr	r2, [sp, #0]
 8003024:	bfa8      	it	ge
 8003026:	4633      	movge	r3, r6
 8003028:	1ad2      	subs	r2, r2, r3
 800302a:	9200      	str	r2, [sp, #0]
 800302c:	9a06      	ldr	r2, [sp, #24]
 800302e:	1af6      	subs	r6, r6, r3
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	9306      	str	r3, [sp, #24]
 8003034:	9b08      	ldr	r3, [sp, #32]
 8003036:	b30b      	cbz	r3, 800307c <_dtoa_r+0x794>
 8003038:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80c6 	beq.w	80031cc <_dtoa_r+0x8e4>
 8003040:	2c00      	cmp	r4, #0
 8003042:	f000 80c0 	beq.w	80031c6 <_dtoa_r+0x8de>
 8003046:	4629      	mov	r1, r5
 8003048:	4622      	mov	r2, r4
 800304a:	4648      	mov	r0, r9
 800304c:	f000 fcc8 	bl	80039e0 <__pow5mult>
 8003050:	9a02      	ldr	r2, [sp, #8]
 8003052:	4601      	mov	r1, r0
 8003054:	4605      	mov	r5, r0
 8003056:	4648      	mov	r0, r9
 8003058:	f000 fc20 	bl	800389c <__multiply>
 800305c:	9902      	ldr	r1, [sp, #8]
 800305e:	4680      	mov	r8, r0
 8003060:	4648      	mov	r0, r9
 8003062:	f000 fb51 	bl	8003708 <_Bfree>
 8003066:	9b08      	ldr	r3, [sp, #32]
 8003068:	1b1b      	subs	r3, r3, r4
 800306a:	9308      	str	r3, [sp, #32]
 800306c:	f000 80b1 	beq.w	80031d2 <_dtoa_r+0x8ea>
 8003070:	9a08      	ldr	r2, [sp, #32]
 8003072:	4641      	mov	r1, r8
 8003074:	4648      	mov	r0, r9
 8003076:	f000 fcb3 	bl	80039e0 <__pow5mult>
 800307a:	9002      	str	r0, [sp, #8]
 800307c:	2101      	movs	r1, #1
 800307e:	4648      	mov	r0, r9
 8003080:	f000 fbf6 	bl	8003870 <__i2b>
 8003084:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003086:	4604      	mov	r4, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 81d8 	beq.w	800343e <_dtoa_r+0xb56>
 800308e:	461a      	mov	r2, r3
 8003090:	4601      	mov	r1, r0
 8003092:	4648      	mov	r0, r9
 8003094:	f000 fca4 	bl	80039e0 <__pow5mult>
 8003098:	9b07      	ldr	r3, [sp, #28]
 800309a:	2b01      	cmp	r3, #1
 800309c:	4604      	mov	r4, r0
 800309e:	f300 809f 	bgt.w	80031e0 <_dtoa_r+0x8f8>
 80030a2:	9b04      	ldr	r3, [sp, #16]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 8097 	bne.w	80031d8 <_dtoa_r+0x8f0>
 80030aa:	9b05      	ldr	r3, [sp, #20]
 80030ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f040 8093 	bne.w	80031dc <_dtoa_r+0x8f4>
 80030b6:	9b05      	ldr	r3, [sp, #20]
 80030b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80030bc:	0d1b      	lsrs	r3, r3, #20
 80030be:	051b      	lsls	r3, r3, #20
 80030c0:	b133      	cbz	r3, 80030d0 <_dtoa_r+0x7e8>
 80030c2:	9b00      	ldr	r3, [sp, #0]
 80030c4:	3301      	adds	r3, #1
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	9b06      	ldr	r3, [sp, #24]
 80030ca:	3301      	adds	r3, #1
 80030cc:	9306      	str	r3, [sp, #24]
 80030ce:	2301      	movs	r3, #1
 80030d0:	9308      	str	r3, [sp, #32]
 80030d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 81b8 	beq.w	800344a <_dtoa_r+0xb62>
 80030da:	6923      	ldr	r3, [r4, #16]
 80030dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80030e0:	6918      	ldr	r0, [r3, #16]
 80030e2:	f000 fb79 	bl	80037d8 <__hi0bits>
 80030e6:	f1c0 0020 	rsb	r0, r0, #32
 80030ea:	9b06      	ldr	r3, [sp, #24]
 80030ec:	4418      	add	r0, r3
 80030ee:	f010 001f 	ands.w	r0, r0, #31
 80030f2:	f000 8082 	beq.w	80031fa <_dtoa_r+0x912>
 80030f6:	f1c0 0320 	rsb	r3, r0, #32
 80030fa:	2b04      	cmp	r3, #4
 80030fc:	dd73      	ble.n	80031e6 <_dtoa_r+0x8fe>
 80030fe:	9b00      	ldr	r3, [sp, #0]
 8003100:	f1c0 001c 	rsb	r0, r0, #28
 8003104:	4403      	add	r3, r0
 8003106:	9300      	str	r3, [sp, #0]
 8003108:	9b06      	ldr	r3, [sp, #24]
 800310a:	4403      	add	r3, r0
 800310c:	4406      	add	r6, r0
 800310e:	9306      	str	r3, [sp, #24]
 8003110:	9b00      	ldr	r3, [sp, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	dd05      	ble.n	8003122 <_dtoa_r+0x83a>
 8003116:	9902      	ldr	r1, [sp, #8]
 8003118:	461a      	mov	r2, r3
 800311a:	4648      	mov	r0, r9
 800311c:	f000 fcba 	bl	8003a94 <__lshift>
 8003120:	9002      	str	r0, [sp, #8]
 8003122:	9b06      	ldr	r3, [sp, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	dd05      	ble.n	8003134 <_dtoa_r+0x84c>
 8003128:	4621      	mov	r1, r4
 800312a:	461a      	mov	r2, r3
 800312c:	4648      	mov	r0, r9
 800312e:	f000 fcb1 	bl	8003a94 <__lshift>
 8003132:	4604      	mov	r4, r0
 8003134:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d061      	beq.n	80031fe <_dtoa_r+0x916>
 800313a:	9802      	ldr	r0, [sp, #8]
 800313c:	4621      	mov	r1, r4
 800313e:	f000 fd15 	bl	8003b6c <__mcmp>
 8003142:	2800      	cmp	r0, #0
 8003144:	da5b      	bge.n	80031fe <_dtoa_r+0x916>
 8003146:	2300      	movs	r3, #0
 8003148:	9902      	ldr	r1, [sp, #8]
 800314a:	220a      	movs	r2, #10
 800314c:	4648      	mov	r0, r9
 800314e:	f000 fafd 	bl	800374c <__multadd>
 8003152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003154:	9002      	str	r0, [sp, #8]
 8003156:	f107 38ff 	add.w	r8, r7, #4294967295
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 8177 	beq.w	800344e <_dtoa_r+0xb66>
 8003160:	4629      	mov	r1, r5
 8003162:	2300      	movs	r3, #0
 8003164:	220a      	movs	r2, #10
 8003166:	4648      	mov	r0, r9
 8003168:	f000 faf0 	bl	800374c <__multadd>
 800316c:	f1bb 0f00 	cmp.w	fp, #0
 8003170:	4605      	mov	r5, r0
 8003172:	dc6f      	bgt.n	8003254 <_dtoa_r+0x96c>
 8003174:	9b07      	ldr	r3, [sp, #28]
 8003176:	2b02      	cmp	r3, #2
 8003178:	dc49      	bgt.n	800320e <_dtoa_r+0x926>
 800317a:	e06b      	b.n	8003254 <_dtoa_r+0x96c>
 800317c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800317e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8003182:	e73c      	b.n	8002ffe <_dtoa_r+0x716>
 8003184:	3fe00000 	.word	0x3fe00000
 8003188:	40240000 	.word	0x40240000
 800318c:	9b03      	ldr	r3, [sp, #12]
 800318e:	1e5c      	subs	r4, r3, #1
 8003190:	9b08      	ldr	r3, [sp, #32]
 8003192:	42a3      	cmp	r3, r4
 8003194:	db09      	blt.n	80031aa <_dtoa_r+0x8c2>
 8003196:	1b1c      	subs	r4, r3, r4
 8003198:	9b03      	ldr	r3, [sp, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	f6bf af30 	bge.w	8003000 <_dtoa_r+0x718>
 80031a0:	9b00      	ldr	r3, [sp, #0]
 80031a2:	9a03      	ldr	r2, [sp, #12]
 80031a4:	1a9e      	subs	r6, r3, r2
 80031a6:	2300      	movs	r3, #0
 80031a8:	e72b      	b.n	8003002 <_dtoa_r+0x71a>
 80031aa:	9b08      	ldr	r3, [sp, #32]
 80031ac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80031ae:	9408      	str	r4, [sp, #32]
 80031b0:	1ae3      	subs	r3, r4, r3
 80031b2:	441a      	add	r2, r3
 80031b4:	9e00      	ldr	r6, [sp, #0]
 80031b6:	9b03      	ldr	r3, [sp, #12]
 80031b8:	920d      	str	r2, [sp, #52]	@ 0x34
 80031ba:	2400      	movs	r4, #0
 80031bc:	e721      	b.n	8003002 <_dtoa_r+0x71a>
 80031be:	9c08      	ldr	r4, [sp, #32]
 80031c0:	9e00      	ldr	r6, [sp, #0]
 80031c2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80031c4:	e728      	b.n	8003018 <_dtoa_r+0x730>
 80031c6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80031ca:	e751      	b.n	8003070 <_dtoa_r+0x788>
 80031cc:	9a08      	ldr	r2, [sp, #32]
 80031ce:	9902      	ldr	r1, [sp, #8]
 80031d0:	e750      	b.n	8003074 <_dtoa_r+0x78c>
 80031d2:	f8cd 8008 	str.w	r8, [sp, #8]
 80031d6:	e751      	b.n	800307c <_dtoa_r+0x794>
 80031d8:	2300      	movs	r3, #0
 80031da:	e779      	b.n	80030d0 <_dtoa_r+0x7e8>
 80031dc:	9b04      	ldr	r3, [sp, #16]
 80031de:	e777      	b.n	80030d0 <_dtoa_r+0x7e8>
 80031e0:	2300      	movs	r3, #0
 80031e2:	9308      	str	r3, [sp, #32]
 80031e4:	e779      	b.n	80030da <_dtoa_r+0x7f2>
 80031e6:	d093      	beq.n	8003110 <_dtoa_r+0x828>
 80031e8:	9a00      	ldr	r2, [sp, #0]
 80031ea:	331c      	adds	r3, #28
 80031ec:	441a      	add	r2, r3
 80031ee:	9200      	str	r2, [sp, #0]
 80031f0:	9a06      	ldr	r2, [sp, #24]
 80031f2:	441a      	add	r2, r3
 80031f4:	441e      	add	r6, r3
 80031f6:	9206      	str	r2, [sp, #24]
 80031f8:	e78a      	b.n	8003110 <_dtoa_r+0x828>
 80031fa:	4603      	mov	r3, r0
 80031fc:	e7f4      	b.n	80031e8 <_dtoa_r+0x900>
 80031fe:	9b03      	ldr	r3, [sp, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	46b8      	mov	r8, r7
 8003204:	dc20      	bgt.n	8003248 <_dtoa_r+0x960>
 8003206:	469b      	mov	fp, r3
 8003208:	9b07      	ldr	r3, [sp, #28]
 800320a:	2b02      	cmp	r3, #2
 800320c:	dd1e      	ble.n	800324c <_dtoa_r+0x964>
 800320e:	f1bb 0f00 	cmp.w	fp, #0
 8003212:	f47f adb1 	bne.w	8002d78 <_dtoa_r+0x490>
 8003216:	4621      	mov	r1, r4
 8003218:	465b      	mov	r3, fp
 800321a:	2205      	movs	r2, #5
 800321c:	4648      	mov	r0, r9
 800321e:	f000 fa95 	bl	800374c <__multadd>
 8003222:	4601      	mov	r1, r0
 8003224:	4604      	mov	r4, r0
 8003226:	9802      	ldr	r0, [sp, #8]
 8003228:	f000 fca0 	bl	8003b6c <__mcmp>
 800322c:	2800      	cmp	r0, #0
 800322e:	f77f ada3 	ble.w	8002d78 <_dtoa_r+0x490>
 8003232:	4656      	mov	r6, sl
 8003234:	2331      	movs	r3, #49	@ 0x31
 8003236:	f806 3b01 	strb.w	r3, [r6], #1
 800323a:	f108 0801 	add.w	r8, r8, #1
 800323e:	e59f      	b.n	8002d80 <_dtoa_r+0x498>
 8003240:	9c03      	ldr	r4, [sp, #12]
 8003242:	46b8      	mov	r8, r7
 8003244:	4625      	mov	r5, r4
 8003246:	e7f4      	b.n	8003232 <_dtoa_r+0x94a>
 8003248:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800324c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800324e:	2b00      	cmp	r3, #0
 8003250:	f000 8101 	beq.w	8003456 <_dtoa_r+0xb6e>
 8003254:	2e00      	cmp	r6, #0
 8003256:	dd05      	ble.n	8003264 <_dtoa_r+0x97c>
 8003258:	4629      	mov	r1, r5
 800325a:	4632      	mov	r2, r6
 800325c:	4648      	mov	r0, r9
 800325e:	f000 fc19 	bl	8003a94 <__lshift>
 8003262:	4605      	mov	r5, r0
 8003264:	9b08      	ldr	r3, [sp, #32]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d05c      	beq.n	8003324 <_dtoa_r+0xa3c>
 800326a:	6869      	ldr	r1, [r5, #4]
 800326c:	4648      	mov	r0, r9
 800326e:	f000 fa0b 	bl	8003688 <_Balloc>
 8003272:	4606      	mov	r6, r0
 8003274:	b928      	cbnz	r0, 8003282 <_dtoa_r+0x99a>
 8003276:	4b82      	ldr	r3, [pc, #520]	@ (8003480 <_dtoa_r+0xb98>)
 8003278:	4602      	mov	r2, r0
 800327a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800327e:	f7ff bb4a 	b.w	8002916 <_dtoa_r+0x2e>
 8003282:	692a      	ldr	r2, [r5, #16]
 8003284:	3202      	adds	r2, #2
 8003286:	0092      	lsls	r2, r2, #2
 8003288:	f105 010c 	add.w	r1, r5, #12
 800328c:	300c      	adds	r0, #12
 800328e:	f000 ffa3 	bl	80041d8 <memcpy>
 8003292:	2201      	movs	r2, #1
 8003294:	4631      	mov	r1, r6
 8003296:	4648      	mov	r0, r9
 8003298:	f000 fbfc 	bl	8003a94 <__lshift>
 800329c:	f10a 0301 	add.w	r3, sl, #1
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	eb0a 030b 	add.w	r3, sl, fp
 80032a6:	9308      	str	r3, [sp, #32]
 80032a8:	9b04      	ldr	r3, [sp, #16]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	462f      	mov	r7, r5
 80032b0:	9306      	str	r3, [sp, #24]
 80032b2:	4605      	mov	r5, r0
 80032b4:	9b00      	ldr	r3, [sp, #0]
 80032b6:	9802      	ldr	r0, [sp, #8]
 80032b8:	4621      	mov	r1, r4
 80032ba:	f103 3bff 	add.w	fp, r3, #4294967295
 80032be:	f7ff fa8a 	bl	80027d6 <quorem>
 80032c2:	4603      	mov	r3, r0
 80032c4:	3330      	adds	r3, #48	@ 0x30
 80032c6:	9003      	str	r0, [sp, #12]
 80032c8:	4639      	mov	r1, r7
 80032ca:	9802      	ldr	r0, [sp, #8]
 80032cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80032ce:	f000 fc4d 	bl	8003b6c <__mcmp>
 80032d2:	462a      	mov	r2, r5
 80032d4:	9004      	str	r0, [sp, #16]
 80032d6:	4621      	mov	r1, r4
 80032d8:	4648      	mov	r0, r9
 80032da:	f000 fc63 	bl	8003ba4 <__mdiff>
 80032de:	68c2      	ldr	r2, [r0, #12]
 80032e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032e2:	4606      	mov	r6, r0
 80032e4:	bb02      	cbnz	r2, 8003328 <_dtoa_r+0xa40>
 80032e6:	4601      	mov	r1, r0
 80032e8:	9802      	ldr	r0, [sp, #8]
 80032ea:	f000 fc3f 	bl	8003b6c <__mcmp>
 80032ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80032f0:	4602      	mov	r2, r0
 80032f2:	4631      	mov	r1, r6
 80032f4:	4648      	mov	r0, r9
 80032f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80032f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80032fa:	f000 fa05 	bl	8003708 <_Bfree>
 80032fe:	9b07      	ldr	r3, [sp, #28]
 8003300:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8003302:	9e00      	ldr	r6, [sp, #0]
 8003304:	ea42 0103 	orr.w	r1, r2, r3
 8003308:	9b06      	ldr	r3, [sp, #24]
 800330a:	4319      	orrs	r1, r3
 800330c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800330e:	d10d      	bne.n	800332c <_dtoa_r+0xa44>
 8003310:	2b39      	cmp	r3, #57	@ 0x39
 8003312:	d027      	beq.n	8003364 <_dtoa_r+0xa7c>
 8003314:	9a04      	ldr	r2, [sp, #16]
 8003316:	2a00      	cmp	r2, #0
 8003318:	dd01      	ble.n	800331e <_dtoa_r+0xa36>
 800331a:	9b03      	ldr	r3, [sp, #12]
 800331c:	3331      	adds	r3, #49	@ 0x31
 800331e:	f88b 3000 	strb.w	r3, [fp]
 8003322:	e52e      	b.n	8002d82 <_dtoa_r+0x49a>
 8003324:	4628      	mov	r0, r5
 8003326:	e7b9      	b.n	800329c <_dtoa_r+0x9b4>
 8003328:	2201      	movs	r2, #1
 800332a:	e7e2      	b.n	80032f2 <_dtoa_r+0xa0a>
 800332c:	9904      	ldr	r1, [sp, #16]
 800332e:	2900      	cmp	r1, #0
 8003330:	db04      	blt.n	800333c <_dtoa_r+0xa54>
 8003332:	9807      	ldr	r0, [sp, #28]
 8003334:	4301      	orrs	r1, r0
 8003336:	9806      	ldr	r0, [sp, #24]
 8003338:	4301      	orrs	r1, r0
 800333a:	d120      	bne.n	800337e <_dtoa_r+0xa96>
 800333c:	2a00      	cmp	r2, #0
 800333e:	ddee      	ble.n	800331e <_dtoa_r+0xa36>
 8003340:	9902      	ldr	r1, [sp, #8]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2201      	movs	r2, #1
 8003346:	4648      	mov	r0, r9
 8003348:	f000 fba4 	bl	8003a94 <__lshift>
 800334c:	4621      	mov	r1, r4
 800334e:	9002      	str	r0, [sp, #8]
 8003350:	f000 fc0c 	bl	8003b6c <__mcmp>
 8003354:	2800      	cmp	r0, #0
 8003356:	9b00      	ldr	r3, [sp, #0]
 8003358:	dc02      	bgt.n	8003360 <_dtoa_r+0xa78>
 800335a:	d1e0      	bne.n	800331e <_dtoa_r+0xa36>
 800335c:	07da      	lsls	r2, r3, #31
 800335e:	d5de      	bpl.n	800331e <_dtoa_r+0xa36>
 8003360:	2b39      	cmp	r3, #57	@ 0x39
 8003362:	d1da      	bne.n	800331a <_dtoa_r+0xa32>
 8003364:	2339      	movs	r3, #57	@ 0x39
 8003366:	f88b 3000 	strb.w	r3, [fp]
 800336a:	4633      	mov	r3, r6
 800336c:	461e      	mov	r6, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8003374:	2a39      	cmp	r2, #57	@ 0x39
 8003376:	d04e      	beq.n	8003416 <_dtoa_r+0xb2e>
 8003378:	3201      	adds	r2, #1
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e501      	b.n	8002d82 <_dtoa_r+0x49a>
 800337e:	2a00      	cmp	r2, #0
 8003380:	dd03      	ble.n	800338a <_dtoa_r+0xaa2>
 8003382:	2b39      	cmp	r3, #57	@ 0x39
 8003384:	d0ee      	beq.n	8003364 <_dtoa_r+0xa7c>
 8003386:	3301      	adds	r3, #1
 8003388:	e7c9      	b.n	800331e <_dtoa_r+0xa36>
 800338a:	9a00      	ldr	r2, [sp, #0]
 800338c:	9908      	ldr	r1, [sp, #32]
 800338e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8003392:	428a      	cmp	r2, r1
 8003394:	d028      	beq.n	80033e8 <_dtoa_r+0xb00>
 8003396:	9902      	ldr	r1, [sp, #8]
 8003398:	2300      	movs	r3, #0
 800339a:	220a      	movs	r2, #10
 800339c:	4648      	mov	r0, r9
 800339e:	f000 f9d5 	bl	800374c <__multadd>
 80033a2:	42af      	cmp	r7, r5
 80033a4:	9002      	str	r0, [sp, #8]
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	f04f 020a 	mov.w	r2, #10
 80033ae:	4639      	mov	r1, r7
 80033b0:	4648      	mov	r0, r9
 80033b2:	d107      	bne.n	80033c4 <_dtoa_r+0xadc>
 80033b4:	f000 f9ca 	bl	800374c <__multadd>
 80033b8:	4607      	mov	r7, r0
 80033ba:	4605      	mov	r5, r0
 80033bc:	9b00      	ldr	r3, [sp, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	e777      	b.n	80032b4 <_dtoa_r+0x9cc>
 80033c4:	f000 f9c2 	bl	800374c <__multadd>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4607      	mov	r7, r0
 80033cc:	2300      	movs	r3, #0
 80033ce:	220a      	movs	r2, #10
 80033d0:	4648      	mov	r0, r9
 80033d2:	f000 f9bb 	bl	800374c <__multadd>
 80033d6:	4605      	mov	r5, r0
 80033d8:	e7f0      	b.n	80033bc <_dtoa_r+0xad4>
 80033da:	f1bb 0f00 	cmp.w	fp, #0
 80033de:	bfcc      	ite	gt
 80033e0:	465e      	movgt	r6, fp
 80033e2:	2601      	movle	r6, #1
 80033e4:	4456      	add	r6, sl
 80033e6:	2700      	movs	r7, #0
 80033e8:	9902      	ldr	r1, [sp, #8]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4648      	mov	r0, r9
 80033f0:	f000 fb50 	bl	8003a94 <__lshift>
 80033f4:	4621      	mov	r1, r4
 80033f6:	9002      	str	r0, [sp, #8]
 80033f8:	f000 fbb8 	bl	8003b6c <__mcmp>
 80033fc:	2800      	cmp	r0, #0
 80033fe:	dcb4      	bgt.n	800336a <_dtoa_r+0xa82>
 8003400:	d102      	bne.n	8003408 <_dtoa_r+0xb20>
 8003402:	9b00      	ldr	r3, [sp, #0]
 8003404:	07db      	lsls	r3, r3, #31
 8003406:	d4b0      	bmi.n	800336a <_dtoa_r+0xa82>
 8003408:	4633      	mov	r3, r6
 800340a:	461e      	mov	r6, r3
 800340c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8003410:	2a30      	cmp	r2, #48	@ 0x30
 8003412:	d0fa      	beq.n	800340a <_dtoa_r+0xb22>
 8003414:	e4b5      	b.n	8002d82 <_dtoa_r+0x49a>
 8003416:	459a      	cmp	sl, r3
 8003418:	d1a8      	bne.n	800336c <_dtoa_r+0xa84>
 800341a:	2331      	movs	r3, #49	@ 0x31
 800341c:	f108 0801 	add.w	r8, r8, #1
 8003420:	f88a 3000 	strb.w	r3, [sl]
 8003424:	e4ad      	b.n	8002d82 <_dtoa_r+0x49a>
 8003426:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8003428:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8003484 <_dtoa_r+0xb9c>
 800342c:	b11b      	cbz	r3, 8003436 <_dtoa_r+0xb4e>
 800342e:	f10a 0308 	add.w	r3, sl, #8
 8003432:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4650      	mov	r0, sl
 8003438:	b017      	add	sp, #92	@ 0x5c
 800343a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800343e:	9b07      	ldr	r3, [sp, #28]
 8003440:	2b01      	cmp	r3, #1
 8003442:	f77f ae2e 	ble.w	80030a2 <_dtoa_r+0x7ba>
 8003446:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003448:	9308      	str	r3, [sp, #32]
 800344a:	2001      	movs	r0, #1
 800344c:	e64d      	b.n	80030ea <_dtoa_r+0x802>
 800344e:	f1bb 0f00 	cmp.w	fp, #0
 8003452:	f77f aed9 	ble.w	8003208 <_dtoa_r+0x920>
 8003456:	4656      	mov	r6, sl
 8003458:	9802      	ldr	r0, [sp, #8]
 800345a:	4621      	mov	r1, r4
 800345c:	f7ff f9bb 	bl	80027d6 <quorem>
 8003460:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8003464:	f806 3b01 	strb.w	r3, [r6], #1
 8003468:	eba6 020a 	sub.w	r2, r6, sl
 800346c:	4593      	cmp	fp, r2
 800346e:	ddb4      	ble.n	80033da <_dtoa_r+0xaf2>
 8003470:	9902      	ldr	r1, [sp, #8]
 8003472:	2300      	movs	r3, #0
 8003474:	220a      	movs	r2, #10
 8003476:	4648      	mov	r0, r9
 8003478:	f000 f968 	bl	800374c <__multadd>
 800347c:	9002      	str	r0, [sp, #8]
 800347e:	e7eb      	b.n	8003458 <_dtoa_r+0xb70>
 8003480:	08004953 	.word	0x08004953
 8003484:	080048d7 	.word	0x080048d7

08003488 <_free_r>:
 8003488:	b538      	push	{r3, r4, r5, lr}
 800348a:	4605      	mov	r5, r0
 800348c:	2900      	cmp	r1, #0
 800348e:	d041      	beq.n	8003514 <_free_r+0x8c>
 8003490:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003494:	1f0c      	subs	r4, r1, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	bfb8      	it	lt
 800349a:	18e4      	addlt	r4, r4, r3
 800349c:	f000 f8e8 	bl	8003670 <__malloc_lock>
 80034a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003518 <_free_r+0x90>)
 80034a2:	6813      	ldr	r3, [r2, #0]
 80034a4:	b933      	cbnz	r3, 80034b4 <_free_r+0x2c>
 80034a6:	6063      	str	r3, [r4, #4]
 80034a8:	6014      	str	r4, [r2, #0]
 80034aa:	4628      	mov	r0, r5
 80034ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034b0:	f000 b8e4 	b.w	800367c <__malloc_unlock>
 80034b4:	42a3      	cmp	r3, r4
 80034b6:	d908      	bls.n	80034ca <_free_r+0x42>
 80034b8:	6820      	ldr	r0, [r4, #0]
 80034ba:	1821      	adds	r1, r4, r0
 80034bc:	428b      	cmp	r3, r1
 80034be:	bf01      	itttt	eq
 80034c0:	6819      	ldreq	r1, [r3, #0]
 80034c2:	685b      	ldreq	r3, [r3, #4]
 80034c4:	1809      	addeq	r1, r1, r0
 80034c6:	6021      	streq	r1, [r4, #0]
 80034c8:	e7ed      	b.n	80034a6 <_free_r+0x1e>
 80034ca:	461a      	mov	r2, r3
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	b10b      	cbz	r3, 80034d4 <_free_r+0x4c>
 80034d0:	42a3      	cmp	r3, r4
 80034d2:	d9fa      	bls.n	80034ca <_free_r+0x42>
 80034d4:	6811      	ldr	r1, [r2, #0]
 80034d6:	1850      	adds	r0, r2, r1
 80034d8:	42a0      	cmp	r0, r4
 80034da:	d10b      	bne.n	80034f4 <_free_r+0x6c>
 80034dc:	6820      	ldr	r0, [r4, #0]
 80034de:	4401      	add	r1, r0
 80034e0:	1850      	adds	r0, r2, r1
 80034e2:	4283      	cmp	r3, r0
 80034e4:	6011      	str	r1, [r2, #0]
 80034e6:	d1e0      	bne.n	80034aa <_free_r+0x22>
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	6053      	str	r3, [r2, #4]
 80034ee:	4408      	add	r0, r1
 80034f0:	6010      	str	r0, [r2, #0]
 80034f2:	e7da      	b.n	80034aa <_free_r+0x22>
 80034f4:	d902      	bls.n	80034fc <_free_r+0x74>
 80034f6:	230c      	movs	r3, #12
 80034f8:	602b      	str	r3, [r5, #0]
 80034fa:	e7d6      	b.n	80034aa <_free_r+0x22>
 80034fc:	6820      	ldr	r0, [r4, #0]
 80034fe:	1821      	adds	r1, r4, r0
 8003500:	428b      	cmp	r3, r1
 8003502:	bf04      	itt	eq
 8003504:	6819      	ldreq	r1, [r3, #0]
 8003506:	685b      	ldreq	r3, [r3, #4]
 8003508:	6063      	str	r3, [r4, #4]
 800350a:	bf04      	itt	eq
 800350c:	1809      	addeq	r1, r1, r0
 800350e:	6021      	streq	r1, [r4, #0]
 8003510:	6054      	str	r4, [r2, #4]
 8003512:	e7ca      	b.n	80034aa <_free_r+0x22>
 8003514:	bd38      	pop	{r3, r4, r5, pc}
 8003516:	bf00      	nop
 8003518:	20000b6c 	.word	0x20000b6c

0800351c <malloc>:
 800351c:	4b02      	ldr	r3, [pc, #8]	@ (8003528 <malloc+0xc>)
 800351e:	4601      	mov	r1, r0
 8003520:	6818      	ldr	r0, [r3, #0]
 8003522:	f000 b825 	b.w	8003570 <_malloc_r>
 8003526:	bf00      	nop
 8003528:	20000818 	.word	0x20000818

0800352c <sbrk_aligned>:
 800352c:	b570      	push	{r4, r5, r6, lr}
 800352e:	4e0f      	ldr	r6, [pc, #60]	@ (800356c <sbrk_aligned+0x40>)
 8003530:	460c      	mov	r4, r1
 8003532:	6831      	ldr	r1, [r6, #0]
 8003534:	4605      	mov	r5, r0
 8003536:	b911      	cbnz	r1, 800353e <sbrk_aligned+0x12>
 8003538:	f000 fe3e 	bl	80041b8 <_sbrk_r>
 800353c:	6030      	str	r0, [r6, #0]
 800353e:	4621      	mov	r1, r4
 8003540:	4628      	mov	r0, r5
 8003542:	f000 fe39 	bl	80041b8 <_sbrk_r>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d103      	bne.n	8003552 <sbrk_aligned+0x26>
 800354a:	f04f 34ff 	mov.w	r4, #4294967295
 800354e:	4620      	mov	r0, r4
 8003550:	bd70      	pop	{r4, r5, r6, pc}
 8003552:	1cc4      	adds	r4, r0, #3
 8003554:	f024 0403 	bic.w	r4, r4, #3
 8003558:	42a0      	cmp	r0, r4
 800355a:	d0f8      	beq.n	800354e <sbrk_aligned+0x22>
 800355c:	1a21      	subs	r1, r4, r0
 800355e:	4628      	mov	r0, r5
 8003560:	f000 fe2a 	bl	80041b8 <_sbrk_r>
 8003564:	3001      	adds	r0, #1
 8003566:	d1f2      	bne.n	800354e <sbrk_aligned+0x22>
 8003568:	e7ef      	b.n	800354a <sbrk_aligned+0x1e>
 800356a:	bf00      	nop
 800356c:	20000b68 	.word	0x20000b68

08003570 <_malloc_r>:
 8003570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003574:	1ccd      	adds	r5, r1, #3
 8003576:	f025 0503 	bic.w	r5, r5, #3
 800357a:	3508      	adds	r5, #8
 800357c:	2d0c      	cmp	r5, #12
 800357e:	bf38      	it	cc
 8003580:	250c      	movcc	r5, #12
 8003582:	2d00      	cmp	r5, #0
 8003584:	4606      	mov	r6, r0
 8003586:	db01      	blt.n	800358c <_malloc_r+0x1c>
 8003588:	42a9      	cmp	r1, r5
 800358a:	d904      	bls.n	8003596 <_malloc_r+0x26>
 800358c:	230c      	movs	r3, #12
 800358e:	6033      	str	r3, [r6, #0]
 8003590:	2000      	movs	r0, #0
 8003592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800366c <_malloc_r+0xfc>
 800359a:	f000 f869 	bl	8003670 <__malloc_lock>
 800359e:	f8d8 3000 	ldr.w	r3, [r8]
 80035a2:	461c      	mov	r4, r3
 80035a4:	bb44      	cbnz	r4, 80035f8 <_malloc_r+0x88>
 80035a6:	4629      	mov	r1, r5
 80035a8:	4630      	mov	r0, r6
 80035aa:	f7ff ffbf 	bl	800352c <sbrk_aligned>
 80035ae:	1c43      	adds	r3, r0, #1
 80035b0:	4604      	mov	r4, r0
 80035b2:	d158      	bne.n	8003666 <_malloc_r+0xf6>
 80035b4:	f8d8 4000 	ldr.w	r4, [r8]
 80035b8:	4627      	mov	r7, r4
 80035ba:	2f00      	cmp	r7, #0
 80035bc:	d143      	bne.n	8003646 <_malloc_r+0xd6>
 80035be:	2c00      	cmp	r4, #0
 80035c0:	d04b      	beq.n	800365a <_malloc_r+0xea>
 80035c2:	6823      	ldr	r3, [r4, #0]
 80035c4:	4639      	mov	r1, r7
 80035c6:	4630      	mov	r0, r6
 80035c8:	eb04 0903 	add.w	r9, r4, r3
 80035cc:	f000 fdf4 	bl	80041b8 <_sbrk_r>
 80035d0:	4581      	cmp	r9, r0
 80035d2:	d142      	bne.n	800365a <_malloc_r+0xea>
 80035d4:	6821      	ldr	r1, [r4, #0]
 80035d6:	1a6d      	subs	r5, r5, r1
 80035d8:	4629      	mov	r1, r5
 80035da:	4630      	mov	r0, r6
 80035dc:	f7ff ffa6 	bl	800352c <sbrk_aligned>
 80035e0:	3001      	adds	r0, #1
 80035e2:	d03a      	beq.n	800365a <_malloc_r+0xea>
 80035e4:	6823      	ldr	r3, [r4, #0]
 80035e6:	442b      	add	r3, r5
 80035e8:	6023      	str	r3, [r4, #0]
 80035ea:	f8d8 3000 	ldr.w	r3, [r8]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	bb62      	cbnz	r2, 800364c <_malloc_r+0xdc>
 80035f2:	f8c8 7000 	str.w	r7, [r8]
 80035f6:	e00f      	b.n	8003618 <_malloc_r+0xa8>
 80035f8:	6822      	ldr	r2, [r4, #0]
 80035fa:	1b52      	subs	r2, r2, r5
 80035fc:	d420      	bmi.n	8003640 <_malloc_r+0xd0>
 80035fe:	2a0b      	cmp	r2, #11
 8003600:	d917      	bls.n	8003632 <_malloc_r+0xc2>
 8003602:	1961      	adds	r1, r4, r5
 8003604:	42a3      	cmp	r3, r4
 8003606:	6025      	str	r5, [r4, #0]
 8003608:	bf18      	it	ne
 800360a:	6059      	strne	r1, [r3, #4]
 800360c:	6863      	ldr	r3, [r4, #4]
 800360e:	bf08      	it	eq
 8003610:	f8c8 1000 	streq.w	r1, [r8]
 8003614:	5162      	str	r2, [r4, r5]
 8003616:	604b      	str	r3, [r1, #4]
 8003618:	4630      	mov	r0, r6
 800361a:	f000 f82f 	bl	800367c <__malloc_unlock>
 800361e:	f104 000b 	add.w	r0, r4, #11
 8003622:	1d23      	adds	r3, r4, #4
 8003624:	f020 0007 	bic.w	r0, r0, #7
 8003628:	1ac2      	subs	r2, r0, r3
 800362a:	bf1c      	itt	ne
 800362c:	1a1b      	subne	r3, r3, r0
 800362e:	50a3      	strne	r3, [r4, r2]
 8003630:	e7af      	b.n	8003592 <_malloc_r+0x22>
 8003632:	6862      	ldr	r2, [r4, #4]
 8003634:	42a3      	cmp	r3, r4
 8003636:	bf0c      	ite	eq
 8003638:	f8c8 2000 	streq.w	r2, [r8]
 800363c:	605a      	strne	r2, [r3, #4]
 800363e:	e7eb      	b.n	8003618 <_malloc_r+0xa8>
 8003640:	4623      	mov	r3, r4
 8003642:	6864      	ldr	r4, [r4, #4]
 8003644:	e7ae      	b.n	80035a4 <_malloc_r+0x34>
 8003646:	463c      	mov	r4, r7
 8003648:	687f      	ldr	r7, [r7, #4]
 800364a:	e7b6      	b.n	80035ba <_malloc_r+0x4a>
 800364c:	461a      	mov	r2, r3
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	42a3      	cmp	r3, r4
 8003652:	d1fb      	bne.n	800364c <_malloc_r+0xdc>
 8003654:	2300      	movs	r3, #0
 8003656:	6053      	str	r3, [r2, #4]
 8003658:	e7de      	b.n	8003618 <_malloc_r+0xa8>
 800365a:	230c      	movs	r3, #12
 800365c:	6033      	str	r3, [r6, #0]
 800365e:	4630      	mov	r0, r6
 8003660:	f000 f80c 	bl	800367c <__malloc_unlock>
 8003664:	e794      	b.n	8003590 <_malloc_r+0x20>
 8003666:	6005      	str	r5, [r0, #0]
 8003668:	e7d6      	b.n	8003618 <_malloc_r+0xa8>
 800366a:	bf00      	nop
 800366c:	20000b6c 	.word	0x20000b6c

08003670 <__malloc_lock>:
 8003670:	4801      	ldr	r0, [pc, #4]	@ (8003678 <__malloc_lock+0x8>)
 8003672:	f7ff b8ae 	b.w	80027d2 <__retarget_lock_acquire_recursive>
 8003676:	bf00      	nop
 8003678:	20000b64 	.word	0x20000b64

0800367c <__malloc_unlock>:
 800367c:	4801      	ldr	r0, [pc, #4]	@ (8003684 <__malloc_unlock+0x8>)
 800367e:	f7ff b8a9 	b.w	80027d4 <__retarget_lock_release_recursive>
 8003682:	bf00      	nop
 8003684:	20000b64 	.word	0x20000b64

08003688 <_Balloc>:
 8003688:	b570      	push	{r4, r5, r6, lr}
 800368a:	69c6      	ldr	r6, [r0, #28]
 800368c:	4604      	mov	r4, r0
 800368e:	460d      	mov	r5, r1
 8003690:	b976      	cbnz	r6, 80036b0 <_Balloc+0x28>
 8003692:	2010      	movs	r0, #16
 8003694:	f7ff ff42 	bl	800351c <malloc>
 8003698:	4602      	mov	r2, r0
 800369a:	61e0      	str	r0, [r4, #28]
 800369c:	b920      	cbnz	r0, 80036a8 <_Balloc+0x20>
 800369e:	4b18      	ldr	r3, [pc, #96]	@ (8003700 <_Balloc+0x78>)
 80036a0:	4818      	ldr	r0, [pc, #96]	@ (8003704 <_Balloc+0x7c>)
 80036a2:	216b      	movs	r1, #107	@ 0x6b
 80036a4:	f000 fda6 	bl	80041f4 <__assert_func>
 80036a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80036ac:	6006      	str	r6, [r0, #0]
 80036ae:	60c6      	str	r6, [r0, #12]
 80036b0:	69e6      	ldr	r6, [r4, #28]
 80036b2:	68f3      	ldr	r3, [r6, #12]
 80036b4:	b183      	cbz	r3, 80036d8 <_Balloc+0x50>
 80036b6:	69e3      	ldr	r3, [r4, #28]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80036be:	b9b8      	cbnz	r0, 80036f0 <_Balloc+0x68>
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f605 	lsl.w	r6, r1, r5
 80036c6:	1d72      	adds	r2, r6, #5
 80036c8:	0092      	lsls	r2, r2, #2
 80036ca:	4620      	mov	r0, r4
 80036cc:	f000 fdb0 	bl	8004230 <_calloc_r>
 80036d0:	b160      	cbz	r0, 80036ec <_Balloc+0x64>
 80036d2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80036d6:	e00e      	b.n	80036f6 <_Balloc+0x6e>
 80036d8:	2221      	movs	r2, #33	@ 0x21
 80036da:	2104      	movs	r1, #4
 80036dc:	4620      	mov	r0, r4
 80036de:	f000 fda7 	bl	8004230 <_calloc_r>
 80036e2:	69e3      	ldr	r3, [r4, #28]
 80036e4:	60f0      	str	r0, [r6, #12]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e4      	bne.n	80036b6 <_Balloc+0x2e>
 80036ec:	2000      	movs	r0, #0
 80036ee:	bd70      	pop	{r4, r5, r6, pc}
 80036f0:	6802      	ldr	r2, [r0, #0]
 80036f2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80036f6:	2300      	movs	r3, #0
 80036f8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80036fc:	e7f7      	b.n	80036ee <_Balloc+0x66>
 80036fe:	bf00      	nop
 8003700:	080048e4 	.word	0x080048e4
 8003704:	08004964 	.word	0x08004964

08003708 <_Bfree>:
 8003708:	b570      	push	{r4, r5, r6, lr}
 800370a:	69c6      	ldr	r6, [r0, #28]
 800370c:	4605      	mov	r5, r0
 800370e:	460c      	mov	r4, r1
 8003710:	b976      	cbnz	r6, 8003730 <_Bfree+0x28>
 8003712:	2010      	movs	r0, #16
 8003714:	f7ff ff02 	bl	800351c <malloc>
 8003718:	4602      	mov	r2, r0
 800371a:	61e8      	str	r0, [r5, #28]
 800371c:	b920      	cbnz	r0, 8003728 <_Bfree+0x20>
 800371e:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <_Bfree+0x3c>)
 8003720:	4809      	ldr	r0, [pc, #36]	@ (8003748 <_Bfree+0x40>)
 8003722:	218f      	movs	r1, #143	@ 0x8f
 8003724:	f000 fd66 	bl	80041f4 <__assert_func>
 8003728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800372c:	6006      	str	r6, [r0, #0]
 800372e:	60c6      	str	r6, [r0, #12]
 8003730:	b13c      	cbz	r4, 8003742 <_Bfree+0x3a>
 8003732:	69eb      	ldr	r3, [r5, #28]
 8003734:	6862      	ldr	r2, [r4, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800373c:	6021      	str	r1, [r4, #0]
 800373e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8003742:	bd70      	pop	{r4, r5, r6, pc}
 8003744:	080048e4 	.word	0x080048e4
 8003748:	08004964 	.word	0x08004964

0800374c <__multadd>:
 800374c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003750:	690d      	ldr	r5, [r1, #16]
 8003752:	4607      	mov	r7, r0
 8003754:	460c      	mov	r4, r1
 8003756:	461e      	mov	r6, r3
 8003758:	f101 0c14 	add.w	ip, r1, #20
 800375c:	2000      	movs	r0, #0
 800375e:	f8dc 3000 	ldr.w	r3, [ip]
 8003762:	b299      	uxth	r1, r3
 8003764:	fb02 6101 	mla	r1, r2, r1, r6
 8003768:	0c1e      	lsrs	r6, r3, #16
 800376a:	0c0b      	lsrs	r3, r1, #16
 800376c:	fb02 3306 	mla	r3, r2, r6, r3
 8003770:	b289      	uxth	r1, r1
 8003772:	3001      	adds	r0, #1
 8003774:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8003778:	4285      	cmp	r5, r0
 800377a:	f84c 1b04 	str.w	r1, [ip], #4
 800377e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8003782:	dcec      	bgt.n	800375e <__multadd+0x12>
 8003784:	b30e      	cbz	r6, 80037ca <__multadd+0x7e>
 8003786:	68a3      	ldr	r3, [r4, #8]
 8003788:	42ab      	cmp	r3, r5
 800378a:	dc19      	bgt.n	80037c0 <__multadd+0x74>
 800378c:	6861      	ldr	r1, [r4, #4]
 800378e:	4638      	mov	r0, r7
 8003790:	3101      	adds	r1, #1
 8003792:	f7ff ff79 	bl	8003688 <_Balloc>
 8003796:	4680      	mov	r8, r0
 8003798:	b928      	cbnz	r0, 80037a6 <__multadd+0x5a>
 800379a:	4602      	mov	r2, r0
 800379c:	4b0c      	ldr	r3, [pc, #48]	@ (80037d0 <__multadd+0x84>)
 800379e:	480d      	ldr	r0, [pc, #52]	@ (80037d4 <__multadd+0x88>)
 80037a0:	21ba      	movs	r1, #186	@ 0xba
 80037a2:	f000 fd27 	bl	80041f4 <__assert_func>
 80037a6:	6922      	ldr	r2, [r4, #16]
 80037a8:	3202      	adds	r2, #2
 80037aa:	f104 010c 	add.w	r1, r4, #12
 80037ae:	0092      	lsls	r2, r2, #2
 80037b0:	300c      	adds	r0, #12
 80037b2:	f000 fd11 	bl	80041d8 <memcpy>
 80037b6:	4621      	mov	r1, r4
 80037b8:	4638      	mov	r0, r7
 80037ba:	f7ff ffa5 	bl	8003708 <_Bfree>
 80037be:	4644      	mov	r4, r8
 80037c0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80037c4:	3501      	adds	r5, #1
 80037c6:	615e      	str	r6, [r3, #20]
 80037c8:	6125      	str	r5, [r4, #16]
 80037ca:	4620      	mov	r0, r4
 80037cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80037d0:	08004953 	.word	0x08004953
 80037d4:	08004964 	.word	0x08004964

080037d8 <__hi0bits>:
 80037d8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80037dc:	4603      	mov	r3, r0
 80037de:	bf36      	itet	cc
 80037e0:	0403      	lslcc	r3, r0, #16
 80037e2:	2000      	movcs	r0, #0
 80037e4:	2010      	movcc	r0, #16
 80037e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037ea:	bf3c      	itt	cc
 80037ec:	021b      	lslcc	r3, r3, #8
 80037ee:	3008      	addcc	r0, #8
 80037f0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037f4:	bf3c      	itt	cc
 80037f6:	011b      	lslcc	r3, r3, #4
 80037f8:	3004      	addcc	r0, #4
 80037fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037fe:	bf3c      	itt	cc
 8003800:	009b      	lslcc	r3, r3, #2
 8003802:	3002      	addcc	r0, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	db05      	blt.n	8003814 <__hi0bits+0x3c>
 8003808:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800380c:	f100 0001 	add.w	r0, r0, #1
 8003810:	bf08      	it	eq
 8003812:	2020      	moveq	r0, #32
 8003814:	4770      	bx	lr

08003816 <__lo0bits>:
 8003816:	6803      	ldr	r3, [r0, #0]
 8003818:	4602      	mov	r2, r0
 800381a:	f013 0007 	ands.w	r0, r3, #7
 800381e:	d00b      	beq.n	8003838 <__lo0bits+0x22>
 8003820:	07d9      	lsls	r1, r3, #31
 8003822:	d421      	bmi.n	8003868 <__lo0bits+0x52>
 8003824:	0798      	lsls	r0, r3, #30
 8003826:	bf49      	itett	mi
 8003828:	085b      	lsrmi	r3, r3, #1
 800382a:	089b      	lsrpl	r3, r3, #2
 800382c:	2001      	movmi	r0, #1
 800382e:	6013      	strmi	r3, [r2, #0]
 8003830:	bf5c      	itt	pl
 8003832:	6013      	strpl	r3, [r2, #0]
 8003834:	2002      	movpl	r0, #2
 8003836:	4770      	bx	lr
 8003838:	b299      	uxth	r1, r3
 800383a:	b909      	cbnz	r1, 8003840 <__lo0bits+0x2a>
 800383c:	0c1b      	lsrs	r3, r3, #16
 800383e:	2010      	movs	r0, #16
 8003840:	b2d9      	uxtb	r1, r3
 8003842:	b909      	cbnz	r1, 8003848 <__lo0bits+0x32>
 8003844:	3008      	adds	r0, #8
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	0719      	lsls	r1, r3, #28
 800384a:	bf04      	itt	eq
 800384c:	091b      	lsreq	r3, r3, #4
 800384e:	3004      	addeq	r0, #4
 8003850:	0799      	lsls	r1, r3, #30
 8003852:	bf04      	itt	eq
 8003854:	089b      	lsreq	r3, r3, #2
 8003856:	3002      	addeq	r0, #2
 8003858:	07d9      	lsls	r1, r3, #31
 800385a:	d403      	bmi.n	8003864 <__lo0bits+0x4e>
 800385c:	085b      	lsrs	r3, r3, #1
 800385e:	f100 0001 	add.w	r0, r0, #1
 8003862:	d003      	beq.n	800386c <__lo0bits+0x56>
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	4770      	bx	lr
 8003868:	2000      	movs	r0, #0
 800386a:	4770      	bx	lr
 800386c:	2020      	movs	r0, #32
 800386e:	4770      	bx	lr

08003870 <__i2b>:
 8003870:	b510      	push	{r4, lr}
 8003872:	460c      	mov	r4, r1
 8003874:	2101      	movs	r1, #1
 8003876:	f7ff ff07 	bl	8003688 <_Balloc>
 800387a:	4602      	mov	r2, r0
 800387c:	b928      	cbnz	r0, 800388a <__i2b+0x1a>
 800387e:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <__i2b+0x24>)
 8003880:	4805      	ldr	r0, [pc, #20]	@ (8003898 <__i2b+0x28>)
 8003882:	f240 1145 	movw	r1, #325	@ 0x145
 8003886:	f000 fcb5 	bl	80041f4 <__assert_func>
 800388a:	2301      	movs	r3, #1
 800388c:	6144      	str	r4, [r0, #20]
 800388e:	6103      	str	r3, [r0, #16]
 8003890:	bd10      	pop	{r4, pc}
 8003892:	bf00      	nop
 8003894:	08004953 	.word	0x08004953
 8003898:	08004964 	.word	0x08004964

0800389c <__multiply>:
 800389c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	4617      	mov	r7, r2
 80038a2:	690a      	ldr	r2, [r1, #16]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bfa8      	it	ge
 80038aa:	463b      	movge	r3, r7
 80038ac:	4689      	mov	r9, r1
 80038ae:	bfa4      	itt	ge
 80038b0:	460f      	movge	r7, r1
 80038b2:	4699      	movge	r9, r3
 80038b4:	693d      	ldr	r5, [r7, #16]
 80038b6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	eb05 060a 	add.w	r6, r5, sl
 80038c2:	42b3      	cmp	r3, r6
 80038c4:	b085      	sub	sp, #20
 80038c6:	bfb8      	it	lt
 80038c8:	3101      	addlt	r1, #1
 80038ca:	f7ff fedd 	bl	8003688 <_Balloc>
 80038ce:	b930      	cbnz	r0, 80038de <__multiply+0x42>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b41      	ldr	r3, [pc, #260]	@ (80039d8 <__multiply+0x13c>)
 80038d4:	4841      	ldr	r0, [pc, #260]	@ (80039dc <__multiply+0x140>)
 80038d6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80038da:	f000 fc8b 	bl	80041f4 <__assert_func>
 80038de:	f100 0414 	add.w	r4, r0, #20
 80038e2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80038e6:	4623      	mov	r3, r4
 80038e8:	2200      	movs	r2, #0
 80038ea:	4573      	cmp	r3, lr
 80038ec:	d320      	bcc.n	8003930 <__multiply+0x94>
 80038ee:	f107 0814 	add.w	r8, r7, #20
 80038f2:	f109 0114 	add.w	r1, r9, #20
 80038f6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80038fa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80038fe:	9302      	str	r3, [sp, #8]
 8003900:	1beb      	subs	r3, r5, r7
 8003902:	3b15      	subs	r3, #21
 8003904:	f023 0303 	bic.w	r3, r3, #3
 8003908:	3304      	adds	r3, #4
 800390a:	3715      	adds	r7, #21
 800390c:	42bd      	cmp	r5, r7
 800390e:	bf38      	it	cc
 8003910:	2304      	movcc	r3, #4
 8003912:	9301      	str	r3, [sp, #4]
 8003914:	9b02      	ldr	r3, [sp, #8]
 8003916:	9103      	str	r1, [sp, #12]
 8003918:	428b      	cmp	r3, r1
 800391a:	d80c      	bhi.n	8003936 <__multiply+0x9a>
 800391c:	2e00      	cmp	r6, #0
 800391e:	dd03      	ble.n	8003928 <__multiply+0x8c>
 8003920:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003924:	2b00      	cmp	r3, #0
 8003926:	d055      	beq.n	80039d4 <__multiply+0x138>
 8003928:	6106      	str	r6, [r0, #16]
 800392a:	b005      	add	sp, #20
 800392c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003930:	f843 2b04 	str.w	r2, [r3], #4
 8003934:	e7d9      	b.n	80038ea <__multiply+0x4e>
 8003936:	f8b1 a000 	ldrh.w	sl, [r1]
 800393a:	f1ba 0f00 	cmp.w	sl, #0
 800393e:	d01f      	beq.n	8003980 <__multiply+0xe4>
 8003940:	46c4      	mov	ip, r8
 8003942:	46a1      	mov	r9, r4
 8003944:	2700      	movs	r7, #0
 8003946:	f85c 2b04 	ldr.w	r2, [ip], #4
 800394a:	f8d9 3000 	ldr.w	r3, [r9]
 800394e:	fa1f fb82 	uxth.w	fp, r2
 8003952:	b29b      	uxth	r3, r3
 8003954:	fb0a 330b 	mla	r3, sl, fp, r3
 8003958:	443b      	add	r3, r7
 800395a:	f8d9 7000 	ldr.w	r7, [r9]
 800395e:	0c12      	lsrs	r2, r2, #16
 8003960:	0c3f      	lsrs	r7, r7, #16
 8003962:	fb0a 7202 	mla	r2, sl, r2, r7
 8003966:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800396a:	b29b      	uxth	r3, r3
 800396c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003970:	4565      	cmp	r5, ip
 8003972:	f849 3b04 	str.w	r3, [r9], #4
 8003976:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800397a:	d8e4      	bhi.n	8003946 <__multiply+0xaa>
 800397c:	9b01      	ldr	r3, [sp, #4]
 800397e:	50e7      	str	r7, [r4, r3]
 8003980:	9b03      	ldr	r3, [sp, #12]
 8003982:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8003986:	3104      	adds	r1, #4
 8003988:	f1b9 0f00 	cmp.w	r9, #0
 800398c:	d020      	beq.n	80039d0 <__multiply+0x134>
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	4647      	mov	r7, r8
 8003992:	46a4      	mov	ip, r4
 8003994:	f04f 0a00 	mov.w	sl, #0
 8003998:	f8b7 b000 	ldrh.w	fp, [r7]
 800399c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80039a0:	fb09 220b 	mla	r2, r9, fp, r2
 80039a4:	4452      	add	r2, sl
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80039ac:	f84c 3b04 	str.w	r3, [ip], #4
 80039b0:	f857 3b04 	ldr.w	r3, [r7], #4
 80039b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039b8:	f8bc 3000 	ldrh.w	r3, [ip]
 80039bc:	fb09 330a 	mla	r3, r9, sl, r3
 80039c0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80039c4:	42bd      	cmp	r5, r7
 80039c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80039ca:	d8e5      	bhi.n	8003998 <__multiply+0xfc>
 80039cc:	9a01      	ldr	r2, [sp, #4]
 80039ce:	50a3      	str	r3, [r4, r2]
 80039d0:	3404      	adds	r4, #4
 80039d2:	e79f      	b.n	8003914 <__multiply+0x78>
 80039d4:	3e01      	subs	r6, #1
 80039d6:	e7a1      	b.n	800391c <__multiply+0x80>
 80039d8:	08004953 	.word	0x08004953
 80039dc:	08004964 	.word	0x08004964

080039e0 <__pow5mult>:
 80039e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039e4:	4615      	mov	r5, r2
 80039e6:	f012 0203 	ands.w	r2, r2, #3
 80039ea:	4607      	mov	r7, r0
 80039ec:	460e      	mov	r6, r1
 80039ee:	d007      	beq.n	8003a00 <__pow5mult+0x20>
 80039f0:	4c25      	ldr	r4, [pc, #148]	@ (8003a88 <__pow5mult+0xa8>)
 80039f2:	3a01      	subs	r2, #1
 80039f4:	2300      	movs	r3, #0
 80039f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80039fa:	f7ff fea7 	bl	800374c <__multadd>
 80039fe:	4606      	mov	r6, r0
 8003a00:	10ad      	asrs	r5, r5, #2
 8003a02:	d03d      	beq.n	8003a80 <__pow5mult+0xa0>
 8003a04:	69fc      	ldr	r4, [r7, #28]
 8003a06:	b97c      	cbnz	r4, 8003a28 <__pow5mult+0x48>
 8003a08:	2010      	movs	r0, #16
 8003a0a:	f7ff fd87 	bl	800351c <malloc>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	61f8      	str	r0, [r7, #28]
 8003a12:	b928      	cbnz	r0, 8003a20 <__pow5mult+0x40>
 8003a14:	4b1d      	ldr	r3, [pc, #116]	@ (8003a8c <__pow5mult+0xac>)
 8003a16:	481e      	ldr	r0, [pc, #120]	@ (8003a90 <__pow5mult+0xb0>)
 8003a18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003a1c:	f000 fbea 	bl	80041f4 <__assert_func>
 8003a20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a24:	6004      	str	r4, [r0, #0]
 8003a26:	60c4      	str	r4, [r0, #12]
 8003a28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8003a2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003a30:	b94c      	cbnz	r4, 8003a46 <__pow5mult+0x66>
 8003a32:	f240 2171 	movw	r1, #625	@ 0x271
 8003a36:	4638      	mov	r0, r7
 8003a38:	f7ff ff1a 	bl	8003870 <__i2b>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c8 0008 	str.w	r0, [r8, #8]
 8003a42:	4604      	mov	r4, r0
 8003a44:	6003      	str	r3, [r0, #0]
 8003a46:	f04f 0900 	mov.w	r9, #0
 8003a4a:	07eb      	lsls	r3, r5, #31
 8003a4c:	d50a      	bpl.n	8003a64 <__pow5mult+0x84>
 8003a4e:	4631      	mov	r1, r6
 8003a50:	4622      	mov	r2, r4
 8003a52:	4638      	mov	r0, r7
 8003a54:	f7ff ff22 	bl	800389c <__multiply>
 8003a58:	4631      	mov	r1, r6
 8003a5a:	4680      	mov	r8, r0
 8003a5c:	4638      	mov	r0, r7
 8003a5e:	f7ff fe53 	bl	8003708 <_Bfree>
 8003a62:	4646      	mov	r6, r8
 8003a64:	106d      	asrs	r5, r5, #1
 8003a66:	d00b      	beq.n	8003a80 <__pow5mult+0xa0>
 8003a68:	6820      	ldr	r0, [r4, #0]
 8003a6a:	b938      	cbnz	r0, 8003a7c <__pow5mult+0x9c>
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4621      	mov	r1, r4
 8003a70:	4638      	mov	r0, r7
 8003a72:	f7ff ff13 	bl	800389c <__multiply>
 8003a76:	6020      	str	r0, [r4, #0]
 8003a78:	f8c0 9000 	str.w	r9, [r0]
 8003a7c:	4604      	mov	r4, r0
 8003a7e:	e7e4      	b.n	8003a4a <__pow5mult+0x6a>
 8003a80:	4630      	mov	r0, r6
 8003a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a86:	bf00      	nop
 8003a88:	08004a14 	.word	0x08004a14
 8003a8c:	080048e4 	.word	0x080048e4
 8003a90:	08004964 	.word	0x08004964

08003a94 <__lshift>:
 8003a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a98:	460c      	mov	r4, r1
 8003a9a:	6849      	ldr	r1, [r1, #4]
 8003a9c:	6923      	ldr	r3, [r4, #16]
 8003a9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8003aa2:	68a3      	ldr	r3, [r4, #8]
 8003aa4:	4607      	mov	r7, r0
 8003aa6:	4691      	mov	r9, r2
 8003aa8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003aac:	f108 0601 	add.w	r6, r8, #1
 8003ab0:	42b3      	cmp	r3, r6
 8003ab2:	db0b      	blt.n	8003acc <__lshift+0x38>
 8003ab4:	4638      	mov	r0, r7
 8003ab6:	f7ff fde7 	bl	8003688 <_Balloc>
 8003aba:	4605      	mov	r5, r0
 8003abc:	b948      	cbnz	r0, 8003ad2 <__lshift+0x3e>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	4b28      	ldr	r3, [pc, #160]	@ (8003b64 <__lshift+0xd0>)
 8003ac2:	4829      	ldr	r0, [pc, #164]	@ (8003b68 <__lshift+0xd4>)
 8003ac4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8003ac8:	f000 fb94 	bl	80041f4 <__assert_func>
 8003acc:	3101      	adds	r1, #1
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	e7ee      	b.n	8003ab0 <__lshift+0x1c>
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f100 0114 	add.w	r1, r0, #20
 8003ad8:	f100 0210 	add.w	r2, r0, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	4553      	cmp	r3, sl
 8003ae0:	db33      	blt.n	8003b4a <__lshift+0xb6>
 8003ae2:	6920      	ldr	r0, [r4, #16]
 8003ae4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003ae8:	f104 0314 	add.w	r3, r4, #20
 8003aec:	f019 091f 	ands.w	r9, r9, #31
 8003af0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003af4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003af8:	d02b      	beq.n	8003b52 <__lshift+0xbe>
 8003afa:	f1c9 0e20 	rsb	lr, r9, #32
 8003afe:	468a      	mov	sl, r1
 8003b00:	2200      	movs	r2, #0
 8003b02:	6818      	ldr	r0, [r3, #0]
 8003b04:	fa00 f009 	lsl.w	r0, r0, r9
 8003b08:	4310      	orrs	r0, r2
 8003b0a:	f84a 0b04 	str.w	r0, [sl], #4
 8003b0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b12:	459c      	cmp	ip, r3
 8003b14:	fa22 f20e 	lsr.w	r2, r2, lr
 8003b18:	d8f3      	bhi.n	8003b02 <__lshift+0x6e>
 8003b1a:	ebac 0304 	sub.w	r3, ip, r4
 8003b1e:	3b15      	subs	r3, #21
 8003b20:	f023 0303 	bic.w	r3, r3, #3
 8003b24:	3304      	adds	r3, #4
 8003b26:	f104 0015 	add.w	r0, r4, #21
 8003b2a:	4560      	cmp	r0, ip
 8003b2c:	bf88      	it	hi
 8003b2e:	2304      	movhi	r3, #4
 8003b30:	50ca      	str	r2, [r1, r3]
 8003b32:	b10a      	cbz	r2, 8003b38 <__lshift+0xa4>
 8003b34:	f108 0602 	add.w	r6, r8, #2
 8003b38:	3e01      	subs	r6, #1
 8003b3a:	4638      	mov	r0, r7
 8003b3c:	612e      	str	r6, [r5, #16]
 8003b3e:	4621      	mov	r1, r4
 8003b40:	f7ff fde2 	bl	8003708 <_Bfree>
 8003b44:	4628      	mov	r0, r5
 8003b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8003b4e:	3301      	adds	r3, #1
 8003b50:	e7c5      	b.n	8003ade <__lshift+0x4a>
 8003b52:	3904      	subs	r1, #4
 8003b54:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b58:	f841 2f04 	str.w	r2, [r1, #4]!
 8003b5c:	459c      	cmp	ip, r3
 8003b5e:	d8f9      	bhi.n	8003b54 <__lshift+0xc0>
 8003b60:	e7ea      	b.n	8003b38 <__lshift+0xa4>
 8003b62:	bf00      	nop
 8003b64:	08004953 	.word	0x08004953
 8003b68:	08004964 	.word	0x08004964

08003b6c <__mcmp>:
 8003b6c:	690a      	ldr	r2, [r1, #16]
 8003b6e:	4603      	mov	r3, r0
 8003b70:	6900      	ldr	r0, [r0, #16]
 8003b72:	1a80      	subs	r0, r0, r2
 8003b74:	b530      	push	{r4, r5, lr}
 8003b76:	d10e      	bne.n	8003b96 <__mcmp+0x2a>
 8003b78:	3314      	adds	r3, #20
 8003b7a:	3114      	adds	r1, #20
 8003b7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8003b80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003b84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003b88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003b8c:	4295      	cmp	r5, r2
 8003b8e:	d003      	beq.n	8003b98 <__mcmp+0x2c>
 8003b90:	d205      	bcs.n	8003b9e <__mcmp+0x32>
 8003b92:	f04f 30ff 	mov.w	r0, #4294967295
 8003b96:	bd30      	pop	{r4, r5, pc}
 8003b98:	42a3      	cmp	r3, r4
 8003b9a:	d3f3      	bcc.n	8003b84 <__mcmp+0x18>
 8003b9c:	e7fb      	b.n	8003b96 <__mcmp+0x2a>
 8003b9e:	2001      	movs	r0, #1
 8003ba0:	e7f9      	b.n	8003b96 <__mcmp+0x2a>
	...

08003ba4 <__mdiff>:
 8003ba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba8:	4689      	mov	r9, r1
 8003baa:	4606      	mov	r6, r0
 8003bac:	4611      	mov	r1, r2
 8003bae:	4648      	mov	r0, r9
 8003bb0:	4614      	mov	r4, r2
 8003bb2:	f7ff ffdb 	bl	8003b6c <__mcmp>
 8003bb6:	1e05      	subs	r5, r0, #0
 8003bb8:	d112      	bne.n	8003be0 <__mdiff+0x3c>
 8003bba:	4629      	mov	r1, r5
 8003bbc:	4630      	mov	r0, r6
 8003bbe:	f7ff fd63 	bl	8003688 <_Balloc>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	b928      	cbnz	r0, 8003bd2 <__mdiff+0x2e>
 8003bc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003cc4 <__mdiff+0x120>)
 8003bc8:	f240 2137 	movw	r1, #567	@ 0x237
 8003bcc:	483e      	ldr	r0, [pc, #248]	@ (8003cc8 <__mdiff+0x124>)
 8003bce:	f000 fb11 	bl	80041f4 <__assert_func>
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8003bd8:	4610      	mov	r0, r2
 8003bda:	b003      	add	sp, #12
 8003bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003be0:	bfbc      	itt	lt
 8003be2:	464b      	movlt	r3, r9
 8003be4:	46a1      	movlt	r9, r4
 8003be6:	4630      	mov	r0, r6
 8003be8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003bec:	bfba      	itte	lt
 8003bee:	461c      	movlt	r4, r3
 8003bf0:	2501      	movlt	r5, #1
 8003bf2:	2500      	movge	r5, #0
 8003bf4:	f7ff fd48 	bl	8003688 <_Balloc>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	b918      	cbnz	r0, 8003c04 <__mdiff+0x60>
 8003bfc:	4b31      	ldr	r3, [pc, #196]	@ (8003cc4 <__mdiff+0x120>)
 8003bfe:	f240 2145 	movw	r1, #581	@ 0x245
 8003c02:	e7e3      	b.n	8003bcc <__mdiff+0x28>
 8003c04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8003c08:	6926      	ldr	r6, [r4, #16]
 8003c0a:	60c5      	str	r5, [r0, #12]
 8003c0c:	f109 0310 	add.w	r3, r9, #16
 8003c10:	f109 0514 	add.w	r5, r9, #20
 8003c14:	f104 0e14 	add.w	lr, r4, #20
 8003c18:	f100 0b14 	add.w	fp, r0, #20
 8003c1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8003c20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	46d9      	mov	r9, fp
 8003c28:	f04f 0c00 	mov.w	ip, #0
 8003c2c:	9b01      	ldr	r3, [sp, #4]
 8003c2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8003c32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8003c36:	9301      	str	r3, [sp, #4]
 8003c38:	fa1f f38a 	uxth.w	r3, sl
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	b283      	uxth	r3, r0
 8003c40:	1acb      	subs	r3, r1, r3
 8003c42:	0c00      	lsrs	r0, r0, #16
 8003c44:	4463      	add	r3, ip
 8003c46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8003c4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c54:	4576      	cmp	r6, lr
 8003c56:	f849 3b04 	str.w	r3, [r9], #4
 8003c5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003c5e:	d8e5      	bhi.n	8003c2c <__mdiff+0x88>
 8003c60:	1b33      	subs	r3, r6, r4
 8003c62:	3b15      	subs	r3, #21
 8003c64:	f023 0303 	bic.w	r3, r3, #3
 8003c68:	3415      	adds	r4, #21
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	bf38      	it	cc
 8003c70:	2304      	movcc	r3, #4
 8003c72:	441d      	add	r5, r3
 8003c74:	445b      	add	r3, fp
 8003c76:	461e      	mov	r6, r3
 8003c78:	462c      	mov	r4, r5
 8003c7a:	4544      	cmp	r4, r8
 8003c7c:	d30e      	bcc.n	8003c9c <__mdiff+0xf8>
 8003c7e:	f108 0103 	add.w	r1, r8, #3
 8003c82:	1b49      	subs	r1, r1, r5
 8003c84:	f021 0103 	bic.w	r1, r1, #3
 8003c88:	3d03      	subs	r5, #3
 8003c8a:	45a8      	cmp	r8, r5
 8003c8c:	bf38      	it	cc
 8003c8e:	2100      	movcc	r1, #0
 8003c90:	440b      	add	r3, r1
 8003c92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8003c96:	b191      	cbz	r1, 8003cbe <__mdiff+0x11a>
 8003c98:	6117      	str	r7, [r2, #16]
 8003c9a:	e79d      	b.n	8003bd8 <__mdiff+0x34>
 8003c9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8003ca0:	46e6      	mov	lr, ip
 8003ca2:	0c08      	lsrs	r0, r1, #16
 8003ca4:	fa1c fc81 	uxtah	ip, ip, r1
 8003ca8:	4471      	add	r1, lr
 8003caa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8003cae:	b289      	uxth	r1, r1
 8003cb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8003cb4:	f846 1b04 	str.w	r1, [r6], #4
 8003cb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8003cbc:	e7dd      	b.n	8003c7a <__mdiff+0xd6>
 8003cbe:	3f01      	subs	r7, #1
 8003cc0:	e7e7      	b.n	8003c92 <__mdiff+0xee>
 8003cc2:	bf00      	nop
 8003cc4:	08004953 	.word	0x08004953
 8003cc8:	08004964 	.word	0x08004964

08003ccc <__d2b>:
 8003ccc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003cd0:	460f      	mov	r7, r1
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	ec59 8b10 	vmov	r8, r9, d0
 8003cd8:	4616      	mov	r6, r2
 8003cda:	f7ff fcd5 	bl	8003688 <_Balloc>
 8003cde:	4604      	mov	r4, r0
 8003ce0:	b930      	cbnz	r0, 8003cf0 <__d2b+0x24>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	4b23      	ldr	r3, [pc, #140]	@ (8003d74 <__d2b+0xa8>)
 8003ce6:	4824      	ldr	r0, [pc, #144]	@ (8003d78 <__d2b+0xac>)
 8003ce8:	f240 310f 	movw	r1, #783	@ 0x30f
 8003cec:	f000 fa82 	bl	80041f4 <__assert_func>
 8003cf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003cf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003cf8:	b10d      	cbz	r5, 8003cfe <__d2b+0x32>
 8003cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	f1b8 0300 	subs.w	r3, r8, #0
 8003d04:	d023      	beq.n	8003d4e <__d2b+0x82>
 8003d06:	4668      	mov	r0, sp
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	f7ff fd84 	bl	8003816 <__lo0bits>
 8003d0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003d12:	b1d0      	cbz	r0, 8003d4a <__d2b+0x7e>
 8003d14:	f1c0 0320 	rsb	r3, r0, #32
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	430b      	orrs	r3, r1
 8003d1e:	40c2      	lsrs	r2, r0
 8003d20:	6163      	str	r3, [r4, #20]
 8003d22:	9201      	str	r2, [sp, #4]
 8003d24:	9b01      	ldr	r3, [sp, #4]
 8003d26:	61a3      	str	r3, [r4, #24]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	bf0c      	ite	eq
 8003d2c:	2201      	moveq	r2, #1
 8003d2e:	2202      	movne	r2, #2
 8003d30:	6122      	str	r2, [r4, #16]
 8003d32:	b1a5      	cbz	r5, 8003d5e <__d2b+0x92>
 8003d34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8003d38:	4405      	add	r5, r0
 8003d3a:	603d      	str	r5, [r7, #0]
 8003d3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8003d40:	6030      	str	r0, [r6, #0]
 8003d42:	4620      	mov	r0, r4
 8003d44:	b003      	add	sp, #12
 8003d46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d4a:	6161      	str	r1, [r4, #20]
 8003d4c:	e7ea      	b.n	8003d24 <__d2b+0x58>
 8003d4e:	a801      	add	r0, sp, #4
 8003d50:	f7ff fd61 	bl	8003816 <__lo0bits>
 8003d54:	9b01      	ldr	r3, [sp, #4]
 8003d56:	6163      	str	r3, [r4, #20]
 8003d58:	3020      	adds	r0, #32
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	e7e8      	b.n	8003d30 <__d2b+0x64>
 8003d5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8003d62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8003d66:	6038      	str	r0, [r7, #0]
 8003d68:	6918      	ldr	r0, [r3, #16]
 8003d6a:	f7ff fd35 	bl	80037d8 <__hi0bits>
 8003d6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8003d72:	e7e5      	b.n	8003d40 <__d2b+0x74>
 8003d74:	08004953 	.word	0x08004953
 8003d78:	08004964 	.word	0x08004964

08003d7c <__ssputs_r>:
 8003d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d80:	688e      	ldr	r6, [r1, #8]
 8003d82:	461f      	mov	r7, r3
 8003d84:	42be      	cmp	r6, r7
 8003d86:	680b      	ldr	r3, [r1, #0]
 8003d88:	4682      	mov	sl, r0
 8003d8a:	460c      	mov	r4, r1
 8003d8c:	4690      	mov	r8, r2
 8003d8e:	d82d      	bhi.n	8003dec <__ssputs_r+0x70>
 8003d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d98:	d026      	beq.n	8003de8 <__ssputs_r+0x6c>
 8003d9a:	6965      	ldr	r5, [r4, #20]
 8003d9c:	6909      	ldr	r1, [r1, #16]
 8003d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003da2:	eba3 0901 	sub.w	r9, r3, r1
 8003da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003daa:	1c7b      	adds	r3, r7, #1
 8003dac:	444b      	add	r3, r9
 8003dae:	106d      	asrs	r5, r5, #1
 8003db0:	429d      	cmp	r5, r3
 8003db2:	bf38      	it	cc
 8003db4:	461d      	movcc	r5, r3
 8003db6:	0553      	lsls	r3, r2, #21
 8003db8:	d527      	bpl.n	8003e0a <__ssputs_r+0x8e>
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f7ff fbd8 	bl	8003570 <_malloc_r>
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	b360      	cbz	r0, 8003e1e <__ssputs_r+0xa2>
 8003dc4:	6921      	ldr	r1, [r4, #16]
 8003dc6:	464a      	mov	r2, r9
 8003dc8:	f000 fa06 	bl	80041d8 <memcpy>
 8003dcc:	89a3      	ldrh	r3, [r4, #12]
 8003dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dd6:	81a3      	strh	r3, [r4, #12]
 8003dd8:	6126      	str	r6, [r4, #16]
 8003dda:	6165      	str	r5, [r4, #20]
 8003ddc:	444e      	add	r6, r9
 8003dde:	eba5 0509 	sub.w	r5, r5, r9
 8003de2:	6026      	str	r6, [r4, #0]
 8003de4:	60a5      	str	r5, [r4, #8]
 8003de6:	463e      	mov	r6, r7
 8003de8:	42be      	cmp	r6, r7
 8003dea:	d900      	bls.n	8003dee <__ssputs_r+0x72>
 8003dec:	463e      	mov	r6, r7
 8003dee:	6820      	ldr	r0, [r4, #0]
 8003df0:	4632      	mov	r2, r6
 8003df2:	4641      	mov	r1, r8
 8003df4:	f000 f9c6 	bl	8004184 <memmove>
 8003df8:	68a3      	ldr	r3, [r4, #8]
 8003dfa:	1b9b      	subs	r3, r3, r6
 8003dfc:	60a3      	str	r3, [r4, #8]
 8003dfe:	6823      	ldr	r3, [r4, #0]
 8003e00:	4433      	add	r3, r6
 8003e02:	6023      	str	r3, [r4, #0]
 8003e04:	2000      	movs	r0, #0
 8003e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0a:	462a      	mov	r2, r5
 8003e0c:	f000 fa36 	bl	800427c <_realloc_r>
 8003e10:	4606      	mov	r6, r0
 8003e12:	2800      	cmp	r0, #0
 8003e14:	d1e0      	bne.n	8003dd8 <__ssputs_r+0x5c>
 8003e16:	6921      	ldr	r1, [r4, #16]
 8003e18:	4650      	mov	r0, sl
 8003e1a:	f7ff fb35 	bl	8003488 <_free_r>
 8003e1e:	230c      	movs	r3, #12
 8003e20:	f8ca 3000 	str.w	r3, [sl]
 8003e24:	89a3      	ldrh	r3, [r4, #12]
 8003e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e2a:	81a3      	strh	r3, [r4, #12]
 8003e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e30:	e7e9      	b.n	8003e06 <__ssputs_r+0x8a>
	...

08003e34 <_svfiprintf_r>:
 8003e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e38:	4698      	mov	r8, r3
 8003e3a:	898b      	ldrh	r3, [r1, #12]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	b09d      	sub	sp, #116	@ 0x74
 8003e40:	4607      	mov	r7, r0
 8003e42:	460d      	mov	r5, r1
 8003e44:	4614      	mov	r4, r2
 8003e46:	d510      	bpl.n	8003e6a <_svfiprintf_r+0x36>
 8003e48:	690b      	ldr	r3, [r1, #16]
 8003e4a:	b973      	cbnz	r3, 8003e6a <_svfiprintf_r+0x36>
 8003e4c:	2140      	movs	r1, #64	@ 0x40
 8003e4e:	f7ff fb8f 	bl	8003570 <_malloc_r>
 8003e52:	6028      	str	r0, [r5, #0]
 8003e54:	6128      	str	r0, [r5, #16]
 8003e56:	b930      	cbnz	r0, 8003e66 <_svfiprintf_r+0x32>
 8003e58:	230c      	movs	r3, #12
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	b01d      	add	sp, #116	@ 0x74
 8003e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e66:	2340      	movs	r3, #64	@ 0x40
 8003e68:	616b      	str	r3, [r5, #20]
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e6e:	2320      	movs	r3, #32
 8003e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e78:	2330      	movs	r3, #48	@ 0x30
 8003e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004018 <_svfiprintf_r+0x1e4>
 8003e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e82:	f04f 0901 	mov.w	r9, #1
 8003e86:	4623      	mov	r3, r4
 8003e88:	469a      	mov	sl, r3
 8003e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e8e:	b10a      	cbz	r2, 8003e94 <_svfiprintf_r+0x60>
 8003e90:	2a25      	cmp	r2, #37	@ 0x25
 8003e92:	d1f9      	bne.n	8003e88 <_svfiprintf_r+0x54>
 8003e94:	ebba 0b04 	subs.w	fp, sl, r4
 8003e98:	d00b      	beq.n	8003eb2 <_svfiprintf_r+0x7e>
 8003e9a:	465b      	mov	r3, fp
 8003e9c:	4622      	mov	r2, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	4638      	mov	r0, r7
 8003ea2:	f7ff ff6b 	bl	8003d7c <__ssputs_r>
 8003ea6:	3001      	adds	r0, #1
 8003ea8:	f000 80a7 	beq.w	8003ffa <_svfiprintf_r+0x1c6>
 8003eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003eae:	445a      	add	r2, fp
 8003eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8003eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 809f 	beq.w	8003ffa <_svfiprintf_r+0x1c6>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ec6:	f10a 0a01 	add.w	sl, sl, #1
 8003eca:	9304      	str	r3, [sp, #16]
 8003ecc:	9307      	str	r3, [sp, #28]
 8003ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ed4:	4654      	mov	r4, sl
 8003ed6:	2205      	movs	r2, #5
 8003ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003edc:	484e      	ldr	r0, [pc, #312]	@ (8004018 <_svfiprintf_r+0x1e4>)
 8003ede:	f7fc f97f 	bl	80001e0 <memchr>
 8003ee2:	9a04      	ldr	r2, [sp, #16]
 8003ee4:	b9d8      	cbnz	r0, 8003f1e <_svfiprintf_r+0xea>
 8003ee6:	06d0      	lsls	r0, r2, #27
 8003ee8:	bf44      	itt	mi
 8003eea:	2320      	movmi	r3, #32
 8003eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ef0:	0711      	lsls	r1, r2, #28
 8003ef2:	bf44      	itt	mi
 8003ef4:	232b      	movmi	r3, #43	@ 0x2b
 8003ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003efa:	f89a 3000 	ldrb.w	r3, [sl]
 8003efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f00:	d015      	beq.n	8003f2e <_svfiprintf_r+0xfa>
 8003f02:	9a07      	ldr	r2, [sp, #28]
 8003f04:	4654      	mov	r4, sl
 8003f06:	2000      	movs	r0, #0
 8003f08:	f04f 0c0a 	mov.w	ip, #10
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f12:	3b30      	subs	r3, #48	@ 0x30
 8003f14:	2b09      	cmp	r3, #9
 8003f16:	d94b      	bls.n	8003fb0 <_svfiprintf_r+0x17c>
 8003f18:	b1b0      	cbz	r0, 8003f48 <_svfiprintf_r+0x114>
 8003f1a:	9207      	str	r2, [sp, #28]
 8003f1c:	e014      	b.n	8003f48 <_svfiprintf_r+0x114>
 8003f1e:	eba0 0308 	sub.w	r3, r0, r8
 8003f22:	fa09 f303 	lsl.w	r3, r9, r3
 8003f26:	4313      	orrs	r3, r2
 8003f28:	9304      	str	r3, [sp, #16]
 8003f2a:	46a2      	mov	sl, r4
 8003f2c:	e7d2      	b.n	8003ed4 <_svfiprintf_r+0xa0>
 8003f2e:	9b03      	ldr	r3, [sp, #12]
 8003f30:	1d19      	adds	r1, r3, #4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	9103      	str	r1, [sp, #12]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	bfbb      	ittet	lt
 8003f3a:	425b      	neglt	r3, r3
 8003f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8003f40:	9307      	strge	r3, [sp, #28]
 8003f42:	9307      	strlt	r3, [sp, #28]
 8003f44:	bfb8      	it	lt
 8003f46:	9204      	strlt	r2, [sp, #16]
 8003f48:	7823      	ldrb	r3, [r4, #0]
 8003f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f4c:	d10a      	bne.n	8003f64 <_svfiprintf_r+0x130>
 8003f4e:	7863      	ldrb	r3, [r4, #1]
 8003f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f52:	d132      	bne.n	8003fba <_svfiprintf_r+0x186>
 8003f54:	9b03      	ldr	r3, [sp, #12]
 8003f56:	1d1a      	adds	r2, r3, #4
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	9203      	str	r2, [sp, #12]
 8003f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f60:	3402      	adds	r4, #2
 8003f62:	9305      	str	r3, [sp, #20]
 8003f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004028 <_svfiprintf_r+0x1f4>
 8003f68:	7821      	ldrb	r1, [r4, #0]
 8003f6a:	2203      	movs	r2, #3
 8003f6c:	4650      	mov	r0, sl
 8003f6e:	f7fc f937 	bl	80001e0 <memchr>
 8003f72:	b138      	cbz	r0, 8003f84 <_svfiprintf_r+0x150>
 8003f74:	9b04      	ldr	r3, [sp, #16]
 8003f76:	eba0 000a 	sub.w	r0, r0, sl
 8003f7a:	2240      	movs	r2, #64	@ 0x40
 8003f7c:	4082      	lsls	r2, r0
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	3401      	adds	r4, #1
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f88:	4824      	ldr	r0, [pc, #144]	@ (800401c <_svfiprintf_r+0x1e8>)
 8003f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f8e:	2206      	movs	r2, #6
 8003f90:	f7fc f926 	bl	80001e0 <memchr>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d036      	beq.n	8004006 <_svfiprintf_r+0x1d2>
 8003f98:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <_svfiprintf_r+0x1ec>)
 8003f9a:	bb1b      	cbnz	r3, 8003fe4 <_svfiprintf_r+0x1b0>
 8003f9c:	9b03      	ldr	r3, [sp, #12]
 8003f9e:	3307      	adds	r3, #7
 8003fa0:	f023 0307 	bic.w	r3, r3, #7
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	9303      	str	r3, [sp, #12]
 8003fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003faa:	4433      	add	r3, r6
 8003fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fae:	e76a      	b.n	8003e86 <_svfiprintf_r+0x52>
 8003fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	e7a8      	b.n	8003f0c <_svfiprintf_r+0xd8>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	3401      	adds	r4, #1
 8003fbe:	9305      	str	r3, [sp, #20]
 8003fc0:	4619      	mov	r1, r3
 8003fc2:	f04f 0c0a 	mov.w	ip, #10
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fcc:	3a30      	subs	r2, #48	@ 0x30
 8003fce:	2a09      	cmp	r2, #9
 8003fd0:	d903      	bls.n	8003fda <_svfiprintf_r+0x1a6>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d0c6      	beq.n	8003f64 <_svfiprintf_r+0x130>
 8003fd6:	9105      	str	r1, [sp, #20]
 8003fd8:	e7c4      	b.n	8003f64 <_svfiprintf_r+0x130>
 8003fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fde:	4604      	mov	r4, r0
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e7f0      	b.n	8003fc6 <_svfiprintf_r+0x192>
 8003fe4:	ab03      	add	r3, sp, #12
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	462a      	mov	r2, r5
 8003fea:	4b0e      	ldr	r3, [pc, #56]	@ (8004024 <_svfiprintf_r+0x1f0>)
 8003fec:	a904      	add	r1, sp, #16
 8003fee:	4638      	mov	r0, r7
 8003ff0:	f7fd fe6a 	bl	8001cc8 <_printf_float>
 8003ff4:	1c42      	adds	r2, r0, #1
 8003ff6:	4606      	mov	r6, r0
 8003ff8:	d1d6      	bne.n	8003fa8 <_svfiprintf_r+0x174>
 8003ffa:	89ab      	ldrh	r3, [r5, #12]
 8003ffc:	065b      	lsls	r3, r3, #25
 8003ffe:	f53f af2d 	bmi.w	8003e5c <_svfiprintf_r+0x28>
 8004002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004004:	e72c      	b.n	8003e60 <_svfiprintf_r+0x2c>
 8004006:	ab03      	add	r3, sp, #12
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	462a      	mov	r2, r5
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <_svfiprintf_r+0x1f0>)
 800400e:	a904      	add	r1, sp, #16
 8004010:	4638      	mov	r0, r7
 8004012:	f7fe f8f1 	bl	80021f8 <_printf_i>
 8004016:	e7ed      	b.n	8003ff4 <_svfiprintf_r+0x1c0>
 8004018:	080049bd 	.word	0x080049bd
 800401c:	080049c7 	.word	0x080049c7
 8004020:	08001cc9 	.word	0x08001cc9
 8004024:	08003d7d 	.word	0x08003d7d
 8004028:	080049c3 	.word	0x080049c3

0800402c <__sflush_r>:
 800402c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004034:	0716      	lsls	r6, r2, #28
 8004036:	4605      	mov	r5, r0
 8004038:	460c      	mov	r4, r1
 800403a:	d454      	bmi.n	80040e6 <__sflush_r+0xba>
 800403c:	684b      	ldr	r3, [r1, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	dc02      	bgt.n	8004048 <__sflush_r+0x1c>
 8004042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	dd48      	ble.n	80040da <__sflush_r+0xae>
 8004048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800404a:	2e00      	cmp	r6, #0
 800404c:	d045      	beq.n	80040da <__sflush_r+0xae>
 800404e:	2300      	movs	r3, #0
 8004050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004054:	682f      	ldr	r7, [r5, #0]
 8004056:	6a21      	ldr	r1, [r4, #32]
 8004058:	602b      	str	r3, [r5, #0]
 800405a:	d030      	beq.n	80040be <__sflush_r+0x92>
 800405c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800405e:	89a3      	ldrh	r3, [r4, #12]
 8004060:	0759      	lsls	r1, r3, #29
 8004062:	d505      	bpl.n	8004070 <__sflush_r+0x44>
 8004064:	6863      	ldr	r3, [r4, #4]
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800406a:	b10b      	cbz	r3, 8004070 <__sflush_r+0x44>
 800406c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800406e:	1ad2      	subs	r2, r2, r3
 8004070:	2300      	movs	r3, #0
 8004072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004074:	6a21      	ldr	r1, [r4, #32]
 8004076:	4628      	mov	r0, r5
 8004078:	47b0      	blx	r6
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	89a3      	ldrh	r3, [r4, #12]
 800407e:	d106      	bne.n	800408e <__sflush_r+0x62>
 8004080:	6829      	ldr	r1, [r5, #0]
 8004082:	291d      	cmp	r1, #29
 8004084:	d82b      	bhi.n	80040de <__sflush_r+0xb2>
 8004086:	4a2a      	ldr	r2, [pc, #168]	@ (8004130 <__sflush_r+0x104>)
 8004088:	40ca      	lsrs	r2, r1
 800408a:	07d6      	lsls	r6, r2, #31
 800408c:	d527      	bpl.n	80040de <__sflush_r+0xb2>
 800408e:	2200      	movs	r2, #0
 8004090:	6062      	str	r2, [r4, #4]
 8004092:	04d9      	lsls	r1, r3, #19
 8004094:	6922      	ldr	r2, [r4, #16]
 8004096:	6022      	str	r2, [r4, #0]
 8004098:	d504      	bpl.n	80040a4 <__sflush_r+0x78>
 800409a:	1c42      	adds	r2, r0, #1
 800409c:	d101      	bne.n	80040a2 <__sflush_r+0x76>
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	b903      	cbnz	r3, 80040a4 <__sflush_r+0x78>
 80040a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80040a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80040a6:	602f      	str	r7, [r5, #0]
 80040a8:	b1b9      	cbz	r1, 80040da <__sflush_r+0xae>
 80040aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80040ae:	4299      	cmp	r1, r3
 80040b0:	d002      	beq.n	80040b8 <__sflush_r+0x8c>
 80040b2:	4628      	mov	r0, r5
 80040b4:	f7ff f9e8 	bl	8003488 <_free_r>
 80040b8:	2300      	movs	r3, #0
 80040ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80040bc:	e00d      	b.n	80040da <__sflush_r+0xae>
 80040be:	2301      	movs	r3, #1
 80040c0:	4628      	mov	r0, r5
 80040c2:	47b0      	blx	r6
 80040c4:	4602      	mov	r2, r0
 80040c6:	1c50      	adds	r0, r2, #1
 80040c8:	d1c9      	bne.n	800405e <__sflush_r+0x32>
 80040ca:	682b      	ldr	r3, [r5, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0c6      	beq.n	800405e <__sflush_r+0x32>
 80040d0:	2b1d      	cmp	r3, #29
 80040d2:	d001      	beq.n	80040d8 <__sflush_r+0xac>
 80040d4:	2b16      	cmp	r3, #22
 80040d6:	d11e      	bne.n	8004116 <__sflush_r+0xea>
 80040d8:	602f      	str	r7, [r5, #0]
 80040da:	2000      	movs	r0, #0
 80040dc:	e022      	b.n	8004124 <__sflush_r+0xf8>
 80040de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040e2:	b21b      	sxth	r3, r3
 80040e4:	e01b      	b.n	800411e <__sflush_r+0xf2>
 80040e6:	690f      	ldr	r7, [r1, #16]
 80040e8:	2f00      	cmp	r7, #0
 80040ea:	d0f6      	beq.n	80040da <__sflush_r+0xae>
 80040ec:	0793      	lsls	r3, r2, #30
 80040ee:	680e      	ldr	r6, [r1, #0]
 80040f0:	bf08      	it	eq
 80040f2:	694b      	ldreq	r3, [r1, #20]
 80040f4:	600f      	str	r7, [r1, #0]
 80040f6:	bf18      	it	ne
 80040f8:	2300      	movne	r3, #0
 80040fa:	eba6 0807 	sub.w	r8, r6, r7
 80040fe:	608b      	str	r3, [r1, #8]
 8004100:	f1b8 0f00 	cmp.w	r8, #0
 8004104:	dde9      	ble.n	80040da <__sflush_r+0xae>
 8004106:	6a21      	ldr	r1, [r4, #32]
 8004108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800410a:	4643      	mov	r3, r8
 800410c:	463a      	mov	r2, r7
 800410e:	4628      	mov	r0, r5
 8004110:	47b0      	blx	r6
 8004112:	2800      	cmp	r0, #0
 8004114:	dc08      	bgt.n	8004128 <__sflush_r+0xfc>
 8004116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800411a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800411e:	81a3      	strh	r3, [r4, #12]
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004128:	4407      	add	r7, r0
 800412a:	eba8 0800 	sub.w	r8, r8, r0
 800412e:	e7e7      	b.n	8004100 <__sflush_r+0xd4>
 8004130:	20400001 	.word	0x20400001

08004134 <_fflush_r>:
 8004134:	b538      	push	{r3, r4, r5, lr}
 8004136:	690b      	ldr	r3, [r1, #16]
 8004138:	4605      	mov	r5, r0
 800413a:	460c      	mov	r4, r1
 800413c:	b913      	cbnz	r3, 8004144 <_fflush_r+0x10>
 800413e:	2500      	movs	r5, #0
 8004140:	4628      	mov	r0, r5
 8004142:	bd38      	pop	{r3, r4, r5, pc}
 8004144:	b118      	cbz	r0, 800414e <_fflush_r+0x1a>
 8004146:	6a03      	ldr	r3, [r0, #32]
 8004148:	b90b      	cbnz	r3, 800414e <_fflush_r+0x1a>
 800414a:	f7fe f9ff 	bl	800254c <__sinit>
 800414e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d0f3      	beq.n	800413e <_fflush_r+0xa>
 8004156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004158:	07d0      	lsls	r0, r2, #31
 800415a:	d404      	bmi.n	8004166 <_fflush_r+0x32>
 800415c:	0599      	lsls	r1, r3, #22
 800415e:	d402      	bmi.n	8004166 <_fflush_r+0x32>
 8004160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004162:	f7fe fb36 	bl	80027d2 <__retarget_lock_acquire_recursive>
 8004166:	4628      	mov	r0, r5
 8004168:	4621      	mov	r1, r4
 800416a:	f7ff ff5f 	bl	800402c <__sflush_r>
 800416e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004170:	07da      	lsls	r2, r3, #31
 8004172:	4605      	mov	r5, r0
 8004174:	d4e4      	bmi.n	8004140 <_fflush_r+0xc>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	059b      	lsls	r3, r3, #22
 800417a:	d4e1      	bmi.n	8004140 <_fflush_r+0xc>
 800417c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800417e:	f7fe fb29 	bl	80027d4 <__retarget_lock_release_recursive>
 8004182:	e7dd      	b.n	8004140 <_fflush_r+0xc>

08004184 <memmove>:
 8004184:	4288      	cmp	r0, r1
 8004186:	b510      	push	{r4, lr}
 8004188:	eb01 0402 	add.w	r4, r1, r2
 800418c:	d902      	bls.n	8004194 <memmove+0x10>
 800418e:	4284      	cmp	r4, r0
 8004190:	4623      	mov	r3, r4
 8004192:	d807      	bhi.n	80041a4 <memmove+0x20>
 8004194:	1e43      	subs	r3, r0, #1
 8004196:	42a1      	cmp	r1, r4
 8004198:	d008      	beq.n	80041ac <memmove+0x28>
 800419a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800419e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041a2:	e7f8      	b.n	8004196 <memmove+0x12>
 80041a4:	4402      	add	r2, r0
 80041a6:	4601      	mov	r1, r0
 80041a8:	428a      	cmp	r2, r1
 80041aa:	d100      	bne.n	80041ae <memmove+0x2a>
 80041ac:	bd10      	pop	{r4, pc}
 80041ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041b6:	e7f7      	b.n	80041a8 <memmove+0x24>

080041b8 <_sbrk_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d06      	ldr	r5, [pc, #24]	@ (80041d4 <_sbrk_r+0x1c>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7fd faf4 	bl	80017b0 <_sbrk>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_sbrk_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_sbrk_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000b60 	.word	0x20000b60

080041d8 <memcpy>:
 80041d8:	440a      	add	r2, r1
 80041da:	4291      	cmp	r1, r2
 80041dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80041e0:	d100      	bne.n	80041e4 <memcpy+0xc>
 80041e2:	4770      	bx	lr
 80041e4:	b510      	push	{r4, lr}
 80041e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041ee:	4291      	cmp	r1, r2
 80041f0:	d1f9      	bne.n	80041e6 <memcpy+0xe>
 80041f2:	bd10      	pop	{r4, pc}

080041f4 <__assert_func>:
 80041f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80041f6:	4614      	mov	r4, r2
 80041f8:	461a      	mov	r2, r3
 80041fa:	4b09      	ldr	r3, [pc, #36]	@ (8004220 <__assert_func+0x2c>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4605      	mov	r5, r0
 8004200:	68d8      	ldr	r0, [r3, #12]
 8004202:	b14c      	cbz	r4, 8004218 <__assert_func+0x24>
 8004204:	4b07      	ldr	r3, [pc, #28]	@ (8004224 <__assert_func+0x30>)
 8004206:	9100      	str	r1, [sp, #0]
 8004208:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800420c:	4906      	ldr	r1, [pc, #24]	@ (8004228 <__assert_func+0x34>)
 800420e:	462b      	mov	r3, r5
 8004210:	f000 f870 	bl	80042f4 <fiprintf>
 8004214:	f000 f880 	bl	8004318 <abort>
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <__assert_func+0x38>)
 800421a:	461c      	mov	r4, r3
 800421c:	e7f3      	b.n	8004206 <__assert_func+0x12>
 800421e:	bf00      	nop
 8004220:	20000818 	.word	0x20000818
 8004224:	080049d8 	.word	0x080049d8
 8004228:	080049e5 	.word	0x080049e5
 800422c:	08004a13 	.word	0x08004a13

08004230 <_calloc_r>:
 8004230:	b570      	push	{r4, r5, r6, lr}
 8004232:	fba1 5402 	umull	r5, r4, r1, r2
 8004236:	b934      	cbnz	r4, 8004246 <_calloc_r+0x16>
 8004238:	4629      	mov	r1, r5
 800423a:	f7ff f999 	bl	8003570 <_malloc_r>
 800423e:	4606      	mov	r6, r0
 8004240:	b928      	cbnz	r0, 800424e <_calloc_r+0x1e>
 8004242:	4630      	mov	r0, r6
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	220c      	movs	r2, #12
 8004248:	6002      	str	r2, [r0, #0]
 800424a:	2600      	movs	r6, #0
 800424c:	e7f9      	b.n	8004242 <_calloc_r+0x12>
 800424e:	462a      	mov	r2, r5
 8004250:	4621      	mov	r1, r4
 8004252:	f7fe fa2a 	bl	80026aa <memset>
 8004256:	e7f4      	b.n	8004242 <_calloc_r+0x12>

08004258 <__ascii_mbtowc>:
 8004258:	b082      	sub	sp, #8
 800425a:	b901      	cbnz	r1, 800425e <__ascii_mbtowc+0x6>
 800425c:	a901      	add	r1, sp, #4
 800425e:	b142      	cbz	r2, 8004272 <__ascii_mbtowc+0x1a>
 8004260:	b14b      	cbz	r3, 8004276 <__ascii_mbtowc+0x1e>
 8004262:	7813      	ldrb	r3, [r2, #0]
 8004264:	600b      	str	r3, [r1, #0]
 8004266:	7812      	ldrb	r2, [r2, #0]
 8004268:	1e10      	subs	r0, r2, #0
 800426a:	bf18      	it	ne
 800426c:	2001      	movne	r0, #1
 800426e:	b002      	add	sp, #8
 8004270:	4770      	bx	lr
 8004272:	4610      	mov	r0, r2
 8004274:	e7fb      	b.n	800426e <__ascii_mbtowc+0x16>
 8004276:	f06f 0001 	mvn.w	r0, #1
 800427a:	e7f8      	b.n	800426e <__ascii_mbtowc+0x16>

0800427c <_realloc_r>:
 800427c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004280:	4607      	mov	r7, r0
 8004282:	4614      	mov	r4, r2
 8004284:	460d      	mov	r5, r1
 8004286:	b921      	cbnz	r1, 8004292 <_realloc_r+0x16>
 8004288:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800428c:	4611      	mov	r1, r2
 800428e:	f7ff b96f 	b.w	8003570 <_malloc_r>
 8004292:	b92a      	cbnz	r2, 80042a0 <_realloc_r+0x24>
 8004294:	f7ff f8f8 	bl	8003488 <_free_r>
 8004298:	4625      	mov	r5, r4
 800429a:	4628      	mov	r0, r5
 800429c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042a0:	f000 f841 	bl	8004326 <_malloc_usable_size_r>
 80042a4:	4284      	cmp	r4, r0
 80042a6:	4606      	mov	r6, r0
 80042a8:	d802      	bhi.n	80042b0 <_realloc_r+0x34>
 80042aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80042ae:	d8f4      	bhi.n	800429a <_realloc_r+0x1e>
 80042b0:	4621      	mov	r1, r4
 80042b2:	4638      	mov	r0, r7
 80042b4:	f7ff f95c 	bl	8003570 <_malloc_r>
 80042b8:	4680      	mov	r8, r0
 80042ba:	b908      	cbnz	r0, 80042c0 <_realloc_r+0x44>
 80042bc:	4645      	mov	r5, r8
 80042be:	e7ec      	b.n	800429a <_realloc_r+0x1e>
 80042c0:	42b4      	cmp	r4, r6
 80042c2:	4622      	mov	r2, r4
 80042c4:	4629      	mov	r1, r5
 80042c6:	bf28      	it	cs
 80042c8:	4632      	movcs	r2, r6
 80042ca:	f7ff ff85 	bl	80041d8 <memcpy>
 80042ce:	4629      	mov	r1, r5
 80042d0:	4638      	mov	r0, r7
 80042d2:	f7ff f8d9 	bl	8003488 <_free_r>
 80042d6:	e7f1      	b.n	80042bc <_realloc_r+0x40>

080042d8 <__ascii_wctomb>:
 80042d8:	4603      	mov	r3, r0
 80042da:	4608      	mov	r0, r1
 80042dc:	b141      	cbz	r1, 80042f0 <__ascii_wctomb+0x18>
 80042de:	2aff      	cmp	r2, #255	@ 0xff
 80042e0:	d904      	bls.n	80042ec <__ascii_wctomb+0x14>
 80042e2:	228a      	movs	r2, #138	@ 0x8a
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	f04f 30ff 	mov.w	r0, #4294967295
 80042ea:	4770      	bx	lr
 80042ec:	700a      	strb	r2, [r1, #0]
 80042ee:	2001      	movs	r0, #1
 80042f0:	4770      	bx	lr
	...

080042f4 <fiprintf>:
 80042f4:	b40e      	push	{r1, r2, r3}
 80042f6:	b503      	push	{r0, r1, lr}
 80042f8:	4601      	mov	r1, r0
 80042fa:	ab03      	add	r3, sp, #12
 80042fc:	4805      	ldr	r0, [pc, #20]	@ (8004314 <fiprintf+0x20>)
 80042fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004302:	6800      	ldr	r0, [r0, #0]
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	f000 f83f 	bl	8004388 <_vfiprintf_r>
 800430a:	b002      	add	sp, #8
 800430c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004310:	b003      	add	sp, #12
 8004312:	4770      	bx	lr
 8004314:	20000818 	.word	0x20000818

08004318 <abort>:
 8004318:	b508      	push	{r3, lr}
 800431a:	2006      	movs	r0, #6
 800431c:	f000 fa08 	bl	8004730 <raise>
 8004320:	2001      	movs	r0, #1
 8004322:	f7fd f9cc 	bl	80016be <_exit>

08004326 <_malloc_usable_size_r>:
 8004326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800432a:	1f18      	subs	r0, r3, #4
 800432c:	2b00      	cmp	r3, #0
 800432e:	bfbc      	itt	lt
 8004330:	580b      	ldrlt	r3, [r1, r0]
 8004332:	18c0      	addlt	r0, r0, r3
 8004334:	4770      	bx	lr

08004336 <__sfputc_r>:
 8004336:	6893      	ldr	r3, [r2, #8]
 8004338:	3b01      	subs	r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	b410      	push	{r4}
 800433e:	6093      	str	r3, [r2, #8]
 8004340:	da08      	bge.n	8004354 <__sfputc_r+0x1e>
 8004342:	6994      	ldr	r4, [r2, #24]
 8004344:	42a3      	cmp	r3, r4
 8004346:	db01      	blt.n	800434c <__sfputc_r+0x16>
 8004348:	290a      	cmp	r1, #10
 800434a:	d103      	bne.n	8004354 <__sfputc_r+0x1e>
 800434c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004350:	f000 b932 	b.w	80045b8 <__swbuf_r>
 8004354:	6813      	ldr	r3, [r2, #0]
 8004356:	1c58      	adds	r0, r3, #1
 8004358:	6010      	str	r0, [r2, #0]
 800435a:	7019      	strb	r1, [r3, #0]
 800435c:	4608      	mov	r0, r1
 800435e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004362:	4770      	bx	lr

08004364 <__sfputs_r>:
 8004364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004366:	4606      	mov	r6, r0
 8004368:	460f      	mov	r7, r1
 800436a:	4614      	mov	r4, r2
 800436c:	18d5      	adds	r5, r2, r3
 800436e:	42ac      	cmp	r4, r5
 8004370:	d101      	bne.n	8004376 <__sfputs_r+0x12>
 8004372:	2000      	movs	r0, #0
 8004374:	e007      	b.n	8004386 <__sfputs_r+0x22>
 8004376:	f814 1b01 	ldrb.w	r1, [r4], #1
 800437a:	463a      	mov	r2, r7
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff ffda 	bl	8004336 <__sfputc_r>
 8004382:	1c43      	adds	r3, r0, #1
 8004384:	d1f3      	bne.n	800436e <__sfputs_r+0xa>
 8004386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004388 <_vfiprintf_r>:
 8004388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800438c:	460d      	mov	r5, r1
 800438e:	b09d      	sub	sp, #116	@ 0x74
 8004390:	4614      	mov	r4, r2
 8004392:	4698      	mov	r8, r3
 8004394:	4606      	mov	r6, r0
 8004396:	b118      	cbz	r0, 80043a0 <_vfiprintf_r+0x18>
 8004398:	6a03      	ldr	r3, [r0, #32]
 800439a:	b90b      	cbnz	r3, 80043a0 <_vfiprintf_r+0x18>
 800439c:	f7fe f8d6 	bl	800254c <__sinit>
 80043a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043a2:	07d9      	lsls	r1, r3, #31
 80043a4:	d405      	bmi.n	80043b2 <_vfiprintf_r+0x2a>
 80043a6:	89ab      	ldrh	r3, [r5, #12]
 80043a8:	059a      	lsls	r2, r3, #22
 80043aa:	d402      	bmi.n	80043b2 <_vfiprintf_r+0x2a>
 80043ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ae:	f7fe fa10 	bl	80027d2 <__retarget_lock_acquire_recursive>
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	d501      	bpl.n	80043bc <_vfiprintf_r+0x34>
 80043b8:	692b      	ldr	r3, [r5, #16]
 80043ba:	b99b      	cbnz	r3, 80043e4 <_vfiprintf_r+0x5c>
 80043bc:	4629      	mov	r1, r5
 80043be:	4630      	mov	r0, r6
 80043c0:	f000 f938 	bl	8004634 <__swsetup_r>
 80043c4:	b170      	cbz	r0, 80043e4 <_vfiprintf_r+0x5c>
 80043c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043c8:	07dc      	lsls	r4, r3, #31
 80043ca:	d504      	bpl.n	80043d6 <_vfiprintf_r+0x4e>
 80043cc:	f04f 30ff 	mov.w	r0, #4294967295
 80043d0:	b01d      	add	sp, #116	@ 0x74
 80043d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	0598      	lsls	r0, r3, #22
 80043da:	d4f7      	bmi.n	80043cc <_vfiprintf_r+0x44>
 80043dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043de:	f7fe f9f9 	bl	80027d4 <__retarget_lock_release_recursive>
 80043e2:	e7f3      	b.n	80043cc <_vfiprintf_r+0x44>
 80043e4:	2300      	movs	r3, #0
 80043e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80043e8:	2320      	movs	r3, #32
 80043ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80043f2:	2330      	movs	r3, #48	@ 0x30
 80043f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80045a4 <_vfiprintf_r+0x21c>
 80043f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043fc:	f04f 0901 	mov.w	r9, #1
 8004400:	4623      	mov	r3, r4
 8004402:	469a      	mov	sl, r3
 8004404:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004408:	b10a      	cbz	r2, 800440e <_vfiprintf_r+0x86>
 800440a:	2a25      	cmp	r2, #37	@ 0x25
 800440c:	d1f9      	bne.n	8004402 <_vfiprintf_r+0x7a>
 800440e:	ebba 0b04 	subs.w	fp, sl, r4
 8004412:	d00b      	beq.n	800442c <_vfiprintf_r+0xa4>
 8004414:	465b      	mov	r3, fp
 8004416:	4622      	mov	r2, r4
 8004418:	4629      	mov	r1, r5
 800441a:	4630      	mov	r0, r6
 800441c:	f7ff ffa2 	bl	8004364 <__sfputs_r>
 8004420:	3001      	adds	r0, #1
 8004422:	f000 80a7 	beq.w	8004574 <_vfiprintf_r+0x1ec>
 8004426:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004428:	445a      	add	r2, fp
 800442a:	9209      	str	r2, [sp, #36]	@ 0x24
 800442c:	f89a 3000 	ldrb.w	r3, [sl]
 8004430:	2b00      	cmp	r3, #0
 8004432:	f000 809f 	beq.w	8004574 <_vfiprintf_r+0x1ec>
 8004436:	2300      	movs	r3, #0
 8004438:	f04f 32ff 	mov.w	r2, #4294967295
 800443c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004440:	f10a 0a01 	add.w	sl, sl, #1
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	9307      	str	r3, [sp, #28]
 8004448:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800444c:	931a      	str	r3, [sp, #104]	@ 0x68
 800444e:	4654      	mov	r4, sl
 8004450:	2205      	movs	r2, #5
 8004452:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004456:	4853      	ldr	r0, [pc, #332]	@ (80045a4 <_vfiprintf_r+0x21c>)
 8004458:	f7fb fec2 	bl	80001e0 <memchr>
 800445c:	9a04      	ldr	r2, [sp, #16]
 800445e:	b9d8      	cbnz	r0, 8004498 <_vfiprintf_r+0x110>
 8004460:	06d1      	lsls	r1, r2, #27
 8004462:	bf44      	itt	mi
 8004464:	2320      	movmi	r3, #32
 8004466:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800446a:	0713      	lsls	r3, r2, #28
 800446c:	bf44      	itt	mi
 800446e:	232b      	movmi	r3, #43	@ 0x2b
 8004470:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004474:	f89a 3000 	ldrb.w	r3, [sl]
 8004478:	2b2a      	cmp	r3, #42	@ 0x2a
 800447a:	d015      	beq.n	80044a8 <_vfiprintf_r+0x120>
 800447c:	9a07      	ldr	r2, [sp, #28]
 800447e:	4654      	mov	r4, sl
 8004480:	2000      	movs	r0, #0
 8004482:	f04f 0c0a 	mov.w	ip, #10
 8004486:	4621      	mov	r1, r4
 8004488:	f811 3b01 	ldrb.w	r3, [r1], #1
 800448c:	3b30      	subs	r3, #48	@ 0x30
 800448e:	2b09      	cmp	r3, #9
 8004490:	d94b      	bls.n	800452a <_vfiprintf_r+0x1a2>
 8004492:	b1b0      	cbz	r0, 80044c2 <_vfiprintf_r+0x13a>
 8004494:	9207      	str	r2, [sp, #28]
 8004496:	e014      	b.n	80044c2 <_vfiprintf_r+0x13a>
 8004498:	eba0 0308 	sub.w	r3, r0, r8
 800449c:	fa09 f303 	lsl.w	r3, r9, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	46a2      	mov	sl, r4
 80044a6:	e7d2      	b.n	800444e <_vfiprintf_r+0xc6>
 80044a8:	9b03      	ldr	r3, [sp, #12]
 80044aa:	1d19      	adds	r1, r3, #4
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	9103      	str	r1, [sp, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	bfbb      	ittet	lt
 80044b4:	425b      	neglt	r3, r3
 80044b6:	f042 0202 	orrlt.w	r2, r2, #2
 80044ba:	9307      	strge	r3, [sp, #28]
 80044bc:	9307      	strlt	r3, [sp, #28]
 80044be:	bfb8      	it	lt
 80044c0:	9204      	strlt	r2, [sp, #16]
 80044c2:	7823      	ldrb	r3, [r4, #0]
 80044c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80044c6:	d10a      	bne.n	80044de <_vfiprintf_r+0x156>
 80044c8:	7863      	ldrb	r3, [r4, #1]
 80044ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80044cc:	d132      	bne.n	8004534 <_vfiprintf_r+0x1ac>
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	9203      	str	r2, [sp, #12]
 80044d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044da:	3402      	adds	r4, #2
 80044dc:	9305      	str	r3, [sp, #20]
 80044de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80045b4 <_vfiprintf_r+0x22c>
 80044e2:	7821      	ldrb	r1, [r4, #0]
 80044e4:	2203      	movs	r2, #3
 80044e6:	4650      	mov	r0, sl
 80044e8:	f7fb fe7a 	bl	80001e0 <memchr>
 80044ec:	b138      	cbz	r0, 80044fe <_vfiprintf_r+0x176>
 80044ee:	9b04      	ldr	r3, [sp, #16]
 80044f0:	eba0 000a 	sub.w	r0, r0, sl
 80044f4:	2240      	movs	r2, #64	@ 0x40
 80044f6:	4082      	lsls	r2, r0
 80044f8:	4313      	orrs	r3, r2
 80044fa:	3401      	adds	r4, #1
 80044fc:	9304      	str	r3, [sp, #16]
 80044fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004502:	4829      	ldr	r0, [pc, #164]	@ (80045a8 <_vfiprintf_r+0x220>)
 8004504:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004508:	2206      	movs	r2, #6
 800450a:	f7fb fe69 	bl	80001e0 <memchr>
 800450e:	2800      	cmp	r0, #0
 8004510:	d03f      	beq.n	8004592 <_vfiprintf_r+0x20a>
 8004512:	4b26      	ldr	r3, [pc, #152]	@ (80045ac <_vfiprintf_r+0x224>)
 8004514:	bb1b      	cbnz	r3, 800455e <_vfiprintf_r+0x1d6>
 8004516:	9b03      	ldr	r3, [sp, #12]
 8004518:	3307      	adds	r3, #7
 800451a:	f023 0307 	bic.w	r3, r3, #7
 800451e:	3308      	adds	r3, #8
 8004520:	9303      	str	r3, [sp, #12]
 8004522:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004524:	443b      	add	r3, r7
 8004526:	9309      	str	r3, [sp, #36]	@ 0x24
 8004528:	e76a      	b.n	8004400 <_vfiprintf_r+0x78>
 800452a:	fb0c 3202 	mla	r2, ip, r2, r3
 800452e:	460c      	mov	r4, r1
 8004530:	2001      	movs	r0, #1
 8004532:	e7a8      	b.n	8004486 <_vfiprintf_r+0xfe>
 8004534:	2300      	movs	r3, #0
 8004536:	3401      	adds	r4, #1
 8004538:	9305      	str	r3, [sp, #20]
 800453a:	4619      	mov	r1, r3
 800453c:	f04f 0c0a 	mov.w	ip, #10
 8004540:	4620      	mov	r0, r4
 8004542:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004546:	3a30      	subs	r2, #48	@ 0x30
 8004548:	2a09      	cmp	r2, #9
 800454a:	d903      	bls.n	8004554 <_vfiprintf_r+0x1cc>
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0c6      	beq.n	80044de <_vfiprintf_r+0x156>
 8004550:	9105      	str	r1, [sp, #20]
 8004552:	e7c4      	b.n	80044de <_vfiprintf_r+0x156>
 8004554:	fb0c 2101 	mla	r1, ip, r1, r2
 8004558:	4604      	mov	r4, r0
 800455a:	2301      	movs	r3, #1
 800455c:	e7f0      	b.n	8004540 <_vfiprintf_r+0x1b8>
 800455e:	ab03      	add	r3, sp, #12
 8004560:	9300      	str	r3, [sp, #0]
 8004562:	462a      	mov	r2, r5
 8004564:	4b12      	ldr	r3, [pc, #72]	@ (80045b0 <_vfiprintf_r+0x228>)
 8004566:	a904      	add	r1, sp, #16
 8004568:	4630      	mov	r0, r6
 800456a:	f7fd fbad 	bl	8001cc8 <_printf_float>
 800456e:	4607      	mov	r7, r0
 8004570:	1c78      	adds	r0, r7, #1
 8004572:	d1d6      	bne.n	8004522 <_vfiprintf_r+0x19a>
 8004574:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004576:	07d9      	lsls	r1, r3, #31
 8004578:	d405      	bmi.n	8004586 <_vfiprintf_r+0x1fe>
 800457a:	89ab      	ldrh	r3, [r5, #12]
 800457c:	059a      	lsls	r2, r3, #22
 800457e:	d402      	bmi.n	8004586 <_vfiprintf_r+0x1fe>
 8004580:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004582:	f7fe f927 	bl	80027d4 <__retarget_lock_release_recursive>
 8004586:	89ab      	ldrh	r3, [r5, #12]
 8004588:	065b      	lsls	r3, r3, #25
 800458a:	f53f af1f 	bmi.w	80043cc <_vfiprintf_r+0x44>
 800458e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004590:	e71e      	b.n	80043d0 <_vfiprintf_r+0x48>
 8004592:	ab03      	add	r3, sp, #12
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	462a      	mov	r2, r5
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <_vfiprintf_r+0x228>)
 800459a:	a904      	add	r1, sp, #16
 800459c:	4630      	mov	r0, r6
 800459e:	f7fd fe2b 	bl	80021f8 <_printf_i>
 80045a2:	e7e4      	b.n	800456e <_vfiprintf_r+0x1e6>
 80045a4:	080049bd 	.word	0x080049bd
 80045a8:	080049c7 	.word	0x080049c7
 80045ac:	08001cc9 	.word	0x08001cc9
 80045b0:	08004365 	.word	0x08004365
 80045b4:	080049c3 	.word	0x080049c3

080045b8 <__swbuf_r>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	460e      	mov	r6, r1
 80045bc:	4614      	mov	r4, r2
 80045be:	4605      	mov	r5, r0
 80045c0:	b118      	cbz	r0, 80045ca <__swbuf_r+0x12>
 80045c2:	6a03      	ldr	r3, [r0, #32]
 80045c4:	b90b      	cbnz	r3, 80045ca <__swbuf_r+0x12>
 80045c6:	f7fd ffc1 	bl	800254c <__sinit>
 80045ca:	69a3      	ldr	r3, [r4, #24]
 80045cc:	60a3      	str	r3, [r4, #8]
 80045ce:	89a3      	ldrh	r3, [r4, #12]
 80045d0:	071a      	lsls	r2, r3, #28
 80045d2:	d501      	bpl.n	80045d8 <__swbuf_r+0x20>
 80045d4:	6923      	ldr	r3, [r4, #16]
 80045d6:	b943      	cbnz	r3, 80045ea <__swbuf_r+0x32>
 80045d8:	4621      	mov	r1, r4
 80045da:	4628      	mov	r0, r5
 80045dc:	f000 f82a 	bl	8004634 <__swsetup_r>
 80045e0:	b118      	cbz	r0, 80045ea <__swbuf_r+0x32>
 80045e2:	f04f 37ff 	mov.w	r7, #4294967295
 80045e6:	4638      	mov	r0, r7
 80045e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ea:	6823      	ldr	r3, [r4, #0]
 80045ec:	6922      	ldr	r2, [r4, #16]
 80045ee:	1a98      	subs	r0, r3, r2
 80045f0:	6963      	ldr	r3, [r4, #20]
 80045f2:	b2f6      	uxtb	r6, r6
 80045f4:	4283      	cmp	r3, r0
 80045f6:	4637      	mov	r7, r6
 80045f8:	dc05      	bgt.n	8004606 <__swbuf_r+0x4e>
 80045fa:	4621      	mov	r1, r4
 80045fc:	4628      	mov	r0, r5
 80045fe:	f7ff fd99 	bl	8004134 <_fflush_r>
 8004602:	2800      	cmp	r0, #0
 8004604:	d1ed      	bne.n	80045e2 <__swbuf_r+0x2a>
 8004606:	68a3      	ldr	r3, [r4, #8]
 8004608:	3b01      	subs	r3, #1
 800460a:	60a3      	str	r3, [r4, #8]
 800460c:	6823      	ldr	r3, [r4, #0]
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	6022      	str	r2, [r4, #0]
 8004612:	701e      	strb	r6, [r3, #0]
 8004614:	6962      	ldr	r2, [r4, #20]
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	429a      	cmp	r2, r3
 800461a:	d004      	beq.n	8004626 <__swbuf_r+0x6e>
 800461c:	89a3      	ldrh	r3, [r4, #12]
 800461e:	07db      	lsls	r3, r3, #31
 8004620:	d5e1      	bpl.n	80045e6 <__swbuf_r+0x2e>
 8004622:	2e0a      	cmp	r6, #10
 8004624:	d1df      	bne.n	80045e6 <__swbuf_r+0x2e>
 8004626:	4621      	mov	r1, r4
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fd83 	bl	8004134 <_fflush_r>
 800462e:	2800      	cmp	r0, #0
 8004630:	d0d9      	beq.n	80045e6 <__swbuf_r+0x2e>
 8004632:	e7d6      	b.n	80045e2 <__swbuf_r+0x2a>

08004634 <__swsetup_r>:
 8004634:	b538      	push	{r3, r4, r5, lr}
 8004636:	4b29      	ldr	r3, [pc, #164]	@ (80046dc <__swsetup_r+0xa8>)
 8004638:	4605      	mov	r5, r0
 800463a:	6818      	ldr	r0, [r3, #0]
 800463c:	460c      	mov	r4, r1
 800463e:	b118      	cbz	r0, 8004648 <__swsetup_r+0x14>
 8004640:	6a03      	ldr	r3, [r0, #32]
 8004642:	b90b      	cbnz	r3, 8004648 <__swsetup_r+0x14>
 8004644:	f7fd ff82 	bl	800254c <__sinit>
 8004648:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800464c:	0719      	lsls	r1, r3, #28
 800464e:	d422      	bmi.n	8004696 <__swsetup_r+0x62>
 8004650:	06da      	lsls	r2, r3, #27
 8004652:	d407      	bmi.n	8004664 <__swsetup_r+0x30>
 8004654:	2209      	movs	r2, #9
 8004656:	602a      	str	r2, [r5, #0]
 8004658:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800465c:	81a3      	strh	r3, [r4, #12]
 800465e:	f04f 30ff 	mov.w	r0, #4294967295
 8004662:	e033      	b.n	80046cc <__swsetup_r+0x98>
 8004664:	0758      	lsls	r0, r3, #29
 8004666:	d512      	bpl.n	800468e <__swsetup_r+0x5a>
 8004668:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800466a:	b141      	cbz	r1, 800467e <__swsetup_r+0x4a>
 800466c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004670:	4299      	cmp	r1, r3
 8004672:	d002      	beq.n	800467a <__swsetup_r+0x46>
 8004674:	4628      	mov	r0, r5
 8004676:	f7fe ff07 	bl	8003488 <_free_r>
 800467a:	2300      	movs	r3, #0
 800467c:	6363      	str	r3, [r4, #52]	@ 0x34
 800467e:	89a3      	ldrh	r3, [r4, #12]
 8004680:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004684:	81a3      	strh	r3, [r4, #12]
 8004686:	2300      	movs	r3, #0
 8004688:	6063      	str	r3, [r4, #4]
 800468a:	6923      	ldr	r3, [r4, #16]
 800468c:	6023      	str	r3, [r4, #0]
 800468e:	89a3      	ldrh	r3, [r4, #12]
 8004690:	f043 0308 	orr.w	r3, r3, #8
 8004694:	81a3      	strh	r3, [r4, #12]
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	b94b      	cbnz	r3, 80046ae <__swsetup_r+0x7a>
 800469a:	89a3      	ldrh	r3, [r4, #12]
 800469c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80046a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a4:	d003      	beq.n	80046ae <__swsetup_r+0x7a>
 80046a6:	4621      	mov	r1, r4
 80046a8:	4628      	mov	r0, r5
 80046aa:	f000 f883 	bl	80047b4 <__smakebuf_r>
 80046ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046b2:	f013 0201 	ands.w	r2, r3, #1
 80046b6:	d00a      	beq.n	80046ce <__swsetup_r+0x9a>
 80046b8:	2200      	movs	r2, #0
 80046ba:	60a2      	str	r2, [r4, #8]
 80046bc:	6962      	ldr	r2, [r4, #20]
 80046be:	4252      	negs	r2, r2
 80046c0:	61a2      	str	r2, [r4, #24]
 80046c2:	6922      	ldr	r2, [r4, #16]
 80046c4:	b942      	cbnz	r2, 80046d8 <__swsetup_r+0xa4>
 80046c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046ca:	d1c5      	bne.n	8004658 <__swsetup_r+0x24>
 80046cc:	bd38      	pop	{r3, r4, r5, pc}
 80046ce:	0799      	lsls	r1, r3, #30
 80046d0:	bf58      	it	pl
 80046d2:	6962      	ldrpl	r2, [r4, #20]
 80046d4:	60a2      	str	r2, [r4, #8]
 80046d6:	e7f4      	b.n	80046c2 <__swsetup_r+0x8e>
 80046d8:	2000      	movs	r0, #0
 80046da:	e7f7      	b.n	80046cc <__swsetup_r+0x98>
 80046dc:	20000818 	.word	0x20000818

080046e0 <_raise_r>:
 80046e0:	291f      	cmp	r1, #31
 80046e2:	b538      	push	{r3, r4, r5, lr}
 80046e4:	4605      	mov	r5, r0
 80046e6:	460c      	mov	r4, r1
 80046e8:	d904      	bls.n	80046f4 <_raise_r+0x14>
 80046ea:	2316      	movs	r3, #22
 80046ec:	6003      	str	r3, [r0, #0]
 80046ee:	f04f 30ff 	mov.w	r0, #4294967295
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80046f6:	b112      	cbz	r2, 80046fe <_raise_r+0x1e>
 80046f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046fc:	b94b      	cbnz	r3, 8004712 <_raise_r+0x32>
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 f830 	bl	8004764 <_getpid_r>
 8004704:	4622      	mov	r2, r4
 8004706:	4601      	mov	r1, r0
 8004708:	4628      	mov	r0, r5
 800470a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800470e:	f000 b817 	b.w	8004740 <_kill_r>
 8004712:	2b01      	cmp	r3, #1
 8004714:	d00a      	beq.n	800472c <_raise_r+0x4c>
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	d103      	bne.n	8004722 <_raise_r+0x42>
 800471a:	2316      	movs	r3, #22
 800471c:	6003      	str	r3, [r0, #0]
 800471e:	2001      	movs	r0, #1
 8004720:	e7e7      	b.n	80046f2 <_raise_r+0x12>
 8004722:	2100      	movs	r1, #0
 8004724:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8004728:	4620      	mov	r0, r4
 800472a:	4798      	blx	r3
 800472c:	2000      	movs	r0, #0
 800472e:	e7e0      	b.n	80046f2 <_raise_r+0x12>

08004730 <raise>:
 8004730:	4b02      	ldr	r3, [pc, #8]	@ (800473c <raise+0xc>)
 8004732:	4601      	mov	r1, r0
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	f7ff bfd3 	b.w	80046e0 <_raise_r>
 800473a:	bf00      	nop
 800473c:	20000818 	.word	0x20000818

08004740 <_kill_r>:
 8004740:	b538      	push	{r3, r4, r5, lr}
 8004742:	4d07      	ldr	r5, [pc, #28]	@ (8004760 <_kill_r+0x20>)
 8004744:	2300      	movs	r3, #0
 8004746:	4604      	mov	r4, r0
 8004748:	4608      	mov	r0, r1
 800474a:	4611      	mov	r1, r2
 800474c:	602b      	str	r3, [r5, #0]
 800474e:	f7fc ffa6 	bl	800169e <_kill>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	d102      	bne.n	800475c <_kill_r+0x1c>
 8004756:	682b      	ldr	r3, [r5, #0]
 8004758:	b103      	cbz	r3, 800475c <_kill_r+0x1c>
 800475a:	6023      	str	r3, [r4, #0]
 800475c:	bd38      	pop	{r3, r4, r5, pc}
 800475e:	bf00      	nop
 8004760:	20000b60 	.word	0x20000b60

08004764 <_getpid_r>:
 8004764:	f7fc bf93 	b.w	800168e <_getpid>

08004768 <__swhatbuf_r>:
 8004768:	b570      	push	{r4, r5, r6, lr}
 800476a:	460c      	mov	r4, r1
 800476c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004770:	2900      	cmp	r1, #0
 8004772:	b096      	sub	sp, #88	@ 0x58
 8004774:	4615      	mov	r5, r2
 8004776:	461e      	mov	r6, r3
 8004778:	da0d      	bge.n	8004796 <__swhatbuf_r+0x2e>
 800477a:	89a3      	ldrh	r3, [r4, #12]
 800477c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004780:	f04f 0100 	mov.w	r1, #0
 8004784:	bf14      	ite	ne
 8004786:	2340      	movne	r3, #64	@ 0x40
 8004788:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800478c:	2000      	movs	r0, #0
 800478e:	6031      	str	r1, [r6, #0]
 8004790:	602b      	str	r3, [r5, #0]
 8004792:	b016      	add	sp, #88	@ 0x58
 8004794:	bd70      	pop	{r4, r5, r6, pc}
 8004796:	466a      	mov	r2, sp
 8004798:	f000 f848 	bl	800482c <_fstat_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	dbec      	blt.n	800477a <__swhatbuf_r+0x12>
 80047a0:	9901      	ldr	r1, [sp, #4]
 80047a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80047a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80047aa:	4259      	negs	r1, r3
 80047ac:	4159      	adcs	r1, r3
 80047ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047b2:	e7eb      	b.n	800478c <__swhatbuf_r+0x24>

080047b4 <__smakebuf_r>:
 80047b4:	898b      	ldrh	r3, [r1, #12]
 80047b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b8:	079d      	lsls	r5, r3, #30
 80047ba:	4606      	mov	r6, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	d507      	bpl.n	80047d0 <__smakebuf_r+0x1c>
 80047c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	6123      	str	r3, [r4, #16]
 80047c8:	2301      	movs	r3, #1
 80047ca:	6163      	str	r3, [r4, #20]
 80047cc:	b003      	add	sp, #12
 80047ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047d0:	ab01      	add	r3, sp, #4
 80047d2:	466a      	mov	r2, sp
 80047d4:	f7ff ffc8 	bl	8004768 <__swhatbuf_r>
 80047d8:	9f00      	ldr	r7, [sp, #0]
 80047da:	4605      	mov	r5, r0
 80047dc:	4639      	mov	r1, r7
 80047de:	4630      	mov	r0, r6
 80047e0:	f7fe fec6 	bl	8003570 <_malloc_r>
 80047e4:	b948      	cbnz	r0, 80047fa <__smakebuf_r+0x46>
 80047e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ea:	059a      	lsls	r2, r3, #22
 80047ec:	d4ee      	bmi.n	80047cc <__smakebuf_r+0x18>
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	f043 0302 	orr.w	r3, r3, #2
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	e7e2      	b.n	80047c0 <__smakebuf_r+0xc>
 80047fa:	89a3      	ldrh	r3, [r4, #12]
 80047fc:	6020      	str	r0, [r4, #0]
 80047fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	9b01      	ldr	r3, [sp, #4]
 8004806:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800480a:	b15b      	cbz	r3, 8004824 <__smakebuf_r+0x70>
 800480c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f81d 	bl	8004850 <_isatty_r>
 8004816:	b128      	cbz	r0, 8004824 <__smakebuf_r+0x70>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	f023 0303 	bic.w	r3, r3, #3
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	81a3      	strh	r3, [r4, #12]
 8004824:	89a3      	ldrh	r3, [r4, #12]
 8004826:	431d      	orrs	r5, r3
 8004828:	81a5      	strh	r5, [r4, #12]
 800482a:	e7cf      	b.n	80047cc <__smakebuf_r+0x18>

0800482c <_fstat_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	@ (800484c <_fstat_r+0x20>)
 8004830:	2300      	movs	r3, #0
 8004832:	4604      	mov	r4, r0
 8004834:	4608      	mov	r0, r1
 8004836:	4611      	mov	r1, r2
 8004838:	602b      	str	r3, [r5, #0]
 800483a:	f7fc ff90 	bl	800175e <_fstat>
 800483e:	1c43      	adds	r3, r0, #1
 8004840:	d102      	bne.n	8004848 <_fstat_r+0x1c>
 8004842:	682b      	ldr	r3, [r5, #0]
 8004844:	b103      	cbz	r3, 8004848 <_fstat_r+0x1c>
 8004846:	6023      	str	r3, [r4, #0]
 8004848:	bd38      	pop	{r3, r4, r5, pc}
 800484a:	bf00      	nop
 800484c:	20000b60 	.word	0x20000b60

08004850 <_isatty_r>:
 8004850:	b538      	push	{r3, r4, r5, lr}
 8004852:	4d06      	ldr	r5, [pc, #24]	@ (800486c <_isatty_r+0x1c>)
 8004854:	2300      	movs	r3, #0
 8004856:	4604      	mov	r4, r0
 8004858:	4608      	mov	r0, r1
 800485a:	602b      	str	r3, [r5, #0]
 800485c:	f7fc ff8f 	bl	800177e <_isatty>
 8004860:	1c43      	adds	r3, r0, #1
 8004862:	d102      	bne.n	800486a <_isatty_r+0x1a>
 8004864:	682b      	ldr	r3, [r5, #0]
 8004866:	b103      	cbz	r3, 800486a <_isatty_r+0x1a>
 8004868:	6023      	str	r3, [r4, #0]
 800486a:	bd38      	pop	{r3, r4, r5, pc}
 800486c:	20000b60 	.word	0x20000b60

08004870 <_init>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr

0800487c <_fini>:
 800487c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487e:	bf00      	nop
 8004880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004882:	bc08      	pop	{r3}
 8004884:	469e      	mov	lr, r3
 8004886:	4770      	bx	lr

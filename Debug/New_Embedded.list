
New_Embedded.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ba8  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000d40  08000d40  00001d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000d50  08000d50  0000280c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000d50  08000d50  0000280c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000d50  08000d50  0000280c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d50  08000d50  00001d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d54  08000d54  00001d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000800  08000d58  00002800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000080c  08000d64  0000280c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008b4  08000d64  000028b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003384  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ff2  00000000  00000000  00005bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000430  00000000  00000000  00006bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002ed  00000000  00000000  00006fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015f02  00000000  00000000  000072d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000067a8  00000000  00000000  0001d1d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c58  00000000  00000000  0002397f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a85d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000db8  00000000  00000000  000a861c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000a93d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000080c 	.word	0x2000080c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000d28 	.word	0x08000d28

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000810 	.word	0x20000810
 80001d4:	08000d28 	.word	0x08000d28

080001d8 <buttoninit>:
 */
#include"Button.h"
#include"LED.h"


void buttoninit(){
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <buttoninit+0x3c>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000214 <buttoninit+0x3c>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80001ee:	4b09      	ldr	r3, [pc, #36]	@ (8000214 <buttoninit+0x3c>)
 80001f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	607b      	str	r3, [r7, #4]
 80001f8:	687b      	ldr	r3, [r7, #4]
	*GPIOA_MODER &= ~(0b11 << 0);
 80001fa:	4b07      	ldr	r3, [pc, #28]	@ (8000218 <buttoninit+0x40>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	4a06      	ldr	r2, [pc, #24]	@ (8000218 <buttoninit+0x40>)
 8000200:	f023 0303 	bic.w	r3, r3, #3
 8000204:	6013      	str	r3, [r2, #0]
}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40023800 	.word	0x40023800
 8000218:	40020000 	.word	0x40020000

0800021c <buttonState>:


/*
 * Make a function can give/return you 1 for button pressed, 0 for button unpresse
 */
char buttonState(){
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	if(*GPIOA_IDR & (1 << 0) == 1){
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <buttonState+0x20>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f003 0301 	and.w	r3, r3, #1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d001      	beq.n	8000230 <buttonState+0x14>
		return 1;
 800022c:	2301      	movs	r3, #1
 800022e:	e000      	b.n	8000232 <buttonState+0x16>
	}
	else {
		return 0;
 8000230:	2300      	movs	r3, #0
	}
}
 8000232:	4618      	mov	r0, r3
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	40020010 	.word	0x40020010

08000240 <EXTI_Init>:
#include <main.h>
#include <base_address.h>
#include "UART.h"


void EXTI_Init(void(*inputFunction(void))){
 8000240:	b480      	push	{r7}
 8000242:	b089      	sub	sp, #36	@ 0x24
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]

	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	4b2e      	ldr	r3, [pc, #184]	@ (8000308 <EXTI_Init+0xc8>)
 800024e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000250:	4a2d      	ldr	r2, [pc, #180]	@ (8000308 <EXTI_Init+0xc8>)
 8000252:	f043 0308 	orr.w	r3, r3, #8
 8000256:	6313      	str	r3, [r2, #48]	@ 0x30
 8000258:	4b2b      	ldr	r3, [pc, #172]	@ (8000308 <EXTI_Init+0xc8>)
 800025a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025c:	f003 0308 	and.w	r3, r3, #8
 8000260:	60fb      	str	r3, [r7, #12]
 8000262:	68fb      	ldr	r3, [r7, #12]
	//Rising edge
		*EXTI_RTSR &= ~(0b11 << 0);
 8000264:	4b29      	ldr	r3, [pc, #164]	@ (800030c <EXTI_Init+0xcc>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a28      	ldr	r2, [pc, #160]	@ (800030c <EXTI_Init+0xcc>)
 800026a:	f023 0303 	bic.w	r3, r3, #3
 800026e:	6013      	str	r3, [r2, #0]
		*EXTI_RTSR |=  (0b01 << 0);
 8000270:	4b26      	ldr	r3, [pc, #152]	@ (800030c <EXTI_Init+0xcc>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a25      	ldr	r2, [pc, #148]	@ (800030c <EXTI_Init+0xcc>)
 8000276:	f043 0301 	orr.w	r3, r3, #1
 800027a:	6013      	str	r3, [r2, #0]
		//Falling edge
		*EXTI_FTSR &= ~(0b11 << 0);
 800027c:	4b24      	ldr	r3, [pc, #144]	@ (8000310 <EXTI_Init+0xd0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a23      	ldr	r2, [pc, #140]	@ (8000310 <EXTI_Init+0xd0>)
 8000282:	f023 0303 	bic.w	r3, r3, #3
 8000286:	6013      	str	r3, [r2, #0]
		*EXTI_FTSR |=  (0b01 << 0);
 8000288:	4b21      	ldr	r3, [pc, #132]	@ (8000310 <EXTI_Init+0xd0>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a20      	ldr	r2, [pc, #128]	@ (8000310 <EXTI_Init+0xd0>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
		//Set mask
		*EXTI_IMR &= ~(0b11 << 0);
 8000294:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <EXTI_Init+0xd4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a1e      	ldr	r2, [pc, #120]	@ (8000314 <EXTI_Init+0xd4>)
 800029a:	f023 0303 	bic.w	r3, r3, #3
 800029e:	6013      	str	r3, [r2, #0]
		*EXTI_IMR |=  (0b01 << 0);
 80002a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000314 <EXTI_Init+0xd4>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000314 <EXTI_Init+0xd4>)
 80002a6:	f043 0301 	orr.w	r3, r3, #1
 80002aa:	6013      	str	r3, [r2, #0]

		*NVIC_ISER0 |= (1<<6);
 80002ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <EXTI_Init+0xd8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a19      	ldr	r2, [pc, #100]	@ (8000318 <EXTI_Init+0xd8>)
 80002b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002b6:	6013      	str	r3, [r2, #0]

		//MOVE VECTOR TABLE TO RAM, RAM ADDRESS 0X20000000
		uint32_t* src = 0x00; //address
 80002b8:	2300      	movs	r3, #0
 80002ba:	61bb      	str	r3, [r7, #24]
		uint32_t* distance = (uint32_t*) 0x20000000;
 80002bc:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80002c0:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 0x198; i++){
 80002c2:	2300      	movs	r3, #0
 80002c4:	61fb      	str	r3, [r7, #28]
 80002c6:	e00c      	b.n	80002e2 <EXTI_Init+0xa2>
			//distance[i] = src[i];
			*(distance + i) = *(src + i);
 80002c8:	69fb      	ldr	r3, [r7, #28]
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	69ba      	ldr	r2, [r7, #24]
 80002ce:	441a      	add	r2, r3
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	6979      	ldr	r1, [r7, #20]
 80002d6:	440b      	add	r3, r1
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < 0x198; i++){
 80002dc:	69fb      	ldr	r3, [r7, #28]
 80002de:	3301      	adds	r3, #1
 80002e0:	61fb      	str	r3, [r7, #28]
 80002e2:	69fb      	ldr	r3, [r7, #28]
 80002e4:	f5b3 7fcc 	cmp.w	r3, #408	@ 0x198
 80002e8:	dbee      	blt.n	80002c8 <EXTI_Init+0x88>
		}
		//Inform ARM vector table is already offset to RAM
		//uint32_t* VTOR = (uint32_t*)0xE000ED08;
		*my_VTOR = 0x20000000;
 80002ea:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <EXTI_Init+0xdc>)
 80002ec:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80002f0:	601a      	str	r2, [r3, #0]
		//
		int* ptr;
		ptr = (int*) 0x20000058;
 80002f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000320 <EXTI_Init+0xe0>)
 80002f4:	613b      	str	r3, [r7, #16]
		*ptr = inputFunction;
 80002f6:	687a      	ldr	r2, [r7, #4]
 80002f8:	693b      	ldr	r3, [r7, #16]
 80002fa:	601a      	str	r2, [r3, #0]


}
 80002fc:	bf00      	nop
 80002fe:	3724      	adds	r7, #36	@ 0x24
 8000300:	46bd      	mov	sp, r7
 8000302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000306:	4770      	bx	lr
 8000308:	40023800 	.word	0x40023800
 800030c:	40013c08 	.word	0x40013c08
 8000310:	40013c0c 	.word	0x40013c0c
 8000314:	40013c00 	.word	0x40013c00
 8000318:	e000e100 	.word	0xe000e100
 800031c:	e000ed08 	.word	0xe000ed08
 8000320:	20000058 	.word	0x20000058

08000324 <LEDinit>:
 *  Created on: Mar 30, 2025
 *      Author: 84903
 */
#include "LED.h"

void LEDinit(){
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800032a:	2300      	movs	r3, #0
 800032c:	607b      	str	r3, [r7, #4]
 800032e:	4b21      	ldr	r3, [pc, #132]	@ (80003b4 <LEDinit+0x90>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a20      	ldr	r2, [pc, #128]	@ (80003b4 <LEDinit+0x90>)
 8000334:	f043 0308 	orr.w	r3, r3, #8
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
 800033a:	4b1e      	ldr	r3, [pc, #120]	@ (80003b4 <LEDinit+0x90>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
	//LED14
	*GPIOD_MODER &= ~(0b11 << 24); //RESET PD12
 8000346:	4b1c      	ldr	r3, [pc, #112]	@ (80003b8 <LEDinit+0x94>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	4a1b      	ldr	r2, [pc, #108]	@ (80003b8 <LEDinit+0x94>)
 800034c:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8000350:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 24); //Set PD12 as output
 8000352:	4b19      	ldr	r3, [pc, #100]	@ (80003b8 <LEDinit+0x94>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	4a18      	ldr	r2, [pc, #96]	@ (80003b8 <LEDinit+0x94>)
 8000358:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800035c:	6013      	str	r3, [r2, #0]
	//LED13
	*GPIOD_MODER &= ~(0b11 << 26); //RESET PD13
 800035e:	4b16      	ldr	r3, [pc, #88]	@ (80003b8 <LEDinit+0x94>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	4a15      	ldr	r2, [pc, #84]	@ (80003b8 <LEDinit+0x94>)
 8000364:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000368:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 26); //Set PD13 as output
 800036a:	4b13      	ldr	r3, [pc, #76]	@ (80003b8 <LEDinit+0x94>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	4a12      	ldr	r2, [pc, #72]	@ (80003b8 <LEDinit+0x94>)
 8000370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000374:	6013      	str	r3, [r2, #0]
	//LED15
	*GPIOD_MODER &= ~(0b11 << 28); //RESET PD14
 8000376:	4b10      	ldr	r3, [pc, #64]	@ (80003b8 <LEDinit+0x94>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a0f      	ldr	r2, [pc, #60]	@ (80003b8 <LEDinit+0x94>)
 800037c:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8000380:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 28); //Set PD14 as output
 8000382:	4b0d      	ldr	r3, [pc, #52]	@ (80003b8 <LEDinit+0x94>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0c      	ldr	r2, [pc, #48]	@ (80003b8 <LEDinit+0x94>)
 8000388:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800038c:	6013      	str	r3, [r2, #0]
	//LED16
	*GPIOD_MODER &= ~(0b11 << 30); //RESET PD15
 800038e:	4b0a      	ldr	r3, [pc, #40]	@ (80003b8 <LEDinit+0x94>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	4a09      	ldr	r2, [pc, #36]	@ (80003b8 <LEDinit+0x94>)
 8000394:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8000398:	6013      	str	r3, [r2, #0]
	*GPIOD_MODER |=  (0b01 << 30); //Set PD15 as output
 800039a:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <LEDinit+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a06      	ldr	r2, [pc, #24]	@ (80003b8 <LEDinit+0x94>)
 80003a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003a4:	6013      	str	r3, [r2, #0]
}
 80003a6:	bf00      	nop
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	40023800 	.word	0x40023800
 80003b8:	40020c00 	.word	0x40020c00

080003bc <LEDblink>:


void LEDblink(int on_off, uint8_t inputLEDpin){
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	460b      	mov	r3, r1
 80003c6:	70fb      	strb	r3, [r7, #3]
	if (on_off == 1){
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	2b01      	cmp	r3, #1
 80003cc:	d105      	bne.n	80003da <LEDblink+0x1e>
		*GPIOD_BSRR = (1 << inputLEDpin);
 80003ce:	78fb      	ldrb	r3, [r7, #3]
 80003d0:	2201      	movs	r2, #1
 80003d2:	409a      	lsls	r2, r3
 80003d4:	4b07      	ldr	r3, [pc, #28]	@ (80003f4 <LEDblink+0x38>)
 80003d6:	601a      	str	r2, [r3, #0]
	} else {
		*GPIOD_BSRR = (1 << (inputLEDpin + 16));
	}
}
 80003d8:	e005      	b.n	80003e6 <LEDblink+0x2a>
		*GPIOD_BSRR = (1 << (inputLEDpin + 16));
 80003da:	78fb      	ldrb	r3, [r7, #3]
 80003dc:	3310      	adds	r3, #16
 80003de:	2201      	movs	r2, #1
 80003e0:	409a      	lsls	r2, r3
 80003e2:	4b04      	ldr	r3, [pc, #16]	@ (80003f4 <LEDblink+0x38>)
 80003e4:	601a      	str	r2, [r3, #0]
}
 80003e6:	bf00      	nop
 80003e8:	370c      	adds	r7, #12
 80003ea:	46bd      	mov	sp, r7
 80003ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f0:	4770      	bx	lr
 80003f2:	bf00      	nop
 80003f4:	40020c18 	.word	0x40020c18

080003f8 <SPI_Init>:

#include <main.h>
#include "base_address.h"
#include "stm32f4xx_hal.h"

void SPI_Init(){
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
		-Gyroscope works as Slave mode

	 */

	//Set GPIO pin for PA5 as SCLK
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	4b4d      	ldr	r3, [pc, #308]	@ (8000538 <SPI_Init+0x140>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a4c      	ldr	r2, [pc, #304]	@ (8000538 <SPI_Init+0x140>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
 800040e:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <SPI_Init+0x140>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
	*GPIOA_MODER &=  ~(0b11 << 10);
 800041a:	4b48      	ldr	r3, [pc, #288]	@ (800053c <SPI_Init+0x144>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a47      	ldr	r2, [pc, #284]	@ (800053c <SPI_Init+0x144>)
 8000420:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000424:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 10); //alternate func mode
 8000426:	4b45      	ldr	r3, [pc, #276]	@ (800053c <SPI_Init+0x144>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	4a44      	ldr	r2, [pc, #272]	@ (800053c <SPI_Init+0x144>)
 800042c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000430:	6013      	str	r3, [r2, #0]
	//Set GPIO pin for PA6 as MISO
	*GPIOA_MODER &=  ~(0b11 << 12);
 8000432:	4b42      	ldr	r3, [pc, #264]	@ (800053c <SPI_Init+0x144>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	4a41      	ldr	r2, [pc, #260]	@ (800053c <SPI_Init+0x144>)
 8000438:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800043c:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 12); //alternate func mode
 800043e:	4b3f      	ldr	r3, [pc, #252]	@ (800053c <SPI_Init+0x144>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a3e      	ldr	r2, [pc, #248]	@ (800053c <SPI_Init+0x144>)
 8000444:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000448:	6013      	str	r3, [r2, #0]
	//Set GPIO pin for PA7 as MOSI
	*GPIOA_MODER &=  ~(0b11 << 14);
 800044a:	4b3c      	ldr	r3, [pc, #240]	@ (800053c <SPI_Init+0x144>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a3b      	ldr	r2, [pc, #236]	@ (800053c <SPI_Init+0x144>)
 8000450:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000454:	6013      	str	r3, [r2, #0]
	*GPIOA_MODER |=   (0b10 << 14); //alternate func mode
 8000456:	4b39      	ldr	r3, [pc, #228]	@ (800053c <SPI_Init+0x144>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	4a38      	ldr	r2, [pc, #224]	@ (800053c <SPI_Init+0x144>)
 800045c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000460:	6013      	str	r3, [r2, #0]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000462:	2300      	movs	r3, #0
 8000464:	60bb      	str	r3, [r7, #8]
 8000466:	4b34      	ldr	r3, [pc, #208]	@ (8000538 <SPI_Init+0x140>)
 8000468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800046a:	4a33      	ldr	r2, [pc, #204]	@ (8000538 <SPI_Init+0x140>)
 800046c:	f043 0310 	orr.w	r3, r3, #16
 8000470:	6313      	str	r3, [r2, #48]	@ 0x30
 8000472:	4b31      	ldr	r3, [pc, #196]	@ (8000538 <SPI_Init+0x140>)
 8000474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000476:	f003 0310 	and.w	r3, r3, #16
 800047a:	60bb      	str	r3, [r7, #8]
 800047c:	68bb      	ldr	r3, [r7, #8]
	//Set GPIO pin for CS as output for PE3
	*GPIOE_MODER &=  ~(0b11 << 6);
 800047e:	4b30      	ldr	r3, [pc, #192]	@ (8000540 <SPI_Init+0x148>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a2f      	ldr	r2, [pc, #188]	@ (8000540 <SPI_Init+0x148>)
 8000484:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8000488:	6013      	str	r3, [r2, #0]
	*GPIOE_MODER |=   (0b01 << 6); //alternate func mode
 800048a:	4b2d      	ldr	r3, [pc, #180]	@ (8000540 <SPI_Init+0x148>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	4a2c      	ldr	r2, [pc, #176]	@ (8000540 <SPI_Init+0x148>)
 8000490:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000494:	6013      	str	r3, [r2, #0]

	//Alternative function for PA5 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 20);
 8000496:	4b2b      	ldr	r3, [pc, #172]	@ (8000544 <SPI_Init+0x14c>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4a2a      	ldr	r2, [pc, #168]	@ (8000544 <SPI_Init+0x14c>)
 800049c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80004a0:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 20); //AF5: 0101; for PA5 start from bit 20
 80004a2:	4b28      	ldr	r3, [pc, #160]	@ (8000544 <SPI_Init+0x14c>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	4a27      	ldr	r2, [pc, #156]	@ (8000544 <SPI_Init+0x14c>)
 80004a8:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80004ac:	6013      	str	r3, [r2, #0]
	//Alternative function for PA6 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 24);
 80004ae:	4b25      	ldr	r3, [pc, #148]	@ (8000544 <SPI_Init+0x14c>)
 80004b0:	681b      	ldr	r3, [r3, #0]
 80004b2:	4a24      	ldr	r2, [pc, #144]	@ (8000544 <SPI_Init+0x14c>)
 80004b4:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 80004b8:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 24);
 80004ba:	4b22      	ldr	r3, [pc, #136]	@ (8000544 <SPI_Init+0x14c>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	4a21      	ldr	r2, [pc, #132]	@ (8000544 <SPI_Init+0x14c>)
 80004c0:	f043 63a0 	orr.w	r3, r3, #83886080	@ 0x5000000
 80004c4:	6013      	str	r3, [r2, #0]
	//Alternative function for PA7 - table 9 pp.49 datasheet
	*GPIOA_AFRL &= ~ (0b1111 << 28);
 80004c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <SPI_Init+0x14c>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a1e      	ldr	r2, [pc, #120]	@ (8000544 <SPI_Init+0x14c>)
 80004cc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80004d0:	6013      	str	r3, [r2, #0]
	*GPIOA_AFRL |=   (0b0101 << 28);
 80004d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <SPI_Init+0x14c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a1b      	ldr	r2, [pc, #108]	@ (8000544 <SPI_Init+0x14c>)
 80004d8:	f043 43a0 	orr.w	r3, r3, #1342177280	@ 0x50000000
 80004dc:	6013      	str	r3, [r2, #0]

	//enable SPI
	__HAL_RCC_SPI1_CLK_ENABLE();
 80004de:	2300      	movs	r3, #0
 80004e0:	607b      	str	r3, [r7, #4]
 80004e2:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <SPI_Init+0x140>)
 80004e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004e6:	4a14      	ldr	r2, [pc, #80]	@ (8000538 <SPI_Init+0x140>)
 80004e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80004ee:	4b12      	ldr	r3, [pc, #72]	@ (8000538 <SPI_Init+0x140>)
 80004f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004f6:	607b      	str	r3, [r7, #4]
 80004f8:	687b      	ldr	r3, [r7, #4]
	//Master config for STM32
	*SPI1_CR1 |=  (1 << 2);
 80004fa:	4b13      	ldr	r3, [pc, #76]	@ (8000548 <SPI_Init+0x150>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a12      	ldr	r2, [pc, #72]	@ (8000548 <SPI_Init+0x150>)
 8000500:	f043 0304 	orr.w	r3, r3, #4
 8000504:	6013      	str	r3, [r2, #0]
	//Software slave management and internal slave selection
	*SPI1_CR1 |=  (1 << 9) | (1 << 8);
 8000506:	4b10      	ldr	r3, [pc, #64]	@ (8000548 <SPI_Init+0x150>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0f      	ldr	r2, [pc, #60]	@ (8000548 <SPI_Init+0x150>)
 800050c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000510:	6013      	str	r3, [r2, #0]
	//Config clock for SCLk - baudrate control - bit5:3
	*SPI1_CR1 |=   (0b011 << 3);
 8000512:	4b0d      	ldr	r3, [pc, #52]	@ (8000548 <SPI_Init+0x150>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a0c      	ldr	r2, [pc, #48]	@ (8000548 <SPI_Init+0x150>)
 8000518:	f043 0318 	orr.w	r3, r3, #24
 800051c:	6013      	str	r3, [r2, #0]
	//Enable SPI
	*SPI1_CR1 |= (1 << 6);
 800051e:	4b0a      	ldr	r3, [pc, #40]	@ (8000548 <SPI_Init+0x150>)
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a09      	ldr	r2, [pc, #36]	@ (8000548 <SPI_Init+0x150>)
 8000524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000528:	6013      	str	r3, [r2, #0]
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	40021000 	.word	0x40021000
 8000544:	40020020 	.word	0x40020020
 8000548:	40013000 	.word	0x40013000

0800054c <Timer_init>:
 */
#include <main.h>
#include "base_address.h"
#include "stm32f4xx_hal.h"

void Timer_init(){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	__HAL_RCC_TIM1_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <Timer_init+0x4c>)
 8000558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800055a:	4a0f      	ldr	r2, [pc, #60]	@ (8000598 <Timer_init+0x4c>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6453      	str	r3, [r2, #68]	@ 0x44
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <Timer_init+0x4c>)
 8000564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]
	//Timer 1 second so prescaler should be 16.000.000 / 16000 = 1000xung/s
	//Prescaler = 16000 and ARR = 1000
	*TIM1_PSC = 16000 - 1; //Avoid to divide to 0, so the producer have set that if prescaler value is 0, the RCC is auto divide to 1. If 1, it divide to 2 and the same for others
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <Timer_init+0x50>)
 8000570:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000574:	601a      	str	r2, [r3, #0]
	*TIM1_ARR = 1000;
 8000576:	4b0a      	ldr	r3, [pc, #40]	@ (80005a0 <Timer_init+0x54>)
 8000578:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800057c:	601a      	str	r2, [r3, #0]
	//Enable counter - bit 0 thanh ghi CR1
	*TIM1_CR1 |= (1 << 0);
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <Timer_init+0x58>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4a08      	ldr	r2, [pc, #32]	@ (80005a4 <Timer_init+0x58>)
 8000584:	f043 0301 	orr.w	r3, r3, #1
 8000588:	6013      	str	r3, [r2, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40023800 	.word	0x40023800
 800059c:	40010028 	.word	0x40010028
 80005a0:	4001002c 	.word	0x4001002c
 80005a4:	40010000 	.word	0x40010000

080005a8 <UART1_Init>:
#include "string.h"
#include "LED.h"



void UART1_Init(){
 80005a8:	b480      	push	{r7}
 80005aa:	b085      	sub	sp, #20
 80005ac:	af00      	add	r7, sp, #0
	/* Config GPIOB
	-set PB6 as UART1_TX and PB7 as UART1_RX table 9_datasheet_p.49
	-PB6 alternate function AF07
	-PB7 alternate function AF07
	*/
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	4b31      	ldr	r3, [pc, #196]	@ (8000678 <UART1_Init+0xd0>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a30      	ldr	r2, [pc, #192]	@ (8000678 <UART1_Init+0xd0>)
 80005b8:	f043 0302 	orr.w	r3, r3, #2
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005be:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <UART1_Init+0xd0>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	f003 0302 	and.w	r3, r3, #2
 80005c6:	60bb      	str	r3, [r7, #8]
 80005c8:	68bb      	ldr	r3, [r7, #8]
	//PB6 set moder6; PB7 moder7
	//Set alternate function mode (set 10)
	*GPIOB_MODER &= ~ (0b1111 << 12); //Clear bit PB6
 80005ca:	4b2c      	ldr	r3, [pc, #176]	@ (800067c <UART1_Init+0xd4>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a2b      	ldr	r2, [pc, #172]	@ (800067c <UART1_Init+0xd4>)
 80005d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80005d4:	6013      	str	r3, [r2, #0]
	*GPIOB_MODER |=   (0b10  << 12) | (0b10 << 14); //Set alter func bit for PB6 and PB7
 80005d6:	4b29      	ldr	r3, [pc, #164]	@ (800067c <UART1_Init+0xd4>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a28      	ldr	r2, [pc, #160]	@ (800067c <UART1_Init+0xd4>)
 80005dc:	f443 4320 	orr.w	r3, r3, #40960	@ 0xa000
 80005e0:	6013      	str	r3, [r2, #0]

	//Cuz we use pin 6 and 7, so using alternate function low
	*GPIOB_AFRL &= ~(0xFF << 24); //Clear bit AF7 from bit 24 and 28 for port B6 and B7
 80005e2:	4b27      	ldr	r3, [pc, #156]	@ (8000680 <UART1_Init+0xd8>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a26      	ldr	r2, [pc, #152]	@ (8000680 <UART1_Init+0xd8>)
 80005e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80005ec:	6013      	str	r3, [r2, #0]
	*GPIOB_AFRL |=  (0b0111 << 24) | (0b0111 <<28); //Set bit AF7 for pin b6 and b7
 80005ee:	4b24      	ldr	r3, [pc, #144]	@ (8000680 <UART1_Init+0xd8>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	4a23      	ldr	r2, [pc, #140]	@ (8000680 <UART1_Init+0xd8>)
 80005f4:	f043 43ee 	orr.w	r3, r3, #1996488704	@ 0x77000000
 80005f8:	6013      	str	r3, [r2, #0]
		+DIV_Mantissa = 104
		+DIV_Fraction = 0.166666667 * 15 = 2.5 (round to 3)

		*/
	//the note for this part in samsung tablet due to formula reason.
	__HAL_RCC_USART1_CLK_ENABLE();	// the default RCC clock automatically provide 16Mhz
 80005fa:	2300      	movs	r3, #0
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	4b1e      	ldr	r3, [pc, #120]	@ (8000678 <UART1_Init+0xd0>)
 8000600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000602:	4a1d      	ldr	r2, [pc, #116]	@ (8000678 <UART1_Init+0xd0>)
 8000604:	f043 0310 	orr.w	r3, r3, #16
 8000608:	6453      	str	r3, [r2, #68]	@ 0x44
 800060a:	4b1b      	ldr	r3, [pc, #108]	@ (8000678 <UART1_Init+0xd0>)
 800060c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800060e:	f003 0310 	and.w	r3, r3, #16
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	687b      	ldr	r3, [r7, #4]
	*UART1_BRR = (104 << 4) | (3 << 0); //baudrate register
 8000616:	4b1b      	ldr	r3, [pc, #108]	@ (8000684 <UART1_Init+0xdc>)
 8000618:	f240 6283 	movw	r2, #1667	@ 0x683
 800061c:	601a      	str	r2, [r3, #0]
	//Set data size - word length that is bit 12 CR1
	*UART1_CR1 |= (1 << 12); //need parity so choose "1", data bits + parity = 9 data bits
 800061e:	4b1a      	ldr	r3, [pc, #104]	@ (8000688 <UART1_Init+0xe0>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a19      	ldr	r2, [pc, #100]	@ (8000688 <UART1_Init+0xe0>)
 8000624:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000628:	6013      	str	r3, [r2, #0]
	//Set Parity bit 10 (PCE - parity control enable) of CR1
	*UART1_CR1 |= (1 << 10);
 800062a:	4b17      	ldr	r3, [pc, #92]	@ (8000688 <UART1_Init+0xe0>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a16      	ldr	r2, [pc, #88]	@ (8000688 <UART1_Init+0xe0>)
 8000630:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000634:	6013      	str	r3, [r2, #0]
	//Enable transmitter
	*UART1_CR1 |= (1 << 3);
 8000636:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <UART1_Init+0xe0>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a13      	ldr	r2, [pc, #76]	@ (8000688 <UART1_Init+0xe0>)
 800063c:	f043 0308 	orr.w	r3, r3, #8
 8000640:	6013      	str	r3, [r2, #0]
	//Enable receiver - CR1 bit 3 TE(Trans enable), bit 2 RE (Receiver enable)
	*UART1_CR1 |= (1 << 2);
 8000642:	4b11      	ldr	r3, [pc, #68]	@ (8000688 <UART1_Init+0xe0>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a10      	ldr	r2, [pc, #64]	@ (8000688 <UART1_Init+0xe0>)
 8000648:	f043 0304 	orr.w	r3, r3, #4
 800064c:	6013      	str	r3, [r2, #0]
	//Enable UART - CR1 bit 13 UE (USART enable)
	*UART1_CR1 |= (1 << 13);
 800064e:	4b0e      	ldr	r3, [pc, #56]	@ (8000688 <UART1_Init+0xe0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	4a0d      	ldr	r2, [pc, #52]	@ (8000688 <UART1_Init+0xe0>)
 8000654:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000658:	6013      	str	r3, [r2, #0]
	//in vector table, USART1 at position number 37
	uint32_t* NVIC_ISER1 = (uint32_t*)(0xE000E104); //Because the address of ISER0  is 0xE000E100 so ISER1 + theem 4 bit
	*NVIC_ISER1 |= 1 << (37 - 32);
#else
	//when RXNE is set, send signal to DMA2, DMA2 move data to RAM
	uint32_t* DMA_CR3 = (uint32_t*)(0x40011014);
 800065a:	4b0c      	ldr	r3, [pc, #48]	@ (800068c <UART1_Init+0xe4>)
 800065c:	60fb      	str	r3, [r7, #12]
	*DMA_CR3 |= (1 << 6);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	601a      	str	r2, [r3, #0]
#endif
}
 800066a:	bf00      	nop
 800066c:	3714      	adds	r7, #20
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020400 	.word	0x40020400
 8000680:	40020420 	.word	0x40020420
 8000684:	40011008 	.word	0x40011008
 8000688:	4001100c 	.word	0x4001100c
 800068c:	40011014 	.word	0x40011014

08000690 <USART1_IRQHandler>:
}

//Library of ST
char recei_data[32];
int rx_index = 0;
void USART1_IRQHandler(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	recei_data[rx_index++] = *UART1_DR; //Khi DR doc du lieu, no se tu clear interrupt flag, no need code for clear flag
 8000694:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <USART1_IRQHandler+0x6c>)
 8000696:	6818      	ldr	r0, [r3, #0]
 8000698:	4b19      	ldr	r3, [pc, #100]	@ (8000700 <USART1_IRQHandler+0x70>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	4918      	ldr	r1, [pc, #96]	@ (8000700 <USART1_IRQHandler+0x70>)
 80006a0:	600a      	str	r2, [r1, #0]
 80006a2:	b2c1      	uxtb	r1, r0
 80006a4:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <USART1_IRQHandler+0x74>)
 80006a6:	54d1      	strb	r1, [r2, r3]
	if(strstr(recei_data, "LED ON") != NULL){
 80006a8:	4917      	ldr	r1, [pc, #92]	@ (8000708 <USART1_IRQHandler+0x78>)
 80006aa:	4816      	ldr	r0, [pc, #88]	@ (8000704 <USART1_IRQHandler+0x74>)
 80006ac:	f000 fb01 	bl	8000cb2 <strstr>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00c      	beq.n	80006d0 <USART1_IRQHandler+0x40>
		LEDblink(1, LED5_pin);
 80006b6:	210e      	movs	r1, #14
 80006b8:	2001      	movs	r0, #1
 80006ba:	f7ff fe7f 	bl	80003bc <LEDblink>
		//UART1_Trans_String("LED turned ON\r\n");
		rx_index = 0;
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <USART1_IRQHandler+0x70>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
		memset(recei_data, 0, sizeof(recei_data));
 80006c4:	2220      	movs	r2, #32
 80006c6:	2100      	movs	r1, #0
 80006c8:	480e      	ldr	r0, [pc, #56]	@ (8000704 <USART1_IRQHandler+0x74>)
 80006ca:	f000 faea 	bl	8000ca2 <memset>
		//UART1_Trans_String("LED turned OFF\r\n");
		rx_index = 0;
		memset(recei_data, 0, sizeof(recei_data));
	}

}
 80006ce:	e012      	b.n	80006f6 <USART1_IRQHandler+0x66>
	else if(strstr(recei_data, "LED OFF") != NULL){
 80006d0:	490e      	ldr	r1, [pc, #56]	@ (800070c <USART1_IRQHandler+0x7c>)
 80006d2:	480c      	ldr	r0, [pc, #48]	@ (8000704 <USART1_IRQHandler+0x74>)
 80006d4:	f000 faed 	bl	8000cb2 <strstr>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d00b      	beq.n	80006f6 <USART1_IRQHandler+0x66>
		LEDblink(0, LED5_pin);
 80006de:	210e      	movs	r1, #14
 80006e0:	2000      	movs	r0, #0
 80006e2:	f7ff fe6b 	bl	80003bc <LEDblink>
		rx_index = 0;
 80006e6:	4b06      	ldr	r3, [pc, #24]	@ (8000700 <USART1_IRQHandler+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
		memset(recei_data, 0, sizeof(recei_data));
 80006ec:	2220      	movs	r2, #32
 80006ee:	2100      	movs	r1, #0
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <USART1_IRQHandler+0x74>)
 80006f2:	f000 fad6 	bl	8000ca2 <memset>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	40011004 	.word	0x40011004
 8000700:	20000848 	.word	0x20000848
 8000704:	20000828 	.word	0x20000828
 8000708:	08000d40 	.word	0x08000d40
 800070c:	08000d48 	.word	0x08000d48

08000710 <dma2_UART1_rx_Init>:

char rx_buf[100];
#define DMA2_ADDR 0x40026400
void dma2_UART1_rx_Init(){
 8000710:	b480      	push	{r7}
 8000712:	b087      	sub	sp, #28
 8000714:	af00      	add	r7, sp, #0
	__HAL_RCC_DMA2_CLK_ENABLE();
 8000716:	2300      	movs	r3, #0
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b27      	ldr	r3, [pc, #156]	@ (80007b8 <dma2_UART1_rx_Init+0xa8>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	4a26      	ldr	r2, [pc, #152]	@ (80007b8 <dma2_UART1_rx_Init+0xa8>)
 8000720:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000724:	6313      	str	r3, [r2, #48]	@ 0x30
 8000726:	4b24      	ldr	r3, [pc, #144]	@ (80007b8 <dma2_UART1_rx_Init+0xa8>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]
	//Using DMA2,  stream 2, channel 4 (table 28, ref manual for DMA)
	uint32_t* DMA_S2CR = (uint32_t*)(DMA2_ADDR + 0x10 + 0x18 * 5); //(9.5.5 in ref manual)
 8000732:	4b22      	ldr	r3, [pc, #136]	@ (80007bc <dma2_UART1_rx_Init+0xac>)
 8000734:	617b      	str	r3, [r7, #20]
	*DMA_S2CR &= ~ (0b111 << 25);
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800073e:	697b      	ldr	r3, [r7, #20]
 8000740:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (0b100 << 25); //Select channel 4 for stream 2
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 10); //Enable memory increment mode
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 8);
 800075a:	697b      	ldr	r3, [r7, #20]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 4); //Enable transfer complete interrupt
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f043 0210 	orr.w	r2, r3, #16
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	601a      	str	r2, [r3, #0]
	*DMA_S2CR |= (1 << 0); //Enable stream 2
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f043 0201 	orr.w	r2, r3, #1
 800077a:	697b      	ldr	r3, [r7, #20]
 800077c:	601a      	str	r2, [r3, #0]

	uint32_t* DMA_S2PAR = (uint32_t*)(DMA2_ADDR + 0x18 + 0x18 * 5); //(9.5.5 in ref manual)
 800077e:	4b10      	ldr	r3, [pc, #64]	@ (80007c0 <dma2_UART1_rx_Init+0xb0>)
 8000780:	613b      	str	r3, [r7, #16]
	*DMA_S2PAR = 0x40011004;
 8000782:	693b      	ldr	r3, [r7, #16]
 8000784:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <dma2_UART1_rx_Init+0xb4>)
 8000786:	601a      	str	r2, [r3, #0]

	uint32_t* DMA_S2NDTR = (uint32_t*)(DMA2_ADDR + 0x14 + 0x18 * 5); //(9.5.5 in ref manual)
 8000788:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <dma2_UART1_rx_Init+0xb8>)
 800078a:	60fb      	str	r3, [r7, #12]
	*DMA_S2NDTR = 7;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	2207      	movs	r2, #7
 8000790:	601a      	str	r2, [r3, #0]

	uint32_t* DMA_S2M0AR = (uint32_t*)(DMA2_ADDR + 0x1C + 0x18 * 5); //(9.5.5 in ref manual)
 8000792:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <dma2_UART1_rx_Init+0xbc>)
 8000794:	60bb      	str	r3, [r7, #8]
	*DMA_S2M0AR = rx_buf;
 8000796:	4a0e      	ldr	r2, [pc, #56]	@ (80007d0 <dma2_UART1_rx_Init+0xc0>)
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	601a      	str	r2, [r3, #0]

	uint32_t* NVIC_ISER2 = (uint32_t*)(0xE000E108);
 800079c:	4b0d      	ldr	r3, [pc, #52]	@ (80007d4 <dma2_UART1_rx_Init+0xc4>)
 800079e:	607b      	str	r3, [r7, #4]
	*NVIC_ISER2 |= 1 << (68-64);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f043 0210 	orr.w	r2, r3, #16
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	601a      	str	r2, [r3, #0]

	/* receive: 7 bytes data
	 * from: UART DR
	 * to: receive_data (0x2000
	 */
}
 80007ac:	bf00      	nop
 80007ae:	371c      	adds	r7, #28
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40023800 	.word	0x40023800
 80007bc:	40026488 	.word	0x40026488
 80007c0:	40026490 	.word	0x40026490
 80007c4:	40011004 	.word	0x40011004
 80007c8:	4002648c 	.word	0x4002648c
 80007cc:	40026494 	.word	0x40026494
 80007d0:	2000084c 	.word	0x2000084c
 80007d4:	e000e108 	.word	0xe000e108

080007d8 <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
	__asm("NOP");
 80007de:	bf00      	nop
	//clear the interrupt flag -> transfer complete interrupt (different to USART1, need to clear flag)
	uint32_t* DMA_HIFCR = (uint32_t*)(DMA2_ADDR + 0x0C);
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <DMA2_Stream2_IRQHandler+0x24>)
 80007e2:	607b      	str	r3, [r7, #4]
	*DMA_HIFCR |= 1 << 11; //bit 11
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	601a      	str	r2, [r3, #0]

}
 80007f0:	bf00      	nop
 80007f2:	370c      	adds	r7, #12
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr
 80007fc:	4002640c 	.word	0x4002640c

08000800 <function>:
//		LEDblink(0, LED5_pin);
//	}
//	*EXTI_PR |= (1<<0);
//}

void function(){
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
	if(buttonState() == 1){
 8000804:	f7ff fd0a 	bl	800021c <buttonState>
 8000808:	4603      	mov	r3, r0
 800080a:	2b01      	cmp	r3, #1
 800080c:	d104      	bne.n	8000818 <function+0x18>
			LEDblink(1, LED6_pin);
 800080e:	210f      	movs	r1, #15
 8000810:	2001      	movs	r0, #1
 8000812:	f7ff fdd3 	bl	80003bc <LEDblink>
 8000816:	e003      	b.n	8000820 <function+0x20>
		} else{
			LEDblink(0, LED6_pin);
 8000818:	210f      	movs	r1, #15
 800081a:	2000      	movs	r0, #0
 800081c:	f7ff fdce 	bl	80003bc <LEDblink>
		}
	*EXTI_PR |= (1<<0);
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <function+0x30>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a02      	ldr	r2, [pc, #8]	@ (8000830 <function+0x30>)
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6013      	str	r3, [r2, #0]
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40013c14 	.word	0x40013c14

08000834 <main>:
//	memset(storeData, 0,  sizeof(storeData));
//	idx = 0;
//}


int main(){
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
	LEDinit();
 8000838:	f7ff fd74 	bl	8000324 <LEDinit>
	HAL_Init();
 800083c:	f000 f8b6 	bl	80009ac <HAL_Init>
	buttoninit();
 8000840:	f7ff fcca 	bl	80001d8 <buttoninit>
	EXTI_Init(function);
 8000844:	480e      	ldr	r0, [pc, #56]	@ (8000880 <main+0x4c>)
 8000846:	f7ff fcfb 	bl	8000240 <EXTI_Init>
	UART1_Init();
 800084a:	f7ff fead 	bl	80005a8 <UART1_Init>
	SPI_Init();
 800084e:	f7ff fdd3 	bl	80003f8 <SPI_Init>
	Timer_init();
 8000852:	f7ff fe7b 	bl	800054c <Timer_init>
	dma2_UART1_rx_Init();
 8000856:	f7ff ff5b 	bl	8000710 <dma2_UART1_rx_Init>
//			LEDblink(1, LED3_pin);
//		else if (UART1_Receive_1byte() == 'b')
//			LEDblink(0, LED3_pin);  //cau 1


		LEDblink(1, LED4_pin);
 800085a:	210c      	movs	r1, #12
 800085c:	2001      	movs	r0, #1
 800085e:	f7ff fdad 	bl	80003bc <LEDblink>
		HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000866:	f000 f913 	bl	8000a90 <HAL_Delay>
		LEDblink(0, LED4_pin);
 800086a:	210c      	movs	r1, #12
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fda5 	bl	80003bc <LEDblink>
		HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000876:	f000 f90b 	bl	8000a90 <HAL_Delay>
		LEDblink(1, LED4_pin);
 800087a:	bf00      	nop
 800087c:	e7ed      	b.n	800085a <main+0x26>
 800087e:	bf00      	nop
 8000880:	08000801 	.word	0x08000801

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f891 	bl	8000a50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000938:	4b06      	ldr	r3, [pc, #24]	@ (8000954 <SystemInit+0x20>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a05      	ldr	r2, [pc, #20]	@ (8000954 <SystemInit+0x20>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
 8000952:	bf00      	nop
 8000954:	e000ed00 	.word	0xe000ed00

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095c:	f7ff ffea 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f000 f9ab 	bl	8000ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff ff53 	bl	8000834 <main>
  bx  lr    
 800098e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000990:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000994:	20000800 	.word	0x20000800
  ldr r1, =_edata
 8000998:	2000080c 	.word	0x2000080c
  ldr r2, =_sidata
 800099c:	08000d58 	.word	0x08000d58
  ldr r2, =_sbss
 80009a0:	2000080c 	.word	0x2000080c
  ldr r4, =_ebss
 80009a4:	200008b4 	.word	0x200008b4

080009a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC_IRQHandler>
	...

080009ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <HAL_Init+0x40>)
 80009b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <HAL_Init+0x40>)
 80009c2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <HAL_Init+0x40>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <HAL_Init+0x40>)
 80009ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d4:	2003      	movs	r0, #3
 80009d6:	f000 f931 	bl	8000c3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009da:	200f      	movs	r0, #15
 80009dc:	f000 f808 	bl	80009f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e0:	f7ff ff50 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e4:	2300      	movs	r3, #0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40023c00 	.word	0x40023c00

080009f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009f8:	4b12      	ldr	r3, [pc, #72]	@ (8000a44 <HAL_InitTick+0x54>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b12      	ldr	r3, [pc, #72]	@ (8000a48 <HAL_InitTick+0x58>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 f93b 	bl	8000c8a <HAL_SYSTICK_Config>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e00e      	b.n	8000a3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b0f      	cmp	r3, #15
 8000a22:	d80a      	bhi.n	8000a3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a24:	2200      	movs	r2, #0
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	f000 f911 	bl	8000c52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a30:	4a06      	ldr	r2, [pc, #24]	@ (8000a4c <HAL_InitTick+0x5c>)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a36:	2300      	movs	r3, #0
 8000a38:	e000      	b.n	8000a3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a3a:	2301      	movs	r3, #1
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	3708      	adds	r7, #8
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000800 	.word	0x20000800
 8000a48:	20000808 	.word	0x20000808
 8000a4c:	20000804 	.word	0x20000804

08000a50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a54:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_IncTick+0x20>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <HAL_IncTick+0x24>)
 8000a62:	6013      	str	r3, [r2, #0]
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000808 	.word	0x20000808
 8000a74:	200008b0 	.word	0x200008b0

08000a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <HAL_GetTick+0x14>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	200008b0 	.word	0x200008b0

08000a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a98:	f7ff ffee 	bl	8000a78 <HAL_GetTick>
 8000a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa8:	d005      	beq.n	8000ab6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad4 <HAL_Delay+0x44>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ab6:	bf00      	nop
 8000ab8:	f7ff ffde 	bl	8000a78 <HAL_GetTick>
 8000abc:	4602      	mov	r2, r0
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d8f7      	bhi.n	8000ab8 <HAL_Delay+0x28>
  {
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000808 	.word	0x20000808

08000ad8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0307 	and.w	r3, r3, #7
 8000ae6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aee:	68ba      	ldr	r2, [r7, #8]
 8000af0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000af4:	4013      	ands	r3, r2
 8000af6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b0a:	4a04      	ldr	r2, [pc, #16]	@ (8000b1c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b24:	4b04      	ldr	r3, [pc, #16]	@ (8000b38 <__NVIC_GetPriorityGrouping+0x18>)
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	0a1b      	lsrs	r3, r3, #8
 8000b2a:	f003 0307 	and.w	r3, r3, #7
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	6039      	str	r1, [r7, #0]
 8000b46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	db0a      	blt.n	8000b66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b50:	683b      	ldr	r3, [r7, #0]
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	490c      	ldr	r1, [pc, #48]	@ (8000b88 <__NVIC_SetPriority+0x4c>)
 8000b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b5a:	0112      	lsls	r2, r2, #4
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	440b      	add	r3, r1
 8000b60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b64:	e00a      	b.n	8000b7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4908      	ldr	r1, [pc, #32]	@ (8000b8c <__NVIC_SetPriority+0x50>)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	f003 030f 	and.w	r3, r3, #15
 8000b72:	3b04      	subs	r3, #4
 8000b74:	0112      	lsls	r2, r2, #4
 8000b76:	b2d2      	uxtb	r2, r2
 8000b78:	440b      	add	r3, r1
 8000b7a:	761a      	strb	r2, [r3, #24]
}
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr
 8000b88:	e000e100 	.word	0xe000e100
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f003 0307 	and.w	r3, r3, #7
 8000ba2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ba4:	69fb      	ldr	r3, [r7, #28]
 8000ba6:	f1c3 0307 	rsb	r3, r3, #7
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	bf28      	it	cs
 8000bae:	2304      	movcs	r3, #4
 8000bb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	2b06      	cmp	r3, #6
 8000bb8:	d902      	bls.n	8000bc0 <NVIC_EncodePriority+0x30>
 8000bba:	69fb      	ldr	r3, [r7, #28]
 8000bbc:	3b03      	subs	r3, #3
 8000bbe:	e000      	b.n	8000bc2 <NVIC_EncodePriority+0x32>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	43da      	mvns	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	401a      	ands	r2, r3
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	43d9      	mvns	r1, r3
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	4313      	orrs	r3, r2
         );
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3724      	adds	r7, #36	@ 0x24
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	3b01      	subs	r3, #1
 8000c04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c08:	d301      	bcc.n	8000c0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00f      	b.n	8000c2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c38 <SysTick_Config+0x40>)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3b01      	subs	r3, #1
 8000c14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c16:	210f      	movs	r1, #15
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f7ff ff8e 	bl	8000b3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c20:	4b05      	ldr	r3, [pc, #20]	@ (8000c38 <SysTick_Config+0x40>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c26:	4b04      	ldr	r3, [pc, #16]	@ (8000c38 <SysTick_Config+0x40>)
 8000c28:	2207      	movs	r2, #7
 8000c2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	e000e010 	.word	0xe000e010

08000c3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f7ff ff47 	bl	8000ad8 <__NVIC_SetPriorityGrouping>
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	4603      	mov	r3, r0
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c64:	f7ff ff5c 	bl	8000b20 <__NVIC_GetPriorityGrouping>
 8000c68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	6978      	ldr	r0, [r7, #20]
 8000c70:	f7ff ff8e 	bl	8000b90 <NVIC_EncodePriority>
 8000c74:	4602      	mov	r2, r0
 8000c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff ff5d 	bl	8000b3c <__NVIC_SetPriority>
}
 8000c82:	bf00      	nop
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b082      	sub	sp, #8
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff ffb0 	bl	8000bf8 <SysTick_Config>
 8000c98:	4603      	mov	r3, r0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}

08000ca2 <memset>:
 8000ca2:	4402      	add	r2, r0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <memset+0xa>
 8000caa:	4770      	bx	lr
 8000cac:	f803 1b01 	strb.w	r1, [r3], #1
 8000cb0:	e7f9      	b.n	8000ca6 <memset+0x4>

08000cb2 <strstr>:
 8000cb2:	780a      	ldrb	r2, [r1, #0]
 8000cb4:	b570      	push	{r4, r5, r6, lr}
 8000cb6:	b96a      	cbnz	r2, 8000cd4 <strstr+0x22>
 8000cb8:	bd70      	pop	{r4, r5, r6, pc}
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	d109      	bne.n	8000cd2 <strstr+0x20>
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	4605      	mov	r5, r0
 8000cc2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d0f6      	beq.n	8000cb8 <strstr+0x6>
 8000cca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8000cce:	429e      	cmp	r6, r3
 8000cd0:	d0f7      	beq.n	8000cc2 <strstr+0x10>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	7803      	ldrb	r3, [r0, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d1ef      	bne.n	8000cba <strstr+0x8>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	e7ec      	b.n	8000cb8 <strstr+0x6>
	...

08000ce0 <__libc_init_array>:
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	4d0d      	ldr	r5, [pc, #52]	@ (8000d18 <__libc_init_array+0x38>)
 8000ce4:	4c0d      	ldr	r4, [pc, #52]	@ (8000d1c <__libc_init_array+0x3c>)
 8000ce6:	1b64      	subs	r4, r4, r5
 8000ce8:	10a4      	asrs	r4, r4, #2
 8000cea:	2600      	movs	r6, #0
 8000cec:	42a6      	cmp	r6, r4
 8000cee:	d109      	bne.n	8000d04 <__libc_init_array+0x24>
 8000cf0:	4d0b      	ldr	r5, [pc, #44]	@ (8000d20 <__libc_init_array+0x40>)
 8000cf2:	4c0c      	ldr	r4, [pc, #48]	@ (8000d24 <__libc_init_array+0x44>)
 8000cf4:	f000 f818 	bl	8000d28 <_init>
 8000cf8:	1b64      	subs	r4, r4, r5
 8000cfa:	10a4      	asrs	r4, r4, #2
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	42a6      	cmp	r6, r4
 8000d00:	d105      	bne.n	8000d0e <__libc_init_array+0x2e>
 8000d02:	bd70      	pop	{r4, r5, r6, pc}
 8000d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d08:	4798      	blx	r3
 8000d0a:	3601      	adds	r6, #1
 8000d0c:	e7ee      	b.n	8000cec <__libc_init_array+0xc>
 8000d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d12:	4798      	blx	r3
 8000d14:	3601      	adds	r6, #1
 8000d16:	e7f2      	b.n	8000cfe <__libc_init_array+0x1e>
 8000d18:	08000d50 	.word	0x08000d50
 8000d1c:	08000d50 	.word	0x08000d50
 8000d20:	08000d50 	.word	0x08000d50
 8000d24:	08000d54 	.word	0x08000d54

08000d28 <_init>:
 8000d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d2a:	bf00      	nop
 8000d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d2e:	bc08      	pop	{r3}
 8000d30:	469e      	mov	lr, r3
 8000d32:	4770      	bx	lr

08000d34 <_fini>:
 8000d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d36:	bf00      	nop
 8000d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d3a:	bc08      	pop	{r3}
 8000d3c:	469e      	mov	lr, r3
 8000d3e:	4770      	bx	lr
